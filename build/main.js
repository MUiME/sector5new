(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @license AngularJS v1.6.1
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

var ELEMENT_NODE = 1;
var COMMENT_NODE = 8;

var ADD_CLASS_SUFFIX = '-add';
var REMOVE_CLASS_SUFFIX = '-remove';
var EVENT_CLASS_PREFIX = 'ng-';
var ACTIVE_CLASS_SUFFIX = '-active';
var PREPARE_CLASS_SUFFIX = '-prepare';

var NG_ANIMATE_CLASSNAME = 'ng-animate';
var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

// Detect proper transitionend/animationend event names.
var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

// If unprefixed events are not supported but webkit-prefixed are, use the latter.
// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
// Register both events in case `window.onanimationend` is not supported because of that,
// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
// therefore there is no reason to test anymore for other vendor prefixes:
// http://caniuse.com/#search=transition
if ((window.ontransitionend === undefined) && (window.onwebkittransitionend !== undefined)) {
  CSS_PREFIX = '-webkit-';
  TRANSITION_PROP = 'WebkitTransition';
  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
} else {
  TRANSITION_PROP = 'transition';
  TRANSITIONEND_EVENT = 'transitionend';
}

if ((window.onanimationend === undefined) && (window.onwebkitanimationend !== undefined)) {
  CSS_PREFIX = '-webkit-';
  ANIMATION_PROP = 'WebkitAnimation';
  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
} else {
  ANIMATION_PROP = 'animation';
  ANIMATIONEND_EVENT = 'animationend';
}

var DURATION_KEY = 'Duration';
var PROPERTY_KEY = 'Property';
var DELAY_KEY = 'Delay';
var TIMING_KEY = 'TimingFunction';
var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
var ANIMATION_PLAYSTATE_KEY = 'PlayState';
var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

var ngMinErr = angular.$$minErr('ng');
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', 'Argument \'{0}\' is {1}', (name || '?'), (reason || 'required'));
  }
  return arg;
}

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function packageStyles(options) {
  var styles = {};
  if (options && (options.to || options.from)) {
    styles.to = options.to;
    styles.from = options.from;
  }
  return styles;
}

function pendClasses(classes, fix, isPrefix) {
  var className = '';
  classes = isArray(classes)
      ? classes
      : classes && isString(classes) && classes.length
          ? classes.split(/\s+/)
          : [];
  forEach(classes, function(klass, i) {
    if (klass && klass.length > 0) {
      className += (i > 0) ? ' ' : '';
      className += isPrefix ? fix + klass
                            : klass + fix;
    }
  });
  return className;
}

function removeFromArray(arr, val) {
  var index = arr.indexOf(val);
  if (val >= 0) {
    arr.splice(index, 1);
  }
}

function stripCommentsFromElement(element) {
  if (element instanceof jqLite) {
    switch (element.length) {
      case 0:
        return element;

      case 1:
        // there is no point of stripping anything if the element
        // is the only element within the jqLite wrapper.
        // (it's important that we retain the element instance.)
        if (element[0].nodeType === ELEMENT_NODE) {
          return element;
        }
        break;

      default:
        return jqLite(extractElementNode(element));
    }
  }

  if (element.nodeType === ELEMENT_NODE) {
    return jqLite(element);
  }
}

function extractElementNode(element) {
  if (!element[0]) return element;
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType === ELEMENT_NODE) {
      return elm;
    }
  }
}

function $$addClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.addClass(elm, className);
  });
}

function $$removeClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.removeClass(elm, className);
  });
}

function applyAnimationClassesFactory($$jqLite) {
  return function(element, options) {
    if (options.addClass) {
      $$addClass($$jqLite, element, options.addClass);
      options.addClass = null;
    }
    if (options.removeClass) {
      $$removeClass($$jqLite, element, options.removeClass);
      options.removeClass = null;
    }
  };
}

function prepareAnimationOptions(options) {
  options = options || {};
  if (!options.$$prepared) {
    var domOperation = options.domOperation || noop;
    options.domOperation = function() {
      options.$$domOperationFired = true;
      domOperation();
      domOperation = noop;
    };
    options.$$prepared = true;
  }
  return options;
}

function applyAnimationStyles(element, options) {
  applyAnimationFromStyles(element, options);
  applyAnimationToStyles(element, options);
}

function applyAnimationFromStyles(element, options) {
  if (options.from) {
    element.css(options.from);
    options.from = null;
  }
}

function applyAnimationToStyles(element, options) {
  if (options.to) {
    element.css(options.to);
    options.to = null;
  }
}

function mergeAnimationDetails(element, oldAnimation, newAnimation) {
  var target = oldAnimation.options || {};
  var newOptions = newAnimation.options || {};

  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

  if (newOptions.preparationClasses) {
    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
    delete newOptions.preparationClasses;
  }

  // noop is basically when there is no callback; otherwise something has been set
  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

  extend(target, newOptions);

  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
  if (realDomOperation) {
    target.domOperation = realDomOperation;
  }

  if (classes.addClass) {
    target.addClass = classes.addClass;
  } else {
    target.addClass = null;
  }

  if (classes.removeClass) {
    target.removeClass = classes.removeClass;
  } else {
    target.removeClass = null;
  }

  oldAnimation.addClass = target.addClass;
  oldAnimation.removeClass = target.removeClass;

  return target;
}

function resolveElementClasses(existing, toAdd, toRemove) {
  var ADD_CLASS = 1;
  var REMOVE_CLASS = -1;

  var flags = {};
  existing = splitClassesToLookup(existing);

  toAdd = splitClassesToLookup(toAdd);
  forEach(toAdd, function(value, key) {
    flags[key] = ADD_CLASS;
  });

  toRemove = splitClassesToLookup(toRemove);
  forEach(toRemove, function(value, key) {
    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
  });

  var classes = {
    addClass: '',
    removeClass: ''
  };

  forEach(flags, function(val, klass) {
    var prop, allow;
    if (val === ADD_CLASS) {
      prop = 'addClass';
      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
    } else if (val === REMOVE_CLASS) {
      prop = 'removeClass';
      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
    }
    if (allow) {
      if (classes[prop].length) {
        classes[prop] += ' ';
      }
      classes[prop] += klass;
    }
  });

  function splitClassesToLookup(classes) {
    if (isString(classes)) {
      classes = classes.split(' ');
    }

    var obj = {};
    forEach(classes, function(klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true;
      }
    });
    return obj;
  }

  return classes;
}

function getDomNode(element) {
  return (element instanceof jqLite) ? element[0] : element;
}

function applyGeneratedPreparationClasses(element, event, options) {
  var classes = '';
  if (event) {
    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
  }
  if (options.addClass) {
    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
  }
  if (options.removeClass) {
    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
  }
  if (classes.length) {
    options.preparationClasses = classes;
    element.addClass(classes);
  }
}

function clearGeneratedClasses(element, options) {
  if (options.preparationClasses) {
    element.removeClass(options.preparationClasses);
    options.preparationClasses = null;
  }
  if (options.activeClasses) {
    element.removeClass(options.activeClasses);
    options.activeClasses = null;
  }
}

function blockTransitions(node, duration) {
  // we use a negative delay value since it performs blocking
  // yet it doesn't kill any existing transitions running on the
  // same element which makes this safe for class-based animations
  var value = duration ? '-' + duration + 's' : '';
  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
  return [TRANSITION_DELAY_PROP, value];
}

function blockKeyframeAnimations(node, applyBlock) {
  var value = applyBlock ? 'paused' : '';
  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
  applyInlineStyle(node, [key, value]);
  return [key, value];
}

function applyInlineStyle(node, styleTuple) {
  var prop = styleTuple[0];
  var value = styleTuple[1];
  node.style[prop] = value;
}

function concatWithSpace(a,b) {
  if (!a) return b;
  if (!b) return a;
  return a + ' ' + b;
}

var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
  var queue, cancelFn;

  function scheduler(tasks) {
    // we make a copy since RAFScheduler mutates the state
    // of the passed in array variable and this would be difficult
    // to track down on the outside code
    queue = queue.concat(tasks);
    nextTick();
  }

  queue = scheduler.queue = [];

  /* waitUntilQuiet does two things:
   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
   *
   * The motivation here is that animation code can request more time from the scheduler
   * before the next wave runs. This allows for certain DOM properties such as classes to
   * be resolved in time for the next animation to run.
   */
  scheduler.waitUntilQuiet = function(fn) {
    if (cancelFn) cancelFn();

    cancelFn = $$rAF(function() {
      cancelFn = null;
      fn();
      nextTick();
    });
  };

  return scheduler;

  function nextTick() {
    if (!queue.length) return;

    var items = queue.shift();
    for (var i = 0; i < items.length; i++) {
      items[i]();
    }

    if (!cancelFn) {
      $$rAF(function() {
        if (!cancelFn) nextTick();
      });
    }
  }
}];

/**
 * @ngdoc directive
 * @name ngAnimateChildren
 * @restrict AE
 * @element ANY
 *
 * @description
 *
 * ngAnimateChildren allows you to specify that children of this element should animate even if any
 * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
 * (structural) animation, child elements that also have an active structural animation are not animated.
 *
 * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
 *
 *
 * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
 *     then child animations are allowed. If the value is `false`, child animations are not allowed.
 *
 * @example
 * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
     <file name="index.html">
       <div ng-controller="MainController as main">
         <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
         <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
         <hr>
         <div ng-animate-children="{{main.animateChildren}}">
           <div ng-if="main.enterElement" class="container">
             List of items:
             <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
           </div>
         </div>
       </div>
     </file>
     <file name="animations.css">

      .container.ng-enter,
      .container.ng-leave {
        transition: all ease 1.5s;
      }

      .container.ng-enter,
      .container.ng-leave-active {
        opacity: 0;
      }

      .container.ng-leave,
      .container.ng-enter-active {
        opacity: 1;
      }

      .item {
        background: firebrick;
        color: #FFF;
        margin-bottom: 10px;
      }

      .item.ng-enter,
      .item.ng-leave {
        transition: transform 1.5s ease;
      }

      .item.ng-enter {
        transform: translateX(50px);
      }

      .item.ng-enter-active {
        transform: translateX(0);
      }
    </file>
    <file name="script.js">
      angular.module('ngAnimateChildren', ['ngAnimate'])
        .controller('MainController', function MainController() {
          this.animateChildren = false;
          this.enterElement = false;
        });
    </file>
  </example>
 */
var $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {
  return {
    link: function(scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (isString(val) && val.length === 0) { //empty attribute
        element.data(NG_ANIMATE_CHILDREN_DATA, true);
      } else {
        // Interpolate and set the value, so that it is available to
        // animations that run right after compilation
        setData($interpolate(val)(scope));
        attrs.$observe('ngAnimateChildren', setData);
      }

      function setData(value) {
        value = value === 'on' || value === 'true';
        element.data(NG_ANIMATE_CHILDREN_DATA, value);
      }
    }
  };
}];

/* exported $AnimateCssProvider */

var ANIMATE_TIMER_KEY = '$$animateCss';

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
 * directives to create more complex animations that can be purely driven using CSS code.
 *
 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
 *
 * ## Usage
 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
 * any automatic control over cancelling animations and/or preventing animations from being run on
 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
 * the CSS animation.
 *
 * The example below shows how we can create a folding animation on an element using `ng-if`:
 *
 * ```html
 * <!-- notice the `fold-animation` CSS class -->
 * <div ng-if="onOff" class="fold-animation">
 *   This element will go BOOM
 * </div>
 * <button ng-click="onOff=true">Fold In</button>
 * ```
 *
 * Now we create the **JavaScript animation** that will trigger the CSS transition:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * ## More Advanced Uses
 *
 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
 *
 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
 * to provide a working animation that will run in CSS.
 *
 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         addClass: 'red large-text pulse-twice',
 *         easing: 'ease-out',
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
 *
 * ```css
 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
 * .red { background:red; }
 * .large-text { font-size:20px; }
 *
 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
 * .pulse-twice {
 *   animation: 0.5s pulse linear 2;
 *   -webkit-animation: 0.5s pulse linear 2;
 * }
 *
 * @keyframes pulse {
 *   from { transform: scale(0.5); }
 *   to { transform: scale(1.5); }
 * }
 *
 * @-webkit-keyframes pulse {
 *   from { -webkit-transform: scale(0.5); }
 *   to { -webkit-transform: scale(1.5); }
 * }
 * ```
 *
 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
 *
 * ## How the Options are handled
 *
 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
 * styles using the `from` and `to` properties.
 *
 * ```js
 * var animator = $animateCss(element, {
 *   from: { background:'red' },
 *   to: { background:'blue' }
 * });
 * animator.start();
 * ```
 *
 * ```css
 * .rotating-animation {
 *   animation:0.5s rotate linear;
 *   -webkit-animation:0.5s rotate linear;
 * }
 *
 * @keyframes rotate {
 *   from { transform: rotate(0deg); }
 *   to { transform: rotate(360deg); }
 * }
 *
 * @-webkit-keyframes rotate {
 *   from { -webkit-transform: rotate(0deg); }
 *   to { -webkit-transform: rotate(360deg); }
 * }
 * ```
 *
 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
 * and spread across the transition and keyframe animation.
 *
 * ## What is returned
 *
 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
 *
 * ```js
 * var animator = $animateCss(element, { ... });
 * ```
 *
 * Now what do the contents of our `animator` variable look like:
 *
 * ```js
 * {
 *   // starts the animation
 *   start: Function,
 *
 *   // ends (aborts) the animation
 *   end: Function
 * }
 * ```
 *
 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
 * and that changing them will not reconfigure the parameters of the animation.
 *
 * ### runner.done() vs runner.then()
 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
 * unless you really need a digest to kick off afterwards.
 *
 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
 *
 * @param {DOMElement} element the element that will be animated
 * @param {object} options the animation-related options that will be applied during the animation
 *
 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
 * is provided then the animation will be skipped entirely.
 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
 * CSS delay value.
 * * `stagger` - A numeric time value representing the delay between successively animated elements
 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
 *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
 *    the animation is closed. This is useful for when the styles are used purely for the sake of
 *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
 *    By default this value is set to `false`.
 *
 * @return {object} an object with start and end methods and details about the animation.
 *
 * * `start` - The method to start the animation. This will return a `Promise` when called.
 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
 */
var ONE_SECOND = 1000;

var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var CLOSING_TIME_BUFFER = 1.5;

var DETECT_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP,
  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
};

var DETECT_STAGGER_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP
};

function getCssKeyframeDurationStyle(duration) {
  return [ANIMATION_DURATION_PROP, duration + 's'];
}

function getCssDelayStyle(delay, isKeyframeAnimation) {
  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
  return [prop, delay + 's'];
}

function computeCssStyles($window, element, properties) {
  var styles = Object.create(null);
  var detectedStyles = $window.getComputedStyle(element) || {};
  forEach(properties, function(formalStyleName, actualStyleName) {
    var val = detectedStyles[formalStyleName];
    if (val) {
      var c = val.charAt(0);

      // only numerical-based values have a negative sign or digit as the first value
      if (c === '-' || c === '+' || c >= 0) {
        val = parseMaxTime(val);
      }

      // by setting this to null in the event that the delay is not set or is set directly as 0
      // then we can still allow for negative values to be used later on and not mistake this
      // value for being greater than any other negative value.
      if (val === 0) {
        val = null;
      }
      styles[actualStyleName] = val;
    }
  });

  return styles;
}

function parseMaxTime(str) {
  var maxValue = 0;
  var values = str.split(/\s*,\s*/);
  forEach(values, function(value) {
    // it's always safe to consider only second values and omit `ms` values since
    // getComputedStyle will always handle the conversion for us
    if (value.charAt(value.length - 1) === 's') {
      value = value.substring(0, value.length - 1);
    }
    value = parseFloat(value) || 0;
    maxValue = maxValue ? Math.max(value, maxValue) : value;
  });
  return maxValue;
}

function truthyTimingValue(val) {
  return val === 0 || val != null;
}

function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
  var style = TRANSITION_PROP;
  var value = duration + 's';
  if (applyOnlyDuration) {
    style += DURATION_KEY;
  } else {
    value += ' linear all';
  }
  return [style, value];
}

function createLocalCacheLookup() {
  var cache = Object.create(null);
  return {
    flush: function() {
      cache = Object.create(null);
    },

    count: function(key) {
      var entry = cache[key];
      return entry ? entry.total : 0;
    },

    get: function(key) {
      var entry = cache[key];
      return entry && entry.value;
    },

    put: function(key, value) {
      if (!cache[key]) {
        cache[key] = { total: 1, value: value };
      } else {
        cache[key].total++;
      }
    }
  };
}

// we do not reassign an already present style value since
// if we detect the style property value again we may be
// detecting styles that were added via the `from` styles.
// We make use of `isDefined` here since an empty string
// or null value (which is what getPropertyValue will return
// for a non-existing style) will still be marked as a valid
// value for the style (a falsy value implies that the style
// is to be removed at the end of the animation). If we had a simple
// "OR" statement then it would not be enough to catch that.
function registerRestorableStyles(backup, node, properties) {
  forEach(properties, function(prop) {
    backup[prop] = isDefined(backup[prop])
        ? backup[prop]
        : node.style.getPropertyValue(prop);
  });
}

var $AnimateCssProvider = ['$animateProvider', /** @this */ function($animateProvider) {
  var gcsLookup = createLocalCacheLookup();
  var gcsStaggerLookup = createLocalCacheLookup();

  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var parentCounter = 0;
    function gcsHashFn(node, extraClasses) {
      var KEY = '$$ngAnimateParentKey';
      var parentNode = node.parentNode;
      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
    }

    function computeCachedCssStyles(node, className, cacheKey, properties) {
      var timings = gcsLookup.get(cacheKey);

      if (!timings) {
        timings = computeCssStyles($window, node, properties);
        if (timings.animationIterationCount === 'infinite') {
          timings.animationIterationCount = 1;
        }
      }

      // we keep putting this in multiple times even though the value and the cacheKey are the same
      // because we're keeping an internal tally of how many duplicate animations are detected.
      gcsLookup.put(cacheKey, timings);
      return timings;
    }

    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
      var stagger;

      // if we have one or more existing matches of matching elements
      // containing the same parent + CSS styles (which is how cacheKey works)
      // then staggering is possible
      if (gcsLookup.count(cacheKey) > 0) {
        stagger = gcsStaggerLookup.get(cacheKey);

        if (!stagger) {
          var staggerClassName = pendClasses(className, '-stagger');

          $$jqLite.addClass(node, staggerClassName);

          stagger = computeCssStyles($window, node, properties);

          // force the conversion of a null value to zero incase not set
          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

          $$jqLite.removeClass(node, staggerClassName);

          gcsStaggerLookup.put(cacheKey, stagger);
        }
      }

      return stagger || {};
    }

    var rafWaitQueue = [];
    function waitUntilQuiet(callback) {
      rafWaitQueue.push(callback);
      $$rAFScheduler.waitUntilQuiet(function() {
        gcsLookup.flush();
        gcsStaggerLookup.flush();

        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
        var pageWidth = $$forceReflow();

        // we use a for loop to ensure that if the queue is changed
        // during this looping then it will consider new requests
        for (var i = 0; i < rafWaitQueue.length; i++) {
          rafWaitQueue[i](pageWidth);
        }
        rafWaitQueue.length = 0;
      });
    }

    function computeTimings(node, className, cacheKey) {
      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
      var aD = timings.animationDelay;
      var tD = timings.transitionDelay;
      timings.maxDelay = aD && tD
          ? Math.max(aD, tD)
          : (aD || tD);
      timings.maxDuration = Math.max(
          timings.animationDuration * timings.animationIterationCount,
          timings.transitionDuration);

      return timings;
    }

    return function init(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = prepareAnimationOptions(copy(options));
      }

      var restoreStyles = {};
      var node = getDomNode(element);
      if (!node
          || !node.parentNode
          || !$$animateQueue.enabled()) {
        return closeAndReturnNoopAnimator();
      }

      var temporaryStyles = [];
      var classes = element.attr('class');
      var styles = packageStyles(options);
      var animationClosed;
      var animationPaused;
      var animationCompleted;
      var runner;
      var runnerHost;
      var maxDelay;
      var maxDelayTime;
      var maxDuration;
      var maxDurationTime;
      var startTime;
      var events = [];

      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
        return closeAndReturnNoopAnimator();
      }

      var method = options.event && isArray(options.event)
            ? options.event.join(' ')
            : options.event;

      var isStructural = method && options.structural;
      var structuralClassName = '';
      var addRemoveClassName = '';

      if (isStructural) {
        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
      } else if (method) {
        structuralClassName = method;
      }

      if (options.addClass) {
        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
      }

      if (options.removeClass) {
        if (addRemoveClassName.length) {
          addRemoveClassName += ' ';
        }
        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
      }

      // there may be a situation where a structural animation is combined together
      // with CSS classes that need to resolve before the animation is computed.
      // However this means that there is no explicit CSS code to block the animation
      // from happening (by setting 0s none in the class name). If this is the case
      // we need to apply the classes before the first rAF so we know to continue if
      // there actually is a detected transition or keyframe animation
      if (options.applyClassesEarly && addRemoveClassName.length) {
        applyAnimationClasses(element, options);
      }

      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
      var fullClassName = classes + ' ' + preparationClasses;
      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

      // there is no way we can trigger an animation if no styles and
      // no classes are being applied which would then trigger a transition,
      // unless there a is raw keyframe value that is applied to the element.
      if (!containsKeyframeAnimation
           && !hasToStyles
           && !preparationClasses) {
        return closeAndReturnNoopAnimator();
      }

      var cacheKey, stagger;
      if (options.stagger > 0) {
        var staggerVal = parseFloat(options.stagger);
        stagger = {
          transitionDelay: staggerVal,
          animationDelay: staggerVal,
          transitionDuration: 0,
          animationDuration: 0
        };
      } else {
        cacheKey = gcsHashFn(node, fullClassName);
        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
      }

      if (!options.$$skipPreparationClasses) {
        $$jqLite.addClass(element, preparationClasses);
      }

      var applyOnlyDuration;

      if (options.transitionStyle) {
        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
        applyInlineStyle(node, transitionStyle);
        temporaryStyles.push(transitionStyle);
      }

      if (options.duration >= 0) {
        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

        // we set the duration so that it will be picked up by getComputedStyle later
        applyInlineStyle(node, durationStyle);
        temporaryStyles.push(durationStyle);
      }

      if (options.keyframeStyle) {
        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
        applyInlineStyle(node, keyframeStyle);
        temporaryStyles.push(keyframeStyle);
      }

      var itemIndex = stagger
          ? options.staggerIndex >= 0
              ? options.staggerIndex
              : gcsLookup.count(cacheKey)
          : 0;

      var isFirst = itemIndex === 0;

      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
      // without causing any combination of transitions to kick in. By adding a negative delay value
      // it forces the setup class' transition to end immediately. We later then remove the negative
      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
      // that if there is no transition defined then nothing will happen and this will also allow
      // other transitions to be stacked on top of each other without any chopping them out.
      if (isFirst && !options.skipBlocking) {
        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
      }

      var timings = computeTimings(node, fullClassName, cacheKey);
      var relativeDelay = timings.maxDelay;
      maxDelay = Math.max(relativeDelay, 0);
      maxDuration = timings.maxDuration;

      var flags = {};
      flags.hasTransitions          = timings.transitionDuration > 0;
      flags.hasAnimations           = timings.animationDuration > 0;
      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty === 'all';
      flags.applyTransitionDuration = hasToStyles && (
                                        (flags.hasTransitions && !flags.hasTransitionAll)
                                         || (flags.hasAnimations && !flags.hasTransitions));
      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

        if (flags.applyTransitionDuration) {
          flags.hasTransitions = true;
          timings.transitionDuration = maxDuration;
          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
        }

        if (flags.applyAnimationDuration) {
          flags.hasAnimations = true;
          timings.animationDuration = maxDuration;
          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
        }
      }

      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
        return closeAndReturnNoopAnimator();
      }

      if (options.delay != null) {
        var delayStyle;
        if (typeof options.delay !== 'boolean') {
          delayStyle = parseFloat(options.delay);
          // number in options.delay means we have to recalculate the delay for the closing timeout
          maxDelay = Math.max(delayStyle, 0);
        }

        if (flags.applyTransitionDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle));
        }

        if (flags.applyAnimationDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
        }
      }

      // we need to recalculate the delay value since we used a pre-emptive negative
      // delay value and the delay value is required for the final event checking. This
      // property will ensure that this will happen after the RAF phase has passed.
      if (options.duration == null && timings.transitionDuration > 0) {
        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
      }

      maxDelayTime = maxDelay * ONE_SECOND;
      maxDurationTime = maxDuration * ONE_SECOND;
      if (!options.skipBlocking) {
        flags.blockTransition = timings.transitionDuration > 0;
        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                                       stagger.animationDelay > 0 &&
                                       stagger.animationDuration === 0;
      }

      if (options.from) {
        if (options.cleanupStyles) {
          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
        }
        applyAnimationFromStyles(element, options);
      }

      if (flags.blockTransition || flags.blockKeyframeAnimation) {
        applyBlocking(maxDuration);
      } else if (!options.skipBlocking) {
        blockTransitions(node, false);
      }

      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
      return {
        $$willAnimate: true,
        end: endFn,
        start: function() {
          if (animationClosed) return;

          runnerHost = {
            end: endFn,
            cancel: cancelFn,
            resume: null, //this will be set during the start() phase
            pause: null
          };

          runner = new $$AnimateRunner(runnerHost);

          waitUntilQuiet(start);

          // we don't have access to pause/resume the animation
          // since it hasn't run yet. AnimateRunner will therefore
          // set noop functions for resume and pause and they will
          // later be overridden once the animation is triggered
          return runner;
        }
      };

      function endFn() {
        close();
      }

      function cancelFn() {
        close(true);
      }

      function close(rejected) {
        // if the promise has been called already then we shouldn't close
        // the animation again
        if (animationClosed || (animationCompleted && animationPaused)) return;
        animationClosed = true;
        animationPaused = false;

        if (!options.$$skipPreparationClasses) {
          $$jqLite.removeClass(element, preparationClasses);
        }
        $$jqLite.removeClass(element, activeClasses);

        blockKeyframeAnimations(node, false);
        blockTransitions(node, false);

        forEach(temporaryStyles, function(entry) {
          // There is only one way to remove inline style properties entirely from elements.
          // By using `removeProperty` this works, but we need to convert camel-cased CSS
          // styles down to hyphenated values.
          node.style[entry[0]] = '';
        });

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);

        if (Object.keys(restoreStyles).length) {
          forEach(restoreStyles, function(value, prop) {
            if (value) {
              node.style.setProperty(prop, value);
            } else {
              node.style.removeProperty(prop);
            }
          });
        }

        // the reason why we have this option is to allow a synchronous closing callback
        // that is fired as SOON as the animation ends (when the CSS is removed) or if
        // the animation never takes off at all. A good example is a leave animation since
        // the element must be removed just after the animation is over or else the element
        // will appear on screen for one animation frame causing an overbearing flicker.
        if (options.onDone) {
          options.onDone();
        }

        if (events && events.length) {
          // Remove the transitionend / animationend listener(s)
          element.off(events.join(' '), onAnimationProgress);
        }

        //Cancel the fallback closing timeout and remove the timer data
        var animationTimerData = element.data(ANIMATE_TIMER_KEY);
        if (animationTimerData) {
          $timeout.cancel(animationTimerData[0].timer);
          element.removeData(ANIMATE_TIMER_KEY);
        }

        // if the preparation function fails then the promise is not setup
        if (runner) {
          runner.complete(!rejected);
        }
      }

      function applyBlocking(duration) {
        if (flags.blockTransition) {
          blockTransitions(node, duration);
        }

        if (flags.blockKeyframeAnimation) {
          blockKeyframeAnimations(node, !!duration);
        }
      }

      function closeAndReturnNoopAnimator() {
        runner = new $$AnimateRunner({
          end: endFn,
          cancel: cancelFn
        });

        // should flush the cache animation
        waitUntilQuiet(noop);
        close();

        return {
          $$willAnimate: false,
          start: function() {
            return runner;
          },
          end: endFn
        };
      }

      function onAnimationProgress(event) {
        event.stopPropagation();
        var ev = event.originalEvent || event;

        // we now always use `Date.now()` due to the recent changes with
        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
        var timeStamp = ev.$manualTimeStamp || Date.now();

        /* Firefox (or possibly just Gecko) likes to not round values up
         * when a ms measurement is used for the animation */
        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

        /* $manualTimeStamp is a mocked timeStamp value which is set
         * within browserTrigger(). This is only here so that tests can
         * mock animations properly. Real events fallback to event.timeStamp,
         * or, if they don't, then a timeStamp is automatically created for them.
         * We're checking to see if the timeStamp surpasses the expected delay,
         * but we're using elapsedTime instead of the timeStamp on the 2nd
         * pre-condition since animationPauseds sometimes close off early */
        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
          // we set this flag to ensure that if the transition is paused then, when resumed,
          // the animation will automatically close itself since transitions cannot be paused.
          animationCompleted = true;
          close();
        }
      }

      function start() {
        if (animationClosed) return;
        if (!node.parentNode) {
          close();
          return;
        }

        // even though we only pause keyframe animations here the pause flag
        // will still happen when transitions are used. Only the transition will
        // not be paused since that is not possible. If the animation ends when
        // paused then it will not complete until unpaused or cancelled.
        var playPause = function(playAnimation) {
          if (!animationCompleted) {
            animationPaused = !playAnimation;
            if (timings.animationDuration) {
              var value = blockKeyframeAnimations(node, animationPaused);
              if (animationPaused) {
                temporaryStyles.push(value);
              } else {
                removeFromArray(temporaryStyles, value);
              }
            }
          } else if (animationPaused && playAnimation) {
            animationPaused = false;
            close();
          }
        };

        // checking the stagger duration prevents an accidentally cascade of the CSS delay style
        // being inherited from the parent. If the transition duration is zero then we can safely
        // rely that the delay value is an intentional stagger delay style.
        var maxStagger = itemIndex > 0
                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0))
                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
        if (maxStagger) {
          $timeout(triggerAnimationStart,
                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
                   false);
        } else {
          triggerAnimationStart();
        }

        // this will decorate the existing promise runner with pause/resume methods
        runnerHost.resume = function() {
          playPause(true);
        };

        runnerHost.pause = function() {
          playPause(false);
        };

        function triggerAnimationStart() {
          // just incase a stagger animation kicks in when the animation
          // itself was cancelled entirely
          if (animationClosed) return;

          applyBlocking(false);

          forEach(temporaryStyles, function(entry) {
            var key = entry[0];
            var value = entry[1];
            node.style[key] = value;
          });

          applyAnimationClasses(element, options);
          $$jqLite.addClass(element, activeClasses);

          if (flags.recalculateTimingStyles) {
            fullClassName = node.getAttribute('class') + ' ' + preparationClasses;
            cacheKey = gcsHashFn(node, fullClassName);

            timings = computeTimings(node, fullClassName, cacheKey);
            relativeDelay = timings.maxDelay;
            maxDelay = Math.max(relativeDelay, 0);
            maxDuration = timings.maxDuration;

            if (maxDuration === 0) {
              close();
              return;
            }

            flags.hasTransitions = timings.transitionDuration > 0;
            flags.hasAnimations = timings.animationDuration > 0;
          }

          if (flags.applyAnimationDelay) {
            relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay)
                  ? parseFloat(options.delay)
                  : relativeDelay;

            maxDelay = Math.max(relativeDelay, 0);
            timings.animationDelay = relativeDelay;
            delayStyle = getCssDelayStyle(relativeDelay, true);
            temporaryStyles.push(delayStyle);
            node.style[delayStyle[0]] = delayStyle[1];
          }

          maxDelayTime = maxDelay * ONE_SECOND;
          maxDurationTime = maxDuration * ONE_SECOND;

          if (options.easing) {
            var easeProp, easeVal = options.easing;
            if (flags.hasTransitions) {
              easeProp = TRANSITION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
            if (flags.hasAnimations) {
              easeProp = ANIMATION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
          }

          if (timings.transitionDuration) {
            events.push(TRANSITIONEND_EVENT);
          }

          if (timings.animationDuration) {
            events.push(ANIMATIONEND_EVENT);
          }

          startTime = Date.now();
          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
          var endTime = startTime + timerTime;

          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
          var setupFallbackTimer = true;
          if (animationsData.length) {
            var currentTimerData = animationsData[0];
            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
            if (setupFallbackTimer) {
              $timeout.cancel(currentTimerData.timer);
            } else {
              animationsData.push(close);
            }
          }

          if (setupFallbackTimer) {
            var timer = $timeout(onAnimationExpired, timerTime, false);
            animationsData[0] = {
              timer: timer,
              expectedEndTime: endTime
            };
            animationsData.push(close);
            element.data(ANIMATE_TIMER_KEY, animationsData);
          }

          if (events.length) {
            element.on(events.join(' '), onAnimationProgress);
          }

          if (options.to) {
            if (options.cleanupStyles) {
              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
            }
            applyAnimationToStyles(element, options);
          }
        }

        function onAnimationExpired() {
          var animationsData = element.data(ANIMATE_TIMER_KEY);

          // this will be false in the event that the element was
          // removed from the DOM (via a leave animation or something
          // similar)
          if (animationsData) {
            for (var i = 1; i < animationsData.length; i++) {
              animationsData[i]();
            }
            element.removeData(ANIMATE_TIMER_KEY);
          }
        }
      }
    };
  }];
}];

var $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateCssDriver');

  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

  function isDocumentFragment(node) {
    return node.parentNode && node.parentNode.nodeType === 11;
  }

  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

    // only browsers that support these properties can render animations
    if (!$sniffer.animations && !$sniffer.transitions) return noop;

    var bodyNode = $document[0].body;
    var rootNode = getDomNode($rootElement);

    var rootBodyElement = jqLite(
      // this is to avoid using something that exists outside of the body
      // we also special case the doc fragment case because our unit test code
      // appends the $rootElement to the body after the app has been bootstrapped
      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
    );

    return function initDriverFn(animationDetails) {
      return animationDetails.from && animationDetails.to
          ? prepareFromToAnchorAnimation(animationDetails.from,
                                         animationDetails.to,
                                         animationDetails.classes,
                                         animationDetails.anchors)
          : prepareRegularAnimation(animationDetails);
    };

    function filterCssClasses(classes) {
      //remove all the `ng-` stuff
      return classes.replace(/\bng-\S+\b/g, '');
    }

    function getUniqueValues(a, b) {
      if (isString(a)) a = a.split(' ');
      if (isString(b)) b = b.split(' ');
      return a.filter(function(val) {
        return b.indexOf(val) === -1;
      }).join(' ');
    }

    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
      var startingClasses = filterCssClasses(getClassVal(clone));

      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

      rootBodyElement.append(clone);

      var animatorIn, animatorOut = prepareOutAnimation();

      // the user may not end up using the `out` animation and
      // only making use of the `in` animation or vice-versa.
      // In either case we should allow this and not assume the
      // animation is over unless both animations are not used.
      if (!animatorOut) {
        animatorIn = prepareInAnimation();
        if (!animatorIn) {
          return end();
        }
      }

      var startingAnimator = animatorOut || animatorIn;

      return {
        start: function() {
          var runner;

          var currentAnimation = startingAnimator.start();
          currentAnimation.done(function() {
            currentAnimation = null;
            if (!animatorIn) {
              animatorIn = prepareInAnimation();
              if (animatorIn) {
                currentAnimation = animatorIn.start();
                currentAnimation.done(function() {
                  currentAnimation = null;
                  end();
                  runner.complete();
                });
                return currentAnimation;
              }
            }
            // in the event that there is no `in` animation
            end();
            runner.complete();
          });

          runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn
          });

          return runner;

          function endFn() {
            if (currentAnimation) {
              currentAnimation.end();
            }
          }
        }
      };

      function calculateAnchorStyles(anchor) {
        var styles = {};

        var coords = getDomNode(anchor).getBoundingClientRect();

        // we iterate directly since safari messes up and doesn't return
        // all the keys for the coords object when iterated
        forEach(['width','height','top','left'], function(key) {
          var value = coords[key];
          switch (key) {
            case 'top':
              value += bodyNode.scrollTop;
              break;
            case 'left':
              value += bodyNode.scrollLeft;
              break;
          }
          styles[key] = Math.floor(value) + 'px';
        });
        return styles;
      }

      function prepareOutAnimation() {
        var animator = $animateCss(clone, {
          addClass: NG_OUT_ANCHOR_CLASS_NAME,
          delay: true,
          from: calculateAnchorStyles(outAnchor)
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function getClassVal(element) {
        return element.attr('class') || '';
      }

      function prepareInAnimation() {
        var endingClasses = filterCssClasses(getClassVal(inAnchor));
        var toAdd = getUniqueValues(endingClasses, startingClasses);
        var toRemove = getUniqueValues(startingClasses, endingClasses);

        var animator = $animateCss(clone, {
          to: calculateAnchorStyles(inAnchor),
          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
          delay: true
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function end() {
        clone.remove();
        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
      }
    }

    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
      var fromAnimation = prepareRegularAnimation(from, noop);
      var toAnimation = prepareRegularAnimation(to, noop);

      var anchorAnimations = [];
      forEach(anchors, function(anchor) {
        var outElement = anchor['out'];
        var inElement = anchor['in'];
        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
        if (animator) {
          anchorAnimations.push(animator);
        }
      });

      // no point in doing anything when there are no elements to animate
      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

      return {
        start: function() {
          var animationRunners = [];

          if (fromAnimation) {
            animationRunners.push(fromAnimation.start());
          }

          if (toAnimation) {
            animationRunners.push(toAnimation.start());
          }

          forEach(anchorAnimations, function(animation) {
            animationRunners.push(animation.start());
          });

          var runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
          });

          $$AnimateRunner.all(animationRunners, function(status) {
            runner.complete(status);
          });

          return runner;

          function endFn() {
            forEach(animationRunners, function(runner) {
              runner.end();
            });
          }
        }
      };
    }

    function prepareRegularAnimation(animationDetails) {
      var element = animationDetails.element;
      var options = animationDetails.options || {};

      if (animationDetails.structural) {
        options.event = animationDetails.event;
        options.structural = true;
        options.applyClassesEarly = true;

        // we special case the leave animation since we want to ensure that
        // the element is removed as soon as the animation is over. Otherwise
        // a flicker might appear or the element may not be removed at all
        if (animationDetails.event === 'leave') {
          options.onDone = options.domOperation;
        }
      }

      // We assign the preparationClasses as the actual animation event since
      // the internals of $animateCss will just suffix the event token values
      // with `-active` to trigger the animation.
      if (options.preparationClasses) {
        options.event = concatWithSpace(options.event, options.preparationClasses);
      }

      var animator = $animateCss(element, options);

      // the driver lookup code inside of $$animation attempts to spawn a
      // driver one by one until a driver returns a.$$willAnimate animator object.
      // $animateCss will always return an object, however, it will pass in
      // a flag as a hint as to whether an animation was detected or not
      return animator.$$willAnimate ? animator : null;
    }
  }];
}];

// TODO(matsko): use caching here to speed things up for detection
// TODO(matsko): add documentation
//  by the time...

var $$AnimateJsProvider = ['$animateProvider', /** @this */ function($animateProvider) {
  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
       function($injector,   $$AnimateRunner,   $$jqLite) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
         // $animateJs(element, 'enter');
    return function(element, event, classes, options) {
      var animationClosed = false;

      // the `classes` argument is optional and if it is not used
      // then the classes will be resolved from the element's className
      // property as well as options.addClass/options.removeClass.
      if (arguments.length === 3 && isObject(classes)) {
        options = classes;
        classes = null;
      }

      options = prepareAnimationOptions(options);
      if (!classes) {
        classes = element.attr('class') || '';
        if (options.addClass) {
          classes += ' ' + options.addClass;
        }
        if (options.removeClass) {
          classes += ' ' + options.removeClass;
        }
      }

      var classesToAdd = options.addClass;
      var classesToRemove = options.removeClass;

      // the lookupAnimations function returns a series of animation objects that are
      // matched up with one or more of the CSS classes. These animation objects are
      // defined via the module.animation factory function. If nothing is detected then
      // we don't return anything which then makes $animation query the next driver.
      var animations = lookupAnimations(classes);
      var before, after;
      if (animations.length) {
        var afterFn, beforeFn;
        if (event === 'leave') {
          beforeFn = 'leave';
          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
        } else {
          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
          afterFn = event;
        }

        if (event !== 'enter' && event !== 'move') {
          before = packageAnimations(element, event, options, animations, beforeFn);
        }
        after  = packageAnimations(element, event, options, animations, afterFn);
      }

      // no matching animations
      if (!before && !after) return;

      function applyOptions() {
        options.domOperation();
        applyAnimationClasses(element, options);
      }

      function close() {
        animationClosed = true;
        applyOptions();
        applyAnimationStyles(element, options);
      }

      var runner;

      return {
        $$willAnimate: true,
        end: function() {
          if (runner) {
            runner.end();
          } else {
            close();
            runner = new $$AnimateRunner();
            runner.complete(true);
          }
          return runner;
        },
        start: function() {
          if (runner) {
            return runner;
          }

          runner = new $$AnimateRunner();
          var closeActiveAnimations;
          var chain = [];

          if (before) {
            chain.push(function(fn) {
              closeActiveAnimations = before(fn);
            });
          }

          if (chain.length) {
            chain.push(function(fn) {
              applyOptions();
              fn(true);
            });
          } else {
            applyOptions();
          }

          if (after) {
            chain.push(function(fn) {
              closeActiveAnimations = after(fn);
            });
          }

          runner.setHost({
            end: function() {
              endAnimations();
            },
            cancel: function() {
              endAnimations(true);
            }
          });

          $$AnimateRunner.chain(chain, onComplete);
          return runner;

          function onComplete(success) {
            close(success);
            runner.complete(success);
          }

          function endAnimations(cancelled) {
            if (!animationClosed) {
              (closeActiveAnimations || noop)(cancelled);
              onComplete(cancelled);
            }
          }
        }
      };

      function executeAnimationFn(fn, element, event, options, onDone) {
        var args;
        switch (event) {
          case 'animate':
            args = [element, options.from, options.to, onDone];
            break;

          case 'setClass':
            args = [element, classesToAdd, classesToRemove, onDone];
            break;

          case 'addClass':
            args = [element, classesToAdd, onDone];
            break;

          case 'removeClass':
            args = [element, classesToRemove, onDone];
            break;

          default:
            args = [element, onDone];
            break;
        }

        args.push(options);

        var value = fn.apply(fn, args);
        if (value) {
          if (isFunction(value.start)) {
            value = value.start();
          }

          if (value instanceof $$AnimateRunner) {
            value.done(onDone);
          } else if (isFunction(value)) {
            // optional onEnd / onCancel callback
            return value;
          }
        }

        return noop;
      }

      function groupEventedAnimations(element, event, options, animations, fnName) {
        var operations = [];
        forEach(animations, function(ani) {
          var animation = ani[fnName];
          if (!animation) return;

          // note that all of these animations will run in parallel
          operations.push(function() {
            var runner;
            var endProgressCb;

            var resolved = false;
            var onAnimationComplete = function(rejected) {
              if (!resolved) {
                resolved = true;
                (endProgressCb || noop)(rejected);
                runner.complete(!rejected);
              }
            };

            runner = new $$AnimateRunner({
              end: function() {
                onAnimationComplete();
              },
              cancel: function() {
                onAnimationComplete(true);
              }
            });

            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
              var cancelled = result === false;
              onAnimationComplete(cancelled);
            });

            return runner;
          });
        });

        return operations;
      }

      function packageAnimations(element, event, options, animations, fnName) {
        var operations = groupEventedAnimations(element, event, options, animations, fnName);
        if (operations.length === 0) {
          var a, b;
          if (fnName === 'beforeSetClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
          } else if (fnName === 'setClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
          }

          if (a) {
            operations = operations.concat(a);
          }
          if (b) {
            operations = operations.concat(b);
          }
        }

        if (operations.length === 0) return;

        // TODO(matsko): add documentation
        return function startAnimation(callback) {
          var runners = [];
          if (operations.length) {
            forEach(operations, function(animateFn) {
              runners.push(animateFn());
            });
          }

          if (runners.length) {
            $$AnimateRunner.all(runners, callback);
          }  else {
            callback();
          }

          return function endFn(reject) {
            forEach(runners, function(runner) {
              if (reject) {
                runner.cancel();
              } else {
                runner.end();
              }
            });
          };
        };
      }
    };

    function lookupAnimations(classes) {
      classes = isArray(classes) ? classes : classes.split(' ');
      var matches = [], flagMap = {};
      for (var i = 0; i < classes.length; i++) {
        var klass = classes[i],
            animationFactory = $animateProvider.$$registeredAnimations[klass];
        if (animationFactory && !flagMap[klass]) {
          matches.push($injector.get(animationFactory));
          flagMap[klass] = true;
        }
      }
      return matches;
    }
  }];
}];

var $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateJsDriver');
  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
    return function initDriverFn(animationDetails) {
      if (animationDetails.from && animationDetails.to) {
        var fromAnimation = prepareAnimation(animationDetails.from);
        var toAnimation = prepareAnimation(animationDetails.to);
        if (!fromAnimation && !toAnimation) return;

        return {
          start: function() {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            $$AnimateRunner.all(animationRunners, done);

            var runner = new $$AnimateRunner({
              end: endFnFactory(),
              cancel: endFnFactory()
            });

            return runner;

            function endFnFactory() {
              return function() {
                forEach(animationRunners, function(runner) {
                  // at this point we cannot cancel animations for groups just yet. 1.5+
                  runner.end();
                });
              };
            }

            function done(status) {
              runner.complete(status);
            }
          }
        };
      } else {
        return prepareAnimation(animationDetails);
      }
    };

    function prepareAnimation(animationDetails) {
      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
      var element = animationDetails.element;
      var event = animationDetails.event;
      var options = animationDetails.options;
      var classes = animationDetails.classes;
      return $$animateJs(element, event, classes, options);
    }
  }];
}];

var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
var $$AnimateQueueProvider = ['$animateProvider', /** @this */ function($animateProvider) {
  var PRE_DIGEST_STATE = 1;
  var RUNNING_STATE = 2;
  var ONE_SPACE = ' ';

  var rules = this.rules = {
    skip: [],
    cancel: [],
    join: []
  };

  function makeTruthyCssClassMap(classString) {
    if (!classString) {
      return null;
    }

    var keys = classString.split(ONE_SPACE);
    var map = Object.create(null);

    forEach(keys, function(key) {
      map[key] = true;
    });
    return map;
  }

  function hasMatchingClasses(newClassString, currentClassString) {
    if (newClassString && currentClassString) {
      var currentClassMap = makeTruthyCssClassMap(currentClassString);
      return newClassString.split(ONE_SPACE).some(function(className) {
        return currentClassMap[className];
      });
    }
  }

  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
    return rules[ruleType].some(function(fn) {
      return fn(element, currentAnimation, previousAnimation);
    });
  }

  function hasAnimationClasses(animation, and) {
    var a = (animation.addClass || '').length > 0;
    var b = (animation.removeClass || '').length > 0;
    return and ? a && b : a || b;
  }

  rules.join.push(function(element, newAnimation, currentAnimation) {
    // if the new animation is class-based then we can just tack that on
    return !newAnimation.structural && hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // there is no need to animate anything if no classes are being added and
    // there is no structural animation that will be triggered
    return !newAnimation.structural && !hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // why should we trigger a new structural animation if the element will
    // be removed from the DOM anyway?
    return currentAnimation.event === 'leave' && newAnimation.structural;
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // if there is an ongoing current animation then don't even bother running the class-based animation
    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // there can never be two structural animations running at the same time
    return currentAnimation.structural && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // if the previous animation is already running, but the new animation will
    // be triggered, but the new animation is structural
    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // cancel the animation if classes added / removed in both animation cancel each other out,
    // but only if the current animation isn't structural

    if (currentAnimation.structural) return false;

    var nA = newAnimation.addClass;
    var nR = newAnimation.removeClass;
    var cA = currentAnimation.addClass;
    var cR = currentAnimation.removeClass;

    // early detection to save the global CPU shortage :)
    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
      return false;
    }

    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
  });

  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
               '$$isDocumentHidden',
       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow,
                $$isDocumentHidden) {

    var activeAnimationsLookup = new $$HashMap();
    var disabledElementsLookup = new $$HashMap();
    var animationsEnabled = null;

    function postDigestTaskFactory() {
      var postDigestCalled = false;
      return function(fn) {
        // we only issue a call to postDigest before
        // it has first passed. This prevents any callbacks
        // from not firing once the animation has completed
        // since it will be out of the digest cycle.
        if (postDigestCalled) {
          fn();
        } else {
          $rootScope.$$postDigest(function() {
            postDigestCalled = true;
            fn();
          });
        }
      };
    }

    // Wait until all directive and route-related templates are downloaded and
    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
    // all of the remote templates being currently downloaded. If there are no
    // templates currently downloading then the watcher will still fire anyway.
    var deregisterWatch = $rootScope.$watch(
      function() { return $templateRequest.totalPendingRequests === 0; },
      function(isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function() {
          $rootScope.$$postDigest(function() {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      }
    );

    var callbackRegistry = Object.create(null);

    // remember that the classNameFilter is set during the provider/config
    // stage therefore we can optimize here and setup a helper function
    var classNameFilter = $animateProvider.classNameFilter();
    var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function normalizeAnimationDetails(element, animation) {
      return mergeAnimationDetails(element, animation, {});
    }

    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
    var contains = window.Node.prototype.contains || /** @this */ function(arg) {
      // eslint-disable-next-line no-bitwise
      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
    };

    function findCallbacks(parent, element, event) {
      var targetNode = getDomNode(element);
      var targetParentNode = getDomNode(parent);

      var matches = [];
      var entries = callbackRegistry[event];
      if (entries) {
        forEach(entries, function(entry) {
          if (contains.call(entry.node, targetNode)) {
            matches.push(entry.callback);
          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
            matches.push(entry.callback);
          }
        });
      }

      return matches;
    }

    function filterFromRegistry(list, matchContainer, matchCallback) {
      var containerNode = extractElementNode(matchContainer);
      return list.filter(function(entry) {
        var isMatch = entry.node === containerNode &&
                        (!matchCallback || entry.callback === matchCallback);
        return !isMatch;
      });
    }

    function cleanupEventListeners(phase, element) {
      if (phase === 'close' && !element[0].parentNode) {
        // If the element is not attached to a parentNode, it has been removed by
        // the domOperation, and we can safely remove the event callbacks
        $animate.off(element);
      }
    }

    var $animate = {
      on: function(event, container, callback) {
        var node = extractElementNode(container);
        callbackRegistry[event] = callbackRegistry[event] || [];
        callbackRegistry[event].push({
          node: node,
          callback: callback
        });

        // Remove the callback when the element is removed from the DOM
        jqLite(container).on('$destroy', function() {
          var animationDetails = activeAnimationsLookup.get(node);

          if (!animationDetails) {
            // If there's an animation ongoing, the callback calling code will remove
            // the event listeners. If we'd remove here, the callbacks would be removed
            // before the animation ends
            $animate.off(event, container, callback);
          }
        });
      },

      off: function(event, container, callback) {
        if (arguments.length === 1 && !isString(arguments[0])) {
          container = arguments[0];
          for (var eventType in callbackRegistry) {
            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
          }

          return;
        }

        var entries = callbackRegistry[event];
        if (!entries) return;

        callbackRegistry[event] = arguments.length === 1
            ? null
            : filterFromRegistry(entries, container, callback);
      },

      pin: function(element, parentElement) {
        assertArg(isElement(element), 'element', 'not an element');
        assertArg(isElement(parentElement), 'parentElement', 'not an element');
        element.data(NG_ANIMATE_PIN_DATA, parentElement);
      },

      push: function(element, event, options, domOperation) {
        options = options || {};
        options.domOperation = domOperation;
        return queueAnimation(element, event, options);
      },

      // this method has four signatures:
      //  () - global getter
      //  (bool) - global setter
      //  (element) - element getter
      //  (element, bool) - element setter<F37>
      enabled: function(element, bool) {
        var argCount = arguments.length;

        if (argCount === 0) {
          // () - Global getter
          bool = !!animationsEnabled;
        } else {
          var hasElement = isElement(element);

          if (!hasElement) {
            // (bool) - Global setter
            bool = animationsEnabled = !!element;
          } else {
            var node = getDomNode(element);

            if (argCount === 1) {
              // (element) - Element getter
              bool = !disabledElementsLookup.get(node);
            } else {
              // (element, bool) - Element setter
              disabledElementsLookup.put(node, !bool);
            }
          }
        }

        return bool;
      }
    };

    return $animate;

    function queueAnimation(element, event, initialOptions) {
      // we always make a copy of the options since
      // there should never be any side effects on
      // the input data when running `$animateCss`.
      var options = copy(initialOptions);

      var node, parent;
      element = stripCommentsFromElement(element);
      if (element) {
        node = getDomNode(element);
        parent = element.parent();
      }

      options = prepareAnimationOptions(options);

      // we create a fake runner with a working promise.
      // These methods will become available after the digest has passed
      var runner = new $$AnimateRunner();

      // this is used to trigger callbacks in postDigest mode
      var runInNextPostDigestOrNow = postDigestTaskFactory();

      if (isArray(options.addClass)) {
        options.addClass = options.addClass.join(' ');
      }

      if (options.addClass && !isString(options.addClass)) {
        options.addClass = null;
      }

      if (isArray(options.removeClass)) {
        options.removeClass = options.removeClass.join(' ');
      }

      if (options.removeClass && !isString(options.removeClass)) {
        options.removeClass = null;
      }

      if (options.from && !isObject(options.from)) {
        options.from = null;
      }

      if (options.to && !isObject(options.to)) {
        options.to = null;
      }

      // there are situations where a directive issues an animation for
      // a jqLite wrapper that contains only comment nodes... If this
      // happens then there is no way we can perform an animation
      if (!node) {
        close();
        return runner;
      }

      var className = [node.getAttribute('class'), options.addClass, options.removeClass].join(' ');
      if (!isAnimatableClassName(className)) {
        close();
        return runner;
      }

      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      var documentHidden = $$isDocumentHidden();

      // this is a hard disable of all animations for the application or on
      // the element itself, therefore  there is no need to continue further
      // past this point if not enabled
      // Animations are also disabled if the document is currently hidden (page is not visible
      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);
      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
      var hasExistingAnimation = !!existingAnimation.state;

      // there is no point in traversing the same collection of parent ancestors if a followup
      // animation will be run on the same element that already did all that checking work
      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {
        skipAnimations = !areAnimationsAllowed(element, parent, event);
      }

      if (skipAnimations) {
        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)
        if (documentHidden) notifyProgress(runner, event, 'start');
        close();
        if (documentHidden) notifyProgress(runner, event, 'close');
        return runner;
      }

      if (isStructural) {
        closeChildAnimations(element);
      }

      var newAnimation = {
        structural: isStructural,
        element: element,
        event: event,
        addClass: options.addClass,
        removeClass: options.removeClass,
        close: close,
        options: options,
        runner: runner
      };

      if (hasExistingAnimation) {
        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
        if (skipAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            close();
            return runner;
          } else {
            mergeAnimationDetails(element, existingAnimation, newAnimation);
            return existingAnimation.runner;
          }
        }
        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
        if (cancelAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            // this will end the animation right away and it is safe
            // to do so since the animation is already running and the
            // runner callback code will run in async
            existingAnimation.runner.end();
          } else if (existingAnimation.structural) {
            // this means that the animation is queued into a digest, but
            // hasn't started yet. Therefore it is safe to run the close
            // method which will call the runner methods in async.
            existingAnimation.close();
          } else {
            // this will merge the new animation options into existing animation options
            mergeAnimationDetails(element, existingAnimation, newAnimation);

            return existingAnimation.runner;
          }
        } else {
          // a joined animation means that this animation will take over the existing one
          // so an example would involve a leave animation taking over an enter. Then when
          // the postDigest kicks in the enter will be ignored.
          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
          if (joinAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              normalizeAnimationDetails(element, newAnimation);
            } else {
              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

              event = newAnimation.event = existingAnimation.event;
              options = mergeAnimationDetails(element, existingAnimation, newAnimation);

              //we return the same runner since only the option values of this animation will
              //be fed into the `existingAnimation`.
              return existingAnimation.runner;
            }
          }
        }
      } else {
        // normalization in this case means that it removes redundant CSS classes that
        // already exist (addClass) or do not exist (removeClass) on the element
        normalizeAnimationDetails(element, newAnimation);
      }

      // when the options are merged and cleaned up we may end up not having to do
      // an animation at all, therefore we should check this before issuing a post
      // digest callback. Structural animations will always run no matter what.
      var isValidAnimation = newAnimation.structural;
      if (!isValidAnimation) {
        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
                            || hasAnimationClasses(newAnimation);
      }

      if (!isValidAnimation) {
        close();
        clearElementAnimationState(element);
        return runner;
      }

      // the counter keeps track of cancelled animations
      var counter = (existingAnimation.counter || 0) + 1;
      newAnimation.counter = counter;

      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

      $rootScope.$$postDigest(function() {
        var animationDetails = activeAnimationsLookup.get(node);
        var animationCancelled = !animationDetails;
        animationDetails = animationDetails || {};

        // if addClass/removeClass is called before something like enter then the
        // registered parent element may not be present. The code below will ensure
        // that a final value for parent element is obtained
        var parentElement = element.parent() || [];

        // animate/structural/class-based animations all have requirements. Otherwise there
        // is no point in performing an animation. The parent node must also be set.
        var isValidAnimation = parentElement.length > 0
                                && (animationDetails.event === 'animate'
                                    || animationDetails.structural
                                    || hasAnimationClasses(animationDetails));

        // this means that the previous animation was cancelled
        // even if the follow-up animation is the same event
        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
          // if another animation did not take over then we need
          // to make sure that the domOperation and options are
          // handled accordingly
          if (animationCancelled) {
            applyAnimationClasses(element, options);
            applyAnimationStyles(element, options);
          }

          // if the event changed from something like enter to leave then we do
          // it, otherwise if it's the same then the end result will be the same too
          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
            options.domOperation();
            runner.end();
          }

          // in the event that the element animation was not cancelled or a follow-up animation
          // isn't allowed to animate from here then we need to clear the state of the element
          // so that any future animations won't read the expired animation data.
          if (!isValidAnimation) {
            clearElementAnimationState(element);
          }

          return;
        }

        // this combined multiple class to addClass / removeClass into a setClass event
        // so long as a structural event did not take over the animation
        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)
            ? 'setClass'
            : animationDetails.event;

        markElementAnimationState(element, RUNNING_STATE);
        var realRunner = $$animation(element, event, animationDetails.options);

        // this will update the runner's flow-control events based on
        // the `realRunner` object.
        runner.setHost(realRunner);
        notifyProgress(runner, event, 'start', {});

        realRunner.done(function(status) {
          close(!status);
          var animationDetails = activeAnimationsLookup.get(node);
          if (animationDetails && animationDetails.counter === counter) {
            clearElementAnimationState(getDomNode(element));
          }
          notifyProgress(runner, event, 'close', {});
        });
      });

      return runner;

      function notifyProgress(runner, event, phase, data) {
        runInNextPostDigestOrNow(function() {
          var callbacks = findCallbacks(parent, element, event);
          if (callbacks.length) {
            // do not optimize this call here to RAF because
            // we don't know how heavy the callback code here will
            // be and if this code is buffered then this can
            // lead to a performance regression.
            $$rAF(function() {
              forEach(callbacks, function(callback) {
                callback(element, phase, data);
              });
              cleanupEventListeners(phase, element);
            });
          } else {
            cleanupEventListeners(phase, element);
          }
        });
        runner.progress(event, phase, data);
      }

      function close(reject) {
        clearGeneratedClasses(element, options);
        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();
        runner.complete(!reject);
      }
    }

    function closeChildAnimations(element) {
      var node = getDomNode(element);
      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
      forEach(children, function(child) {
        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);
        var animationDetails = activeAnimationsLookup.get(child);
        if (animationDetails) {
          switch (state) {
            case RUNNING_STATE:
              animationDetails.runner.end();
              /* falls through */
            case PRE_DIGEST_STATE:
              activeAnimationsLookup.remove(child);
              break;
          }
        }
      });
    }

    function clearElementAnimationState(element) {
      var node = getDomNode(element);
      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
      activeAnimationsLookup.remove(node);
    }

    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
    }

    /**
     * This fn returns false if any of the following is true:
     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
     * b) a parent element has an ongoing structural animation, and animateChildren is false
     * c) the element is not a child of the body
     * d) the element is not a child of the $rootElement
     */
    function areAnimationsAllowed(element, parentElement, event) {
      var bodyElement = jqLite($document[0].body);
      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
      var rootElementDetected = isMatchingElement(element, $rootElement);
      var parentAnimationDetected = false;
      var animateChildren;
      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);
      if (parentHost) {
        parentElement = parentHost;
      }

      parentElement = getDomNode(parentElement);

      while (parentElement) {
        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
        }

        if (parentElement.nodeType !== ELEMENT_NODE) {
          // no point in inspecting the #document element
          break;
        }

        var details = activeAnimationsLookup.get(parentElement) || {};
        // either an enter, leave or move animation will commence
        // therefore we can't allow any animations to take place
        // but if a parent animation is class-based then that's ok
        if (!parentAnimationDetected) {
          var parentElementDisabled = disabledElementsLookup.get(parentElement);

          if (parentElementDisabled === true && elementDisabled !== false) {
            // disable animations if the user hasn't explicitly enabled animations on the
            // current element
            elementDisabled = true;
            // element is disabled via parent element, no need to check anything else
            break;
          } else if (parentElementDisabled === false) {
            elementDisabled = false;
          }
          parentAnimationDetected = details.structural;
        }

        if (isUndefined(animateChildren) || animateChildren === true) {
          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);
          if (isDefined(value)) {
            animateChildren = value;
          }
        }

        // there is no need to continue traversing at this point
        if (parentAnimationDetected && animateChildren === false) break;

        if (!bodyElementDetected) {
          // we also need to ensure that the element is or will be a part of the body element
          // otherwise it is pointless to even issue an animation to be rendered
          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
        }

        if (bodyElementDetected && rootElementDetected) {
          // If both body and root have been found, any other checks are pointless,
          // as no animation data should live outside the application
          break;
        }

        if (!rootElementDetected) {
          // If no rootElement is detected, check if the parentElement is pinned to another element
          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);
          if (parentHost) {
            // The pin target element becomes the next parent element
            parentElement = getDomNode(parentHost);
            continue;
          }
        }

        parentElement = parentElement.parentNode;
      }

      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
      return allowAnimation && rootElementDetected && bodyElementDetected;
    }

    function markElementAnimationState(element, state, details) {
      details = details || {};
      details.state = state;

      var node = getDomNode(element);
      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

      var oldValue = activeAnimationsLookup.get(node);
      var newValue = oldValue
          ? extend(oldValue, details)
          : details;
      activeAnimationsLookup.put(node, newValue);
    }
  }];
}];

/* exported $$AnimationProvider */

var $$AnimationProvider = ['$animateProvider', /** @this */ function($animateProvider) {
  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

  var drivers = this.drivers = [];

  var RUNNER_STORAGE_KEY = '$$animationRunner';

  function setRunner(element, runner) {
    element.data(RUNNER_STORAGE_KEY, runner);
  }

  function removeRunner(element) {
    element.removeData(RUNNER_STORAGE_KEY);
  }

  function getRunner(element) {
    return element.data(RUNNER_STORAGE_KEY);
  }

  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

    var animationQueue = [];
    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function sortAnimations(animations) {
      var tree = { children: [] };
      var i, lookup = new $$HashMap();

      // this is done first beforehand so that the hashmap
      // is filled with a list of the elements that will be animated
      for (i = 0; i < animations.length; i++) {
        var animation = animations[i];
        lookup.put(animation.domNode, animations[i] = {
          domNode: animation.domNode,
          fn: animation.fn,
          children: []
        });
      }

      for (i = 0; i < animations.length; i++) {
        processNode(animations[i]);
      }

      return flatten(tree);

      function processNode(entry) {
        if (entry.processed) return entry;
        entry.processed = true;

        var elementNode = entry.domNode;
        var parentNode = elementNode.parentNode;
        lookup.put(elementNode, entry);

        var parentEntry;
        while (parentNode) {
          parentEntry = lookup.get(parentNode);
          if (parentEntry) {
            if (!parentEntry.processed) {
              parentEntry = processNode(parentEntry);
            }
            break;
          }
          parentNode = parentNode.parentNode;
        }

        (parentEntry || tree).children.push(entry);
        return entry;
      }

      function flatten(tree) {
        var result = [];
        var queue = [];
        var i;

        for (i = 0; i < tree.children.length; i++) {
          queue.push(tree.children[i]);
        }

        var remainingLevelEntries = queue.length;
        var nextLevelEntries = 0;
        var row = [];

        for (i = 0; i < queue.length; i++) {
          var entry = queue[i];
          if (remainingLevelEntries <= 0) {
            remainingLevelEntries = nextLevelEntries;
            nextLevelEntries = 0;
            result.push(row);
            row = [];
          }
          row.push(entry.fn);
          entry.children.forEach(function(childEntry) {
            nextLevelEntries++;
            queue.push(childEntry);
          });
          remainingLevelEntries--;
        }

        if (row.length) {
          result.push(row);
        }

        return result;
      }
    }

    // TODO(matsko): document the signature in a better way
    return function(element, event, options) {
      options = prepareAnimationOptions(options);
      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // there is no animation at the current moment, however
      // these runner methods will get later updated with the
      // methods leading into the driver's end/cancel methods
      // for now they just stop the animation from starting
      var runner = new $$AnimateRunner({
        end: function() { close(); },
        cancel: function() { close(true); }
      });

      if (!drivers.length) {
        close();
        return runner;
      }

      setRunner(element, runner);

      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
      var tempClasses = options.tempClasses;
      if (tempClasses) {
        classes += ' ' + tempClasses;
        options.tempClasses = null;
      }

      var prepareClassName;
      if (isStructural) {
        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
        $$jqLite.addClass(element, prepareClassName);
      }

      animationQueue.push({
        // this data is used by the postDigest code and passed into
        // the driver step function
        element: element,
        classes: classes,
        event: event,
        structural: isStructural,
        options: options,
        beforeStart: beforeStart,
        close: close
      });

      element.on('$destroy', handleDestroyedElement);

      // we only want there to be one function called within the post digest
      // block. This way we can group animations for all the animations that
      // were apart of the same postDigest flush call.
      if (animationQueue.length > 1) return runner;

      $rootScope.$$postDigest(function() {
        var animations = [];
        forEach(animationQueue, function(entry) {
          // the element was destroyed early on which removed the runner
          // form its storage. This means we can't animate this element
          // at all and it already has been closed due to destruction.
          if (getRunner(entry.element)) {
            animations.push(entry);
          } else {
            entry.close();
          }
        });

        // now any future animations will be in another postDigest
        animationQueue.length = 0;

        var groupedAnimations = groupAnimations(animations);
        var toBeSortedAnimations = [];

        forEach(groupedAnimations, function(animationEntry) {
          toBeSortedAnimations.push({
            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
            fn: function triggerAnimationStart() {
              // it's important that we apply the `ng-animate` CSS class and the
              // temporary classes before we do any driver invoking since these
              // CSS classes may be required for proper CSS detection.
              animationEntry.beforeStart();

              var startAnimationFn, closeFn = animationEntry.close;

              // in the event that the element was removed before the digest runs or
              // during the RAF sequencing then we should not trigger the animation.
              var targetElement = animationEntry.anchors
                  ? (animationEntry.from.element || animationEntry.to.element)
                  : animationEntry.element;

              if (getRunner(targetElement)) {
                var operation = invokeFirstDriver(animationEntry);
                if (operation) {
                  startAnimationFn = operation.start;
                }
              }

              if (!startAnimationFn) {
                closeFn();
              } else {
                var animationRunner = startAnimationFn();
                animationRunner.done(function(status) {
                  closeFn(!status);
                });
                updateAnimationRunners(animationEntry, animationRunner);
              }
            }
          });
        });

        // we need to sort each of the animations in order of parent to child
        // relationships. This ensures that the child classes are applied at the
        // right time.
        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
      });

      return runner;

      // TODO(matsko): change to reference nodes
      function getAnchorNodes(node) {
        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
              ? [node]
              : node.querySelectorAll(SELECTOR);
        var anchors = [];
        forEach(items, function(node) {
          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
          if (attr && attr.length) {
            anchors.push(node);
          }
        });
        return anchors;
      }

      function groupAnimations(animations) {
        var preparedAnimations = [];
        var refLookup = {};
        forEach(animations, function(animation, index) {
          var element = animation.element;
          var node = getDomNode(element);
          var event = animation.event;
          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

          if (anchorNodes.length) {
            var direction = enterOrMove ? 'to' : 'from';

            forEach(anchorNodes, function(anchor) {
              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
              refLookup[key] = refLookup[key] || {};
              refLookup[key][direction] = {
                animationID: index,
                element: jqLite(anchor)
              };
            });
          } else {
            preparedAnimations.push(animation);
          }
        });

        var usedIndicesLookup = {};
        var anchorGroups = {};
        forEach(refLookup, function(operations, key) {
          var from = operations.from;
          var to = operations.to;

          if (!from || !to) {
            // only one of these is set therefore we can't have an
            // anchor animation since all three pieces are required
            var index = from ? from.animationID : to.animationID;
            var indexKey = index.toString();
            if (!usedIndicesLookup[indexKey]) {
              usedIndicesLookup[indexKey] = true;
              preparedAnimations.push(animations[index]);
            }
            return;
          }

          var fromAnimation = animations[from.animationID];
          var toAnimation = animations[to.animationID];
          var lookupKey = from.animationID.toString();
          if (!anchorGroups[lookupKey]) {
            var group = anchorGroups[lookupKey] = {
              structural: true,
              beforeStart: function() {
                fromAnimation.beforeStart();
                toAnimation.beforeStart();
              },
              close: function() {
                fromAnimation.close();
                toAnimation.close();
              },
              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
              from: fromAnimation,
              to: toAnimation,
              anchors: [] // TODO(matsko): change to reference nodes
            };

            // the anchor animations require that the from and to elements both have at least
            // one shared CSS class which effectively marries the two elements together to use
            // the same animation driver and to properly sequence the anchor animation.
            if (group.classes.length) {
              preparedAnimations.push(group);
            } else {
              preparedAnimations.push(fromAnimation);
              preparedAnimations.push(toAnimation);
            }
          }

          anchorGroups[lookupKey].anchors.push({
            'out': from.element, 'in': to.element
          });
        });

        return preparedAnimations;
      }

      function cssClassesIntersection(a,b) {
        a = a.split(' ');
        b = b.split(' ');
        var matches = [];

        for (var i = 0; i < a.length; i++) {
          var aa = a[i];
          if (aa.substring(0,3) === 'ng-') continue;

          for (var j = 0; j < b.length; j++) {
            if (aa === b[j]) {
              matches.push(aa);
              break;
            }
          }
        }

        return matches.join(' ');
      }

      function invokeFirstDriver(animationDetails) {
        // we loop in reverse order since the more general drivers (like CSS and JS)
        // may attempt more elements, but custom drivers are more particular
        for (var i = drivers.length - 1; i >= 0; i--) {
          var driverName = drivers[i];
          var factory = $injector.get(driverName);
          var driver = factory(animationDetails);
          if (driver) {
            return driver;
          }
        }
      }

      function beforeStart() {
        element.addClass(NG_ANIMATE_CLASSNAME);
        if (tempClasses) {
          $$jqLite.addClass(element, tempClasses);
        }
        if (prepareClassName) {
          $$jqLite.removeClass(element, prepareClassName);
          prepareClassName = null;
        }
      }

      function updateAnimationRunners(animation, newRunner) {
        if (animation.from && animation.to) {
          update(animation.from.element);
          update(animation.to.element);
        } else {
          update(animation.element);
        }

        function update(element) {
          var runner = getRunner(element);
          if (runner) runner.setHost(newRunner);
        }
      }

      function handleDestroyedElement() {
        var runner = getRunner(element);
        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
          runner.end();
        }
      }

      function close(rejected) {
        element.off('$destroy', handleDestroyedElement);
        removeRunner(element);

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();

        if (tempClasses) {
          $$jqLite.removeClass(element, tempClasses);
        }

        element.removeClass(NG_ANIMATE_CLASSNAME);
        runner.complete(!rejected);
      }
    };
  }];
}];

/**
 * @ngdoc directive
 * @name ngAnimateSwap
 * @restrict A
 * @scope
 *
 * @description
 *
 * ngAnimateSwap is a animation-oriented directive that allows for the container to
 * be removed and entered in whenever the associated expression changes. A
 * common usecase for this directive is a rotating banner or slider component which
 * contains one image being present at a time. When the active image changes
 * then the old image will perform a `leave` animation and the new element
 * will be inserted via an `enter` animation.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|--------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |
 * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |
 *
 * @example
 * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
 *          deps="angular-animate.js"
 *          animations="true" fixBase="true">
 *   <file name="index.html">
 *     <div class="container" ng-controller="AppCtrl">
 *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
 *         {{ number }}
 *       </div>
 *     </div>
 *   </file>
 *   <file name="script.js">
 *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
 *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
 *         $scope.number = 0;
 *         $interval(function() {
 *           $scope.number++;
 *         }, 1000);
 *
 *         var colors = ['red','blue','green','yellow','orange'];
 *         $scope.colorClass = function(number) {
 *           return colors[number % colors.length];
 *         };
 *       }]);
 *   </file>
 *  <file name="animations.css">
 *  .container {
 *    height:250px;
 *    width:250px;
 *    position:relative;
 *    overflow:hidden;
 *    border:2px solid black;
 *  }
 *  .container .cell {
 *    font-size:150px;
 *    text-align:center;
 *    line-height:250px;
 *    position:absolute;
 *    top:0;
 *    left:0;
 *    right:0;
 *    border-bottom:2px solid black;
 *  }
 *  .swap-animation.ng-enter, .swap-animation.ng-leave {
 *    transition:0.5s linear all;
 *  }
 *  .swap-animation.ng-enter {
 *    top:-250px;
 *  }
 *  .swap-animation.ng-enter-active {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave-active {
 *    top:250px;
 *  }
 *  .red { background:red; }
 *  .green { background:green; }
 *  .blue { background:blue; }
 *  .yellow { background:yellow; }
 *  .orange { background:orange; }
 *  </file>
 * </example>
 */
var ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {
  return {
    restrict: 'A',
    transclude: 'element',
    terminal: true,
    priority: 600, // we use 600 here to ensure that the directive is caught before others
    link: function(scope, $element, attrs, ctrl, $transclude) {
      var previousElement, previousScope;
      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {
        if (previousElement) {
          $animate.leave(previousElement);
        }
        if (previousScope) {
          previousScope.$destroy();
          previousScope = null;
        }
        if (value || value === 0) {
          previousScope = scope.$new();
          $transclude(previousScope, function(element) {
            previousElement = element;
            $animate.enter(element, null, $element);
          });
        }
      });
    }
  };
}];

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
 * the HTML element that the animation will be triggered on.
 *
 * ## Directive Support
 * The following directives are "animation aware":
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * (More information can be found by visiting each the documentation associated with each directive.)
 *
 * ## CSS-based Animations
 *
 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
 * and CSS code we can create an animation that will be picked up by Angular when an underlying directive performs an operation.
 *
 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
 *
 * ```html
 * <div ng-if="bool" class="fade">
 *    Fade me in out
 * </div>
 * <button ng-click="bool=true">Fade In!</button>
 * <button ng-click="bool=false">Fade Out!</button>
 * ```
 *
 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
 *
 * ```css
 * /&#42; The starting CSS styles for the enter animation &#42;/
 * .fade.ng-enter {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 *
 * /&#42; The finishing CSS styles for the enter animation &#42;/
 * .fade.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * ```
 *
 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
 *
 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
 *
 * ```css
 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
 * .fade.ng-leave {
 *   transition:0.5s linear all;
 *   opacity:1;
 * }
 * .fade.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
 *
 * ```css
 * /&#42; there is no need to define anything inside of the destination
 * CSS class since the keyframe will take charge of the animation &#42;/
 * .fade.ng-leave {
 *   animation: my_fade_animation 0.5s linear;
 *   -webkit-animation: my_fade_animation 0.5s linear;
 * }
 *
 * @keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 *
 * @-webkit-keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 * ```
 *
 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
 *
 * ### CSS Class-based Animations
 *
 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
 * and removed.
 *
 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
 *
 * ```html
 * <div ng-show="bool" class="fade">
 *   Show and hide me
 * </div>
 * <button ng-click="bool=!bool">Toggle</button>
 *
 * <style>
 * .fade.ng-hide {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 * </style>
 * ```
 *
 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
 *
 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
 * with CSS styles.
 *
 * ```html
 * <div ng-class="{on:onOff}" class="highlight">
 *   Highlight this box
 * </div>
 * <button ng-click="onOff=!onOff">Toggle</button>
 *
 * <style>
 * .highlight {
 *   transition:0.5s linear all;
 * }
 * .highlight.on-add {
 *   background:white;
 * }
 * .highlight.on {
 *   background:yellow;
 * }
 * .highlight.on-remove {
 *   background:black;
 * }
 * </style>
 * ```
 *
 * We can also make use of CSS keyframes by placing them within the CSS classes.
 *
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   transition-delay: 0.1s;
 *
 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
 *     to not accidentally inherit a delay property from another CSS class &#42;/
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * window.requestAnimationFrame(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 *
 *   $scope.$digest();
 * });
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ### The `ng-animate` CSS class
 *
 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
 *
 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
 *
 * ```css
 * .zipper.ng-animate {
 *   transition:0.5s linear all;
 * }
 * .zipper.ng-enter {
 *   opacity:0;
 * }
 * .zipper.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * .zipper.ng-leave {
 *   opacity:1;
 * }
 * .zipper.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
 * the CSS class once an animation has completed.)
 *
 *
 * ### The `ng-[event]-prepare` class
 *
 * This is a special class that can be used to prevent unwanted flickering / flash of content before
 * the actual animation starts. The class is added as soon as an animation is initialized, but removed
 * before the actual animation starts (after waiting for a $digest).
 * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
 *
 * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
 * into elements that have class-based animations such as `ngClass`.
 *
 * ```html
 * <div ng-class="{red: myProp}">
 *   <div ng-class="{blue: myProp}">
 *     <div class="message" ng-if="myProp"></div>
 *   </div>
 * </div>
 * ```
 *
 * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
 * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
 *
 * ```css
 * .message.ng-enter-prepare {
 *   opacity: 0;
 * }
 *
 * ```
 *
 * ## JavaScript-based Animations
 *
 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
 * `module.animation()` module function we can register the animation.
 *
 * Let's see an example of a enter/leave animation using `ngRepeat`:
 *
 * ```html
 * <div ng-repeat="item in items" class="slide">
 *   {{ item }}
 * </div>
 * ```
 *
 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     // make note that other events (like addClass/removeClass)
 *     // have different function input parameters
 *     enter: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *
 *       // remember to call doneFn so that angular
 *       // knows that the animation has concluded
 *     },
 *
 *     move: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *     },
 *
 *     leave: function(element, doneFn) {
 *       jQuery(element).fadeOut(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
 * greensock.js and velocity.js.
 *
 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
 *
 * ```html
 * <div ng-class="color" class="colorful">
 *   this box is moody
 * </div>
 * <button ng-click="color='red'">Change to red</button>
 * <button ng-click="color='blue'">Change to blue</button>
 * <button ng-click="color='green'">Change to green</button>
 * ```
 *
 * ```js
 * myModule.animation('.colorful', [function() {
 *   return {
 *     addClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     removeClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     setClass: function(element, addedClass, removedClass, doneFn) {
 *       // do some cool animation and call the doneFn
 *     }
 *   }
 * }]);
 * ```
 *
 * ## CSS + JS Animations Together
 *
 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
 * charge of the animation**:
 *
 * ```html
 * <div ng-if="bool" class="slide">
 *   Slide in and out
 * </div>
 * ```
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     enter: function(element, doneFn) {
 *       jQuery(element).slideIn(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * ```css
 * .slide.ng-enter {
 *   transition:0.5s linear all;
 *   transform:translateY(-100px);
 * }
 * .slide.ng-enter.ng-enter-active {
 *   transform:translateY(0);
 * }
 * ```
 *
 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
 * our own JS-based animation code:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
 *
 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
 * data into `$animateCss` directly:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true,
 *         addClass: 'maroon-setting',
 *         from: { height:0 },
 *         to: { height: 200 }
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Now we can fill in the rest via our transition CSS code:
 *
 * ```css
 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
 * .slide.ng-enter { transition:0.5s linear all; }
 *
 * /&#42; this extra CSS class will be absorbed into the transition
 * since the $animateCss code is adding the class &#42;/
 * .maroon-setting { background:red; }
 * ```
 *
 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
 *
 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
 *
 * ## Animation Anchoring (via `ng-animate-ref`)
 *
 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
 * structural areas of an application (like views) by pairing up elements using an attribute
 * called `ng-animate-ref`.
 *
 * Let's say for example we have two views that are managed by `ng-view` and we want to show
 * that there is a relationship between two components situated in within these views. By using the
 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
 * can then attach an animation, which is triggered when the view changes.
 *
 * Say for example we have the following template code:
 *
 * ```html
 * <!-- index.html -->
 * <div ng-view class="view-animation">
 * </div>
 *
 * <!-- home.html -->
 * <a href="#/banner-page">
 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * </a>
 *
 * <!-- banner-page.html -->
 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * ```
 *
 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
 * HTML contents to see if there is a match reference between any components in the view
 * that is leaving and the view that is entering. It will scan both the view which is being
 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
 * contain a matching ref value.
 *
 * The two images match since they share the same ref value. ngAnimate will now create a
 * transport element (which is a clone of the first image element) and it will then attempt
 * to animate to the position of the second image element in the next view. For the animation to
 * work a special CSS class called `ng-anchor` will be added to the transported element.
 *
 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
 * ngAnimate will handle the entire transition for us as well as the addition and removal of
 * any changes of CSS classes between the elements:
 *
 * ```css
 * .banner.ng-anchor {
 *   /&#42; this animation will last for 1 second since there are
 *          two phases to the animation (an `in` and an `out` phase) &#42;/
 *   transition:0.5s linear all;
 * }
 * ```
 *
 * We also **must** include animations for the views that are being entered and removed
 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
 *
 * ```css
 * .view-animation.ng-enter, .view-animation.ng-leave {
 *   transition:0.5s linear all;
 *   position:fixed;
 *   left:0;
 *   top:0;
 *   width:100%;
 * }
 * .view-animation.ng-enter {
 *   transform:translateX(100%);
 * }
 * .view-animation.ng-leave,
 * .view-animation.ng-enter.ng-enter-active {
 *   transform:translateX(0%);
 * }
 * .view-animation.ng-leave.ng-leave-active {
 *   transform:translateX(-100%);
 * }
 * ```
 *
 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
 * from its origin. Once that animation is over then the `in` stage occurs which animates the
 * element to its destination. The reason why there are two animations is to give enough time
 * for the enter animation on the new element to be ready.
 *
 * The example above sets up a transition for both the in and out phases, but we can also target the out or
 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
 *
 * ```css
 * .banner.ng-anchor-out {
 *   transition: 0.5s linear all;
 *
 *   /&#42; the scale will be applied during the out animation,
 *          but will be animated away when the in animation runs &#42;/
 *   transform: scale(1.2);
 * }
 *
 * .banner.ng-anchor-in {
 *   transition: 1s linear all;
 * }
 * ```
 *
 *
 *
 *
 * ### Anchoring Demo
 *
  <example module="anchoringExample"
           name="anchoringExample"
           id="anchoringExample"
           deps="angular-animate.js;angular-route.js"
           animations="true">
    <file name="index.html">
      <a href="#!/">Home</a>
      <hr />
      <div class="view-container">
        <div ng-view class="view"></div>
      </div>
    </file>
    <file name="script.js">
      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            templateUrl: 'home.html',
            controller: 'HomeController as home'
          });
          $routeProvider.when('/profile/:id', {
            templateUrl: 'profile.html',
            controller: 'ProfileController as profile'
          });
        }])
        .run(['$rootScope', function($rootScope) {
          $rootScope.records = [
            { id: 1, title: 'Miss Beulah Roob' },
            { id: 2, title: 'Trent Morissette' },
            { id: 3, title: 'Miss Ava Pouros' },
            { id: 4, title: 'Rod Pouros' },
            { id: 5, title: 'Abdul Rice' },
            { id: 6, title: 'Laurie Rutherford Sr.' },
            { id: 7, title: 'Nakia McLaughlin' },
            { id: 8, title: 'Jordon Blanda DVM' },
            { id: 9, title: 'Rhoda Hand' },
            { id: 10, title: 'Alexandrea Sauer' }
          ];
        }])
        .controller('HomeController', [function() {
          //empty
        }])
        .controller('ProfileController', ['$rootScope', '$routeParams',
            function ProfileController($rootScope, $routeParams) {
          var index = parseInt($routeParams.id, 10);
          var record = $rootScope.records[index - 1];

          this.title = record.title;
          this.id = record.id;
        }]);
    </file>
    <file name="home.html">
      <h2>Welcome to the home page</h1>
      <p>Please click on an element</p>
      <a class="record"
         ng-href="#!/profile/{{ record.id }}"
         ng-animate-ref="{{ record.id }}"
         ng-repeat="record in records">
        {{ record.title }}
      </a>
    </file>
    <file name="profile.html">
      <div class="profile record" ng-animate-ref="{{ profile.id }}">
        {{ profile.title }}
      </div>
    </file>
    <file name="animations.css">
      .record {
        display:block;
        font-size:20px;
      }
      .profile {
        background:black;
        color:white;
        font-size:100px;
      }
      .view-container {
        position:relative;
      }
      .view-container > .view.ng-animate {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        min-height:500px;
      }
      .view.ng-enter, .view.ng-leave,
      .record.ng-anchor {
        transition:0.5s linear all;
      }
      .view.ng-enter {
        transform:translateX(100%);
      }
      .view.ng-enter.ng-enter-active, .view.ng-leave {
        transform:translateX(0%);
      }
      .view.ng-leave.ng-leave-active {
        transform:translateX(-100%);
      }
      .record.ng-anchor-out {
        background:red;
      }
    </file>
  </example>
 *
 * ### How is the element transported?
 *
 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
 * will become visible since the shim class will be removed.
 *
 * ### How is the morphing handled?
 *
 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
 * what CSS classes differ between the starting element and the destination element. These different CSS classes
 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
 * the cloned element is placed inside of root element which is likely close to the body element).
 *
 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
 *
 *
 * ## Using $animate in your directive code
 *
 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
 * imagine we have a greeting box that shows and hides itself when the data changes
 *
 * ```html
 * <greeting-box active="onOrOff">Hi there</greeting-box>
 * ```
 *
 * ```js
 * ngModule.directive('greetingBox', ['$animate', function($animate) {
 *   return function(scope, element, attrs) {
 *     attrs.$observe('active', function(value) {
 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
 *     });
 *   });
 * }]);
 * ```
 *
 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
 * in our HTML code then we can trigger a CSS or JS animation to happen.
 *
 * ```css
 * /&#42; normally we would create a CSS class to reference on the element &#42;/
 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
 * ```
 *
 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
 * possible be sure to visit the {@link ng.$animate $animate service API page}.
 *
 *
 * ## Callbacks and Promises
 *
 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
 * ended by chaining onto the returned promise that animation method returns.
 *
 * ```js
 * // somewhere within the depths of the directive
 * $animate.enter(element, parent).then(function() {
 *   //the animation has completed
 * });
 * ```
 *
 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
 * anymore.)
 *
 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
 * routing controller to hook into that:
 *
 * ```js
 * ngModule.controller('HomePageController', ['$animate', function($animate) {
 *   $animate.on('enter', ngViewElement, function(element) {
 *     // the animation for this route has completed
 *   }]);
 * }])
 * ```
 *
 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
 */

var copy;
var extend;
var forEach;
var isArray;
var isDefined;
var isElement;
var isFunction;
var isObject;
var isString;
var isUndefined;
var jqLite;
var noop;

/**
 * @ngdoc service
 * @name $animate
 * @kind object
 *
 * @description
 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
 *
 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
 */
angular.module('ngAnimate', [], function initAngularHelpers() {
  // Access helpers from angular core.
  // Do it inside a `config` block to ensure `window.angular` is available.
  noop        = angular.noop;
  copy        = angular.copy;
  extend      = angular.extend;
  jqLite      = angular.element;
  forEach     = angular.forEach;
  isArray     = angular.isArray;
  isString    = angular.isString;
  isObject    = angular.isObject;
  isUndefined = angular.isUndefined;
  isDefined   = angular.isDefined;
  isFunction  = angular.isFunction;
  isElement   = angular.isElement;
})
  .directive('ngAnimateSwap', ngAnimateSwapDirective)

  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

  .provider('$$animateQueue', $$AnimateQueueProvider)
  .provider('$$animation', $$AnimationProvider)

  .provider('$animateCss', $AnimateCssProvider)
  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

  .provider('$$animateJs', $$AnimateJsProvider)
  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);

},{}],2:[function(require,module,exports){
require('./angular-animate');
module.exports = 'ngAnimate';

},{"./angular-animate":1}],3:[function(require,module,exports){
(function() {


// Create all modules and define dependencies to make sure they exist
// and are loaded in the correct order to satisfy dependency injection
// before all nested files are concatenated by Grunt

// Modules
angular.module('angular-jwt',
    [
        'angular-jwt.options',
        'angular-jwt.interceptor',
        'angular-jwt.jwt',
        'angular-jwt.authManager'
    ]);

angular.module('angular-jwt.authManager', [])
  .provider('authManager', function () {

    this.$get = ["$rootScope", "$injector", "$location", "jwtHelper", "jwtInterceptor", "jwtOptions", function ($rootScope, $injector, $location, jwtHelper, jwtInterceptor, jwtOptions) {

      var config = jwtOptions.getConfig();

      function invokeToken(tokenGetter) {
        var token = null;
        if (Array.isArray(tokenGetter)) {
          token = $injector.invoke(tokenGetter, this, {options: null});
        } else {
          token = tokenGetter();
        }
        return token;
      }

      function invokeRedirector(redirector) {
        if (Array.isArray(redirector) || angular.isFunction(redirector)) {
          return $injector.invoke(redirector, config, {});
        } else {
          throw new Error('unauthenticatedRedirector must be a function');
        }
      }

      function isAuthenticated() {
        var token = invokeToken(config.tokenGetter);
        if (token) {
          return !jwtHelper.isTokenExpired(token);
        }
      }

      $rootScope.isAuthenticated = false;

      function authenticate() {
        $rootScope.isAuthenticated = true;
      }

      function unauthenticate() {
        $rootScope.isAuthenticated = false;
      }

      function checkAuthOnRefresh() {
        $rootScope.$on('$locationChangeStart', function () {
          var token = invokeToken(config.tokenGetter);
          if (token) {
            if (!jwtHelper.isTokenExpired(token)) {
              authenticate();
            } else {
              $rootScope.$broadcast('tokenHasExpired', token);
            }
          }
        });
      }

      function redirectWhenUnauthenticated() {
        $rootScope.$on('unauthenticated', function () {
          invokeRedirector(config.unauthenticatedRedirector);
          unauthenticate();
        });
      }

      function verifyRoute(event, next) {
        if (!next) {
          return false;
        }

        var routeData = (next.$$route) ? next.$$route : next.data;

        if (routeData && routeData.requiresLogin === true) {
          var token = invokeToken(config.tokenGetter);
          if (!token || jwtHelper.isTokenExpired(token)) {
            event.preventDefault();
            invokeRedirector(config.unauthenticatedRedirector);
          }
        }
      }

      var eventName = ($injector.has('$state')) ? '$stateChangeStart' : '$routeChangeStart';
      $rootScope.$on(eventName, verifyRoute);

      return {
        authenticate: authenticate,
        unauthenticate: unauthenticate,
        getToken: function(){ return invokeToken(config.tokenGetter); },
        redirect: function() { return invokeRedirector(config.unauthenticatedRedirector); },
        checkAuthOnRefresh: checkAuthOnRefresh,
        redirectWhenUnauthenticated: redirectWhenUnauthenticated,
        isAuthenticated: isAuthenticated
      }
    }]
  });

angular.module('angular-jwt.interceptor', [])
  .provider('jwtInterceptor', function() {

    this.urlParam;
    this.authHeader;
    this.authPrefix;
    this.whiteListedDomains;
    this.tokenGetter;

    var config = this;

    this.$get = ["$q", "$injector", "$rootScope", "urlUtils", "jwtOptions", function($q, $injector, $rootScope, urlUtils, jwtOptions) {

      var options = angular.extend({}, jwtOptions.getConfig(), config);

      function isSafe (url) {
        if (!urlUtils.isSameOrigin(url) && !options.whiteListedDomains.length) {
          throw new Error('As of v0.1.0, requests to domains other than the application\'s origin must be white listed. Use jwtOptionsProvider.config({ whiteListedDomains: [<domain>] }); to whitelist.')
        }
        var hostname = urlUtils.urlResolve(url).hostname.toLowerCase();
        for (var i = 0; i < options.whiteListedDomains.length; i++) {
          var domain = options.whiteListedDomains[i].toLowerCase();
          if (domain === hostname) {
            return true;
          }
        }

        if (urlUtils.isSameOrigin(url)) {
          return true;
        }

        return false;
      }

      return {
        request: function (request) {
          if (request.skipAuthorization || !isSafe(request.url)) {
            return request;
          }

          if (options.urlParam) {
            request.params = request.params || {};
            // Already has the token in the url itself
            if (request.params[options.urlParam]) {
              return request;
            }
          } else {
            request.headers = request.headers || {};
            // Already has an Authorization header
            if (request.headers[options.authHeader]) {
              return request;
            }
          }

          var tokenPromise = $q.when($injector.invoke(options.tokenGetter, this, {
            options: request
          }));

          return tokenPromise.then(function(token) {
            if (token) {
              if (options.urlParam) {
                request.params[options.urlParam] = token;
              } else {
                request.headers[options.authHeader] = options.authPrefix + token;
              }
            }
            return request;
          });
        },
        responseError: function (response) {
          // handle the case where the user is not authenticated
          if (response.status === 401) {
            $rootScope.$broadcast('unauthenticated', response);
          }
          return $q.reject(response);
        }
      };
    }]
  });
 angular.module('angular-jwt.jwt', [])
  .service('jwtHelper', ["$window", function($window) {

    this.urlBase64Decode = function(str) {
      var output = str.replace(/-/g, '+').replace(/_/g, '/');
      switch (output.length % 4) {
        case 0: { break; }
        case 2: { output += '=='; break; }
        case 3: { output += '='; break; }
        default: {
          throw 'Illegal base64url string!';
        }
      }
      return $window.decodeURIComponent(escape($window.atob(output))); //polyfill https://github.com/davidchambers/Base64.js
    };


    this.decodeToken = function(token) {
      var parts = token.split('.');

      if (parts.length !== 3) {
        throw new Error('JWT must have 3 parts');
      }

      var decoded = this.urlBase64Decode(parts[1]);
      if (!decoded) {
        throw new Error('Cannot decode the token');
      }

      return angular.fromJson(decoded);
    };

    this.getTokenExpirationDate = function(token) {
      var decoded = this.decodeToken(token);

      if(typeof decoded.exp === "undefined") {
        return null;
      }

      var d = new Date(0); // The 0 here is the key, which sets the date to the epoch
      d.setUTCSeconds(decoded.exp);

      return d;
    };

    this.isTokenExpired = function(token, offsetSeconds) {
      var d = this.getTokenExpirationDate(token);
      offsetSeconds = offsetSeconds || 0;
      if (d === null) {
        return false;
      }

      // Token expired?
      return !(d.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    };
  }]);

angular.module('angular-jwt.options', [])
  .provider('jwtOptions', function() {
    var globalConfig = {};
    this.config = function(value) {
      globalConfig = value;
    };
    this.$get = function() {

      var options = {
        urlParam: null,
        authHeader: 'Authorization',
        authPrefix: 'Bearer ',
        whiteListedDomains: [],
        tokenGetter: function() {
          return null;
        },
        loginPath: '/',
        unauthenticatedRedirectPath: '/',
        unauthenticatedRedirector: ['$location', function($location) {
          $location.path(this.unauthenticatedRedirectPath);
        }]
      };

      function JwtOptions() {
        var config = this.config = angular.extend({}, options, globalConfig);
      }

      JwtOptions.prototype.getConfig = function() {
        return this.config;
      };

      return new JwtOptions();
    }
  });

 /**
  * The content from this file was directly lifted from Angular. It is
  * unfortunately not a public API, so the best we can do is copy it.
  *
  * Angular References:
  *   https://github.com/angular/angular.js/issues/3299
  *   https://github.com/angular/angular.js/blob/d077966ff1ac18262f4615ff1a533db24d4432a7/src/ng/urlUtils.js
  */

 angular.module('angular-jwt.interceptor')
  .service('urlUtils', function () {

    // NOTE:  The usage of window and document instead of $window and $document here is
    // deliberate.  This service depends on the specific behavior of anchor nodes created by the
    // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
    // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
    // doesn't know about mocked locations and resolves URLs to the real document - which is
    // exactly the behavior needed here.  There is little value is mocking these out for this
    // service.
    var urlParsingNode = document.createElement("a");
    var originUrl = urlResolve(window.location.href);

    /**
     *
     * Implementation Notes for non-IE browsers
     * ----------------------------------------
     * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
     * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
     * URL will be resolved into an absolute URL in the context of the application document.
     * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
     * properties are all populated to reflect the normalized URL.  This approach has wide
     * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
     * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *
     * Implementation Notes for IE
     * ---------------------------
     * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
     * browsers.  However, the parsed components will not be set if the URL assigned did not specify
     * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
     * work around that by performing the parsing in a 2nd step by taking a previously normalized
     * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
     * properties such as protocol, hostname, port, etc.
     *
     * References:
     *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
     *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *   http://url.spec.whatwg.org/#urlutils
     *   https://github.com/angular/angular.js/pull/2902
     *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
     *
     * @kind function
     * @param {string} url The URL to be parsed.
     * @description Normalizes and parses a URL.
     * @returns {object} Returns the normalized URL as a dictionary.
     *
     *   | member name   | Description    |
     *   |---------------|----------------|
     *   | href          | A normalized version of the provided URL if it was not an absolute URL |
     *   | protocol      | The protocol including the trailing colon                              |
     *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
     *   | search        | The search params, minus the question mark                             |
     *   | hash          | The hash string, minus the hash symbol
     *   | hostname      | The hostname
     *   | port          | The port, without ":"
     *   | pathname      | The pathname, beginning with "/"
     *
     */
    function urlResolve(url) {
      var href = url;

      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/')
          ? urlParsingNode.pathname
          : '/' + urlParsingNode.pathname
      };
    }

    /**
     * Parse a request URL and determine whether this is a same-origin request as the application document.
     *
     * @param {string|object} requestUrl The url of the request as a string that will be resolved
     * or a parsed URL object.
     * @returns {boolean} Whether the request is for the same origin as the application document.
     */
    function urlIsSameOrigin(requestUrl) {
      var parsed = (angular.isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
      return (parsed.protocol === originUrl.protocol &&
              parsed.host === originUrl.host);
    }

    return {
      urlResolve: urlResolve,
      isSameOrigin: urlIsSameOrigin
    };

  });

}());
},{}],4:[function(require,module,exports){
require('./dist/angular-jwt.js');
module.exports = 'angular-jwt';


},{"./dist/angular-jwt.js":3}],5:[function(require,module,exports){
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 2.2.0 - 2016-10-10
 * License: MIT
 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.collapse', [])

  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
    return {
      link: function(scope, element, attrs) {
        var expandingExpr = $parse(attrs.expanding),
          expandedExpr = $parse(attrs.expanded),
          collapsingExpr = $parse(attrs.collapsing),
          collapsedExpr = $parse(attrs.collapsed),
          horizontal = false,
          css = {},
          cssTo = {};

        init();

        function init() {
          horizontal = !!('horizontal' in attrs);
          if (horizontal) {
            css = {
              width: ''
            };
            cssTo = {width: '0'};
          } else {
            css = {
              height: ''
            };
            cssTo = {height: '0'};
          }
          if (!scope.$eval(attrs.uibCollapse)) {
            element.addClass('in')
              .addClass('collapse')
              .attr('aria-expanded', true)
              .attr('aria-hidden', false)
              .css(css);
          }
        }

        function getScrollFromElement(element) {
          if (horizontal) {
            return {width: element.scrollWidth + 'px'};
          }
          return {height: element.scrollHeight + 'px'};
        }

        function expand() {
          if (element.hasClass('collapse') && element.hasClass('in')) {
            return;
          }

          $q.resolve(expandingExpr(scope))
            .then(function() {
              element.removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', true)
                .attr('aria-hidden', false);

              if ($animateCss) {
                $animateCss(element, {
                  addClass: 'in',
                  easing: 'ease',
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).start()['finally'](expandDone);
              } else {
                $animate.addClass(element, 'in', {
                  css: {
                    overflow: 'hidden'
                  },
                  to: getScrollFromElement(element[0])
                }).then(expandDone);
              }
            });
        }

        function expandDone() {
          element.removeClass('collapsing')
            .addClass('collapse')
            .css(css);
          expandedExpr(scope);
        }

        function collapse() {
          if (!element.hasClass('collapse') && !element.hasClass('in')) {
            return collapseDone();
          }

          $q.resolve(collapsingExpr(scope))
            .then(function() {
              element
              // IMPORTANT: The width must be set before adding "collapsing" class.
              // Otherwise, the browser attempts to animate from width 0 (in
              // collapsing class) to the given width here.
                .css(getScrollFromElement(element[0]))
                // initially all panel collapse have the collapse class, this removal
                // prevents the animation from jumping to collapsed state
                .removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', false)
                .attr('aria-hidden', true);

              if ($animateCss) {
                $animateCss(element, {
                  removeClass: 'in',
                  to: cssTo
                }).start()['finally'](collapseDone);
              } else {
                $animate.removeClass(element, 'in', {
                  to: cssTo
                }).then(collapseDone);
              }
            });
        }

        function collapseDone() {
          element.css(cssTo); // Required so that collapse works when animation is disabled
          element.removeClass('collapsing')
            .addClass('collapse');
          collapsedExpr(scope);
        }

        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.tabindex', [])

.directive('uibTabindexToggle', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      attrs.$observe('disabled', function(disabled) {
        attrs.$set('tabindex', disabled ? -1 : null);
      });
    }
  };
});

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse', 'ui.bootstrap.tabindex'])

.constant('uibAccordionConfig', {
  closeOthers: true
})

.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ?
      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if (closeOthers) {
      angular.forEach(this.groups, function(group) {
        if (group !== openGroup) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function(event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if (index !== -1) {
      this.groups.splice(index, 1);
    }
  };
}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('uibAccordion', function() {
  return {
    controller: 'UibAccordionController',
    controllerAs: 'accordion',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
    }
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('uibAccordionGroup', function() {
  return {
    require: '^uibAccordion',         // We need this directive to be inside an accordion
    transclude: true,              // It transcludes the contents of the directive into the template
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
    },
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      panelClass: '@?',           // Ditto with panelClass
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      element.addClass('panel');
      accordionCtrl.addGroup(scope);

      scope.openClass = attrs.openClass || 'panel-open';
      scope.panelClass = attrs.panelClass || 'panel-default';
      scope.$watch('isOpen', function(value) {
        element.toggleClass(scope.openClass, !!value);
        if (value) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function($event) {
        if (!scope.isDisabled) {
          if (!$event || $event.which === 32) {
            scope.isOpen = !scope.isOpen;
          }
        }
      };

      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      scope.headingId = id + '-tab';
      scope.panelId = id + '-panel';
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
.directive('uibAccordionHeading', function() {
  return {
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
.directive('uibAccordionTransclude', function() {
  return {
    require: '^uibAccordionGroup',
    link: function(scope, element, attrs, controller) {
      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
        if (heading) {
          var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
          elem.html('');
          elem.append(heading);
        }
      });
    }
  };

  function getHeaderSelectors() {
      return 'uib-accordion-header,' +
          'data-uib-accordion-header,' +
          'x-uib-accordion-header,' +
          'uib\\:accordion-header,' +
          '[uib-accordion-header],' +
          '[data-uib-accordion-header],' +
          '[x-uib-accordion-header]';
  }
});

angular.module('ui.bootstrap.alert', [])

.controller('UibAlertController', ['$scope', '$element', '$attrs', '$interpolate', '$timeout', function($scope, $element, $attrs, $interpolate, $timeout) {
  $scope.closeable = !!$attrs.close;
  $element.addClass('alert');
  $attrs.$set('role', 'alert');
  if ($scope.closeable) {
    $element.addClass('alert-dismissible');
  }

  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

  if (dismissOnTimeout) {
    $timeout(function() {
      $scope.close();
    }, parseInt(dismissOnTimeout, 10));
  }
}])

.directive('uibAlert', function() {
  return {
    controller: 'UibAlertController',
    controllerAs: 'alert',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/alert/alert.html';
    },
    transclude: true,
    scope: {
      close: '&'
    }
  };
});

angular.module('ui.bootstrap.buttons', [])

.constant('uibButtonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('uibBtnRadio', ['$parse', function($parse) {
  return {
    require: ['uibBtnRadio', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'buttons',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      var uncheckableExpr = $parse(attrs.uibUncheckable);

      element.find('input').css({display: 'none'});

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function() {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
            ngModelCtrl.$render();
          });
        }
      });

      if (attrs.uibUncheckable) {
        scope.$watch(uncheckableExpr, function(uncheckable) {
          attrs.$set('uncheckable', uncheckable ? '' : undefined);
        });
      }
    }
  };
}])

.directive('uibBtnCheckbox', function() {
  return {
    require: ['uibBtnCheckbox', 'ngModel'],
    controller: 'UibButtonsController',
    controllerAs: 'button',
    link: function(scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      element.find('input').css({display: 'none'});

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attribute, defaultValue) {
        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function() {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.on(buttonsCtrl.toggleEvent, function() {
        if (attrs.disabled) {
          return;
        }

        scope.$apply(function() {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

angular.module('ui.bootstrap.carousel', [])

.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    SLIDE_DIRECTION = 'uib-slideDirection',
    currentIndex = $scope.active,
    currentInterval, isPlaying, bufferedTransitions = [];

  var destroyed = false;
  $element.addClass('carousel');

  self.addSlide = function(slide, element) {
    slides.push({
      slide: slide,
      element: element
    });
    slides.sort(function(a, b) {
      return +a.slide.index - +b.slide.index;
    });
    //if this is the first slide or the slide is set to active, select it
    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition = null;
      }

      currentIndex = slide.index;
      $scope.active = slide.index;
      setActive(currentIndex);
      self.select(slides[findSlideIndex(slide)]);
      if (slides.length === 1) {
        $scope.play();
      }
    }
  };

  self.getCurrentIndex = function() {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide.index === currentIndex) {
        return i;
      }
    }
  };

  self.next = $scope.next = function() {
    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

    if (newIndex === 0 && $scope.noWrap()) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'next');
  };

  self.prev = $scope.prev = function() {
    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

    if ($scope.noWrap() && newIndex === slides.length - 1) {
      $scope.pause();
      return;
    }

    return self.select(slides[newIndex], 'prev');
  };

  self.removeSlide = function(slide) {
    var index = findSlideIndex(slide);

    var bufferedIndex = bufferedTransitions.indexOf(slides[index]);
    if (bufferedIndex !== -1) {
      bufferedTransitions.splice(bufferedIndex, 1);
    }

    //get the index of the slide inside the carousel
    slides.splice(index, 1);
    if (slides.length > 0 && currentIndex === index) {
      if (index >= slides.length) {
        currentIndex = slides.length - 1;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[slides.length - 1]);
      } else {
        currentIndex = index;
        $scope.active = currentIndex;
        setActive(currentIndex);
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
      $scope.active = currentIndex;
    }

    //clean the active value when no more slide
    if (slides.length === 0) {
      currentIndex = null;
      $scope.active = null;
      clearBufferedTransitions();
    }
  };

  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = findSlideIndex(nextSlide.slide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
    }
    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (nextSlide.slide.index !== currentIndex &&
      !$scope.$currentTransition) {
      goNext(nextSlide.slide, nextIndex, direction);
    } else if (nextSlide && nextSlide.slide.index !== currentIndex && $scope.$currentTransition) {
      bufferedTransitions.push(slides[nextIndex]);
    }
  };

  /* Allow outside people to call indexOf on slides array */
  $scope.indexOfSlide = function(slide) {
    return +slide.slide.index;
  };

  $scope.isActive = function(slide) {
    return $scope.active === slide.slide.index;
  };

  $scope.isPrevDisabled = function() {
    return $scope.active === 0 && $scope.noWrap();
  };

  $scope.isNextDisabled = function() {
    return $scope.active === slides.length - 1 && $scope.noWrap();
  };

  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };

  $element.on('mouseenter', $scope.pause);
  $element.on('mouseleave', $scope.play);

  $scope.$on('$destroy', function() {
    destroyed = true;
    resetTimer();
  });

  $scope.$watch('noTransition', function(noTransition) {
    $animate.enabled($element, !noTransition);
  });

  $scope.$watch('interval', restartTimer);

  $scope.$watchCollection('slides', resetTransition);

  $scope.$watch('active', function(index) {
    if (angular.isNumber(index) && currentIndex !== index) {
      for (var i = 0; i < slides.length; i++) {
        if (slides[i].slide.index === index) {
          index = i;
          break;
        }
      }

      var slide = slides[index];
      if (slide) {
        setActive(index);
        self.select(slides[index]);
        currentIndex = index;
      }
    }
  });

  function clearBufferedTransitions() {
    while (bufferedTransitions.length) {
      bufferedTransitions.shift();
    }
  }

  function getSlideByIndex(index) {
    for (var i = 0, l = slides.length; i < l; ++i) {
      if (slides[i].index === index) {
        return slides[i];
      }
    }
  }

  function setActive(index) {
    for (var i = 0; i < slides.length; i++) {
      slides[i].slide.active = i === index;
    }
  }

  function goNext(slide, index, direction) {
    if (destroyed) {
      return;
    }

    angular.extend(slide, {direction: direction});
    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
    if ($animate.enabled($element) && !$scope.$currentTransition &&
      slides[index].element && self.slides.length > 1) {
      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
      var currentIdx = self.getCurrentIndex();

      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
      }

      $scope.$currentTransition = true;
      $animate.on('addClass', slides[index].element, function(element, phase) {
        if (phase === 'close') {
          $scope.$currentTransition = null;
          $animate.off('addClass', element);
          if (bufferedTransitions.length) {
            var nextSlide = bufferedTransitions.pop().slide;
            var nextIndex = nextSlide.index;
            var nextDirection = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
            clearBufferedTransitions();

            goNext(nextSlide, nextIndex, nextDirection);
          }
        }
      });
    }

    $scope.active = slide.index;
    currentIndex = slide.index;
    setActive(index);

    //every time you change slides, reset the timer
    restartTimer();
  }

  function findSlideIndex(slide) {
    for (var i = 0; i < slides.length; i++) {
      if (slides[i].slide === slide) {
        return i;
      }
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function resetTransition(slides) {
    if (!slides.length) {
      $scope.$currentTransition = null;
      clearBufferedTransitions();
    }
  }

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }
}])

.directive('uibCarousel', function() {
  return {
    transclude: true,
    controller: 'UibCarouselController',
    controllerAs: 'carousel',
    restrict: 'A',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
    },
    scope: {
      active: '=',
      interval: '=',
      noTransition: '=',
      noPause: '=',
      noWrap: '&'
    }
  };
})

.directive('uibSlide', ['$animate', function($animate) {
  return {
    require: '^uibCarousel',
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/carousel/slide.html';
    },
    scope: {
      actual: '=?',
      index: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      element.addClass('item');
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        $animate[active ? 'addClass' : 'removeClass'](element, 'active');
      });
    }
  };
}])

.animation('.item', ['$animateCss',
function($animateCss) {
  var SLIDE_DIRECTION = 'uib-slideDirection';

  function removeClass(element, className, callback) {
    element.removeClass(className);
    if (callback) {
      callback();
    }
  }

  return {
    beforeAddClass: function(element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element,
          directionClass + ' ' + direction, done);
        element.addClass(direction);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    },
    beforeRemoveClass: function (element, className, done) {
      if (className === 'active') {
        var stopped = false;
        var direction = element.data(SLIDE_DIRECTION);
        var directionClass = direction === 'next' ? 'left' : 'right';
        var removeClassFn = removeClass.bind(this, element, directionClass, done);

        $animateCss(element, {addClass: directionClass})
          .start()
          .done(removeClassFn);

        return function() {
          stopped = true;
        };
      }
      done();
    }
  };
}]);

angular.module('ui.bootstrap.dateparser', [])

.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', function($log, $locale, dateFilter, orderByFilter) {
  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

  var localeId;
  var formatCodeToRegex;

  this.init = function() {
    localeId = $locale.id;

    this.parsers = {};
    this.formatters = {};

    formatCodeToRegex = [
      {
        key: 'yyyy',
        regex: '\\d{4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yyyy');
        }
      },
      {
        key: 'yy',
        regex: '\\d{2}',
        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'yy');
        }
      },
      {
        key: 'y',
        regex: '\\d{1,4}',
        apply: function(value) { this.year = +value; },
        formatter: function(date) {
          var _date = new Date();
          _date.setFullYear(Math.abs(date.getFullYear()));
          return dateFilter(_date, 'y');
        }
      },
      {
        key: 'M!',
        regex: '0?[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) {
          var value = date.getMonth();
          if (/^[0-9]$/.test(value)) {
            return dateFilter(date, 'MM');
          }

          return dateFilter(date, 'M');
        }
      },
      {
        key: 'MMMM',
        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMMM'); }
      },
      {
        key: 'MMM',
        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
        formatter: function(date) { return dateFilter(date, 'MMM'); }
      },
      {
        key: 'MM',
        regex: '0[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'MM'); }
      },
      {
        key: 'M',
        regex: '[1-9]|1[0-2]',
        apply: function(value) { this.month = value - 1; },
        formatter: function(date) { return dateFilter(date, 'M'); }
      },
      {
        key: 'd!',
        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) {
          var value = date.getDate();
          if (/^[1-9]$/.test(value)) {
            return dateFilter(date, 'dd');
          }

          return dateFilter(date, 'd');
        }
      },
      {
        key: 'dd',
        regex: '[0-2][0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'dd'); }
      },
      {
        key: 'd',
        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
        apply: function(value) { this.date = +value; },
        formatter: function(date) { return dateFilter(date, 'd'); }
      },
      {
        key: 'EEEE',
        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEEE'); }
      },
      {
        key: 'EEE',
        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
        formatter: function(date) { return dateFilter(date, 'EEE'); }
      },
      {
        key: 'HH',
        regex: '(?:0|1)[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'HH'); }
      },
      {
        key: 'hh',
        regex: '0[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'hh'); }
      },
      {
        key: 'H',
        regex: '1?[0-9]|2[0-3]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'H'); }
      },
      {
        key: 'h',
        regex: '[0-9]|1[0-2]',
        apply: function(value) { this.hours = +value; },
        formatter: function(date) { return dateFilter(date, 'h'); }
      },
      {
        key: 'mm',
        regex: '[0-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'mm'); }
      },
      {
        key: 'm',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.minutes = +value; },
        formatter: function(date) { return dateFilter(date, 'm'); }
      },
      {
        key: 'sss',
        regex: '[0-9][0-9][0-9]',
        apply: function(value) { this.milliseconds = +value; },
        formatter: function(date) { return dateFilter(date, 'sss'); }
      },
      {
        key: 'ss',
        regex: '[0-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 'ss'); }
      },
      {
        key: 's',
        regex: '[0-9]|[1-5][0-9]',
        apply: function(value) { this.seconds = +value; },
        formatter: function(date) { return dateFilter(date, 's'); }
      },
      {
        key: 'a',
        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
        apply: function(value) {
          if (this.hours === 12) {
            this.hours = 0;
          }

          if (value === 'PM') {
            this.hours += 12;
          }
        },
        formatter: function(date) { return dateFilter(date, 'a'); }
      },
      {
        key: 'Z',
        regex: '[+-]\\d{4}',
        apply: function(value) {
          var matches = value.match(/([+-])(\d{2})(\d{2})/),
            sign = matches[1],
            hours = matches[2],
            minutes = matches[3];
          this.hours += toInt(sign + hours);
          this.minutes += toInt(sign + minutes);
        },
        formatter: function(date) {
          return dateFilter(date, 'Z');
        }
      },
      {
        key: 'ww',
        regex: '[0-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'ww'); }
      },
      {
        key: 'w',
        regex: '[0-9]|[1-4][0-9]|5[0-3]',
        formatter: function(date) { return dateFilter(date, 'w'); }
      },
      {
        key: 'GGGG',
        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
        formatter: function(date) { return dateFilter(date, 'GGGG'); }
      },
      {
        key: 'GGG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GGG'); }
      },
      {
        key: 'GG',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'GG'); }
      },
      {
        key: 'G',
        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
        formatter: function(date) { return dateFilter(date, 'G'); }
      }
    ];
  };

  this.init();

  function createParser(format) {
    var map = [], regex = format.split('');

    // check for literal values
    var quoteIndex = format.indexOf('\'');
    if (quoteIndex > -1) {
      var inLiteral = false;
      format = format.split('');
      for (var i = quoteIndex; i < format.length; i++) {
        if (inLiteral) {
          if (format[i] === '\'') {
            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
              format[i+1] = '$';
              regex[i+1] = '';
            } else { // end of literal
              regex[i] = '';
              inLiteral = false;
            }
          }
          format[i] = '$';
        } else {
          if (format[i] === '\'') { // start of literal
            format[i] = '$';
            regex[i] = '';
            inLiteral = true;
          }
        }
      }

      format = format.join('');
    }

    angular.forEach(formatCodeToRegex, function(data) {
      var index = format.indexOf(data.key);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({
          index: index,
          key: data.key,
          apply: data.apply,
          matcher: data.regex
        });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  function createFormatter(format) {
    var formatters = [];
    var i = 0;
    var formatter, literalIdx;
    while (i < format.length) {
      if (angular.isNumber(literalIdx)) {
        if (format.charAt(i) === '\'') {
          if (i + 1 >= format.length || format.charAt(i + 1) !== '\'') {
            formatters.push(constructLiteralFormatter(format, literalIdx, i));
            literalIdx = null;
          }
        } else if (i === format.length) {
          while (literalIdx < format.length) {
            formatter = constructFormatterFromIdx(format, literalIdx);
            formatters.push(formatter);
            literalIdx = formatter.endIdx;
          }
        }

        i++;
        continue;
      }

      if (format.charAt(i) === '\'') {
        literalIdx = i;
        i++;
        continue;
      }

      formatter = constructFormatterFromIdx(format, i);

      formatters.push(formatter.parser);
      i = formatter.endIdx;
    }

    return formatters;
  }

  function constructLiteralFormatter(format, literalIdx, endIdx) {
    return function() {
      return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
    };
  }

  function constructFormatterFromIdx(format, i) {
    var currentPosStr = format.substr(i);
    for (var j = 0; j < formatCodeToRegex.length; j++) {
      if (new RegExp('^' + formatCodeToRegex[j].key).test(currentPosStr)) {
        var data = formatCodeToRegex[j];
        return {
          endIdx: i + data.key.length,
          parser: data.formatter
        };
      }
    }

    return {
      endIdx: i + 1,
      parser: function() {
        return currentPosStr.charAt(0);
      }
    };
  }

  this.filter = function(date, format) {
    if (!angular.isDate(date) || isNaN(date) || !format) {
      return '';
    }

    format = $locale.DATETIME_FORMATS[format] || format;

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.formatters[format]) {
      this.formatters[format] = createFormatter(format);
    }

    var formatters = this.formatters[format];

    return formatters.reduce(function(str, formatter) {
      return str + formatter(date);
    }, '');
  };

  this.parse = function(input, format, baseDate) {
    if (!angular.isString(input) || !format) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;
    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

    if ($locale.id !== localeId) {
      this.init();
    }

    if (!this.parsers[format]) {
      this.parsers[format] = createParser(format, 'apply');
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex),
        tzOffset = false;
    if (results && results.length) {
      var fields, dt;
      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
        fields = {
          year: baseDate.getFullYear(),
          month: baseDate.getMonth(),
          date: baseDate.getDate(),
          hours: baseDate.getHours(),
          minutes: baseDate.getMinutes(),
          seconds: baseDate.getSeconds(),
          milliseconds: baseDate.getMilliseconds()
        };
      } else {
        if (baseDate) {
          $log.warn('dateparser:', 'baseDate is not a valid date');
        }
        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
      }

      for (var i = 1, n = results.length; i < n; i++) {
        var mapper = map[i - 1];
        if (mapper.matcher === 'Z') {
          tzOffset = true;
        }

        if (mapper.apply) {
          mapper.apply.call(fields, results[i]);
        }
      }

      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
        Date.prototype.setFullYear;
      var timesetter = tzOffset ? Date.prototype.setUTCHours :
        Date.prototype.setHours;

      if (isValid(fields.year, fields.month, fields.date)) {
        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
          dt = new Date(baseDate);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours, fields.minutes,
            fields.seconds, fields.milliseconds);
        } else {
          dt = new Date(0);
          datesetter.call(dt, fields.year, fields.month, fields.date);
          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
            fields.seconds || 0, fields.milliseconds || 0);
        }
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if (date < 1) {
      return false;
    }

    if (month === 1 && date > 28) {
      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
    }

    if (month === 3 || month === 5 || month === 8 || month === 10) {
      return date < 31;
    }

    return true;
  }

  function toInt(str) {
    return parseInt(str, 10);
  }

  this.toTimezone = toTimezone;
  this.fromTimezone = fromTimezone;
  this.timezoneToOffset = timezoneToOffset;
  this.addDateMinutes = addDateMinutes;
  this.convertTimezoneToLocal = convertTimezoneToLocal;

  function toTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
  }

  function fromTimezone(date, timezone) {
    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
  }

  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
  function timezoneToOffset(timezone, fallback) {
    timezone = timezone.replace(/:/g, '');
    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
  }

  function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
  }

  function convertTimezoneToLocal(date, timezone, reverse) {
    reverse = reverse ? -1 : 1;
    var dateTimezoneOffset = date.getTimezoneOffset();
    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
  }
}]);

// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
// at most one element.
angular.module('ui.bootstrap.isClass', [])
.directive('uibIsClass', [
         '$animate',
function ($animate) {
  //                    11111111          22222222
  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
  //                    11111111           22222222
  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

  var dataPerTracked = {};

  return {
    restrict: 'A',
    compile: function(tElement, tAttrs) {
      var linkedScopes = [];
      var instances = [];
      var expToData = {};
      var lastActivated = null;
      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
      var onExp = onExpMatches[2];
      var expsStr = onExpMatches[1];
      var exps = expsStr.split(',');

      return linkFn;

      function linkFn(scope, element, attrs) {
        linkedScopes.push(scope);
        instances.push({
          scope: scope,
          element: element
        });

        exps.forEach(function(exp, k) {
          addForExp(exp, scope);
        });

        scope.$on('$destroy', removeScope);
      }

      function addForExp(exp, scope) {
        var matches = exp.match(IS_REGEXP);
        var clazz = scope.$eval(matches[1]);
        var compareWithExp = matches[2];
        var data = expToData[exp];
        if (!data) {
          var watchFn = function(compareWithVal) {
            var newActivated = null;
            instances.some(function(instance) {
              var thisVal = instance.scope.$eval(onExp);
              if (thisVal === compareWithVal) {
                newActivated = instance;
                return true;
              }
            });
            if (data.lastActivated !== newActivated) {
              if (data.lastActivated) {
                $animate.removeClass(data.lastActivated.element, clazz);
              }
              if (newActivated) {
                $animate.addClass(newActivated.element, clazz);
              }
              data.lastActivated = newActivated;
            }
          };
          expToData[exp] = data = {
            lastActivated: null,
            scope: scope,
            watchFn: watchFn,
            compareWithExp: compareWithExp,
            watcher: scope.$watch(compareWithExp, watchFn)
          };
        }
        data.watchFn(scope.$eval(compareWithExp));
      }

      function removeScope(e) {
        var removedScope = e.targetScope;
        var index = linkedScopes.indexOf(removedScope);
        linkedScopes.splice(index, 1);
        instances.splice(index, 1);
        if (linkedScopes.length) {
          var newWatchScope = linkedScopes[0];
          angular.forEach(expToData, function(data) {
            if (data.scope === removedScope) {
              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
              data.scope = newWatchScope;
            }
          });
        } else {
          expToData = {};
        }
      }
    }
  };
}]);
angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

.value('$datepickerSuppressError', false)

.value('$datepickerLiteralWarning', true)

.constant('uibDatepickerConfig', {
  datepickerMode: 'day',
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  maxDate: null,
  maxMode: 'year',
  minDate: null,
  minMode: 'day',
  monthColumns: 3,
  ngModelOptions: {},
  shortcutPropagation: false,
  showWeeks: true,
  yearColumns: 5,
  yearRows: 4
})

.controller('UibDatepickerController', ['$scope', '$element', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
  function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
      ngModelOptions = {},
      watchListeners = [];

  $element.addClass('uib-datepicker');
  $attrs.$set('role', 'application');

  if (!$scope.datepickerOptions) {
    $scope.datepickerOptions = {};
  }

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  [
    'customClass',
    'dateDisabled',
    'datepickerMode',
    'formatDay',
    'formatDayHeader',
    'formatDayTitle',
    'formatMonth',
    'formatMonthTitle',
    'formatYear',
    'maxDate',
    'maxMode',
    'minDate',
    'minMode',
    'monthColumns',
    'showWeeks',
    'shortcutPropagation',
    'startingDay',
    'yearColumns',
    'yearRows'
  ].forEach(function(key) {
    switch (key) {
      case 'customClass':
      case 'dateDisabled':
        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
        break;
      case 'datepickerMode':
        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
        break;
      case 'formatDay':
      case 'formatDayHeader':
      case 'formatDayTitle':
      case 'formatMonth':
      case 'formatMonthTitle':
      case 'formatYear':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
          datepickerConfig[key];
        break;
      case 'monthColumns':
      case 'showWeeks':
      case 'shortcutPropagation':
      case 'yearColumns':
      case 'yearRows':
        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
          $scope.datepickerOptions[key] : datepickerConfig[key];
        break;
      case 'startingDay':
        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
          self.startingDay = $scope.datepickerOptions.startingDay;
        } else if (angular.isNumber(datepickerConfig.startingDay)) {
          self.startingDay = datepickerConfig.startingDay;
        } else {
          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
        }

        break;
      case 'maxDate':
      case 'minDate':
        $scope.$watch('datepickerOptions.' + key, function(value) {
          if (value) {
            if (angular.isDate(value)) {
              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.timezone);
            } else {
              if ($datepickerLiteralWarning) {
                $log.warn('Literal date support has been deprecated, please switch to date object usage');
              }

              self[key] = new Date(dateFilter(value, 'medium'));
            }
          } else {
            self[key] = datepickerConfig[key] ?
              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.timezone) :
              null;
          }

          self.refreshView();
        });

        break;
      case 'maxMode':
      case 'minMode':
        if ($scope.datepickerOptions[key]) {
          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
            self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
              $scope.datepickerMode = self[key];
              $scope.datepickerOptions.datepickerMode = self[key];
            }
          });
        } else {
          self[key] = $scope[key] = datepickerConfig[key] || null;
        }

        break;
    }
  });

  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if (angular.isDefined($attrs.ngDisabled)) {
    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
      $scope.disabled = disabled;
      self.refreshView();
    }));
  }

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelOptions = ngModelCtrl_.$options ||
      $scope.datepickerOptions.ngModelOptions ||
      datepickerConfig.ngModelOptions;
    if ($scope.datepickerOptions.initDate) {
      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.timezone) || new Date();
      $scope.$watch('datepickerOptions.initDate', function(initDate) {
        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.timezone);
          self.refreshView();
        }
      });
    } else {
      self.activeDate = new Date();
    }

    var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
    this.activeDate = !isNaN(date) ?
      dateParser.fromTimezone(date, ngModelOptions.timezone) :
      dateParser.fromTimezone(new Date(), ngModelOptions.timezone);

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if (ngModelCtrl.$viewValue) {
      var date = new Date(ngModelCtrl.$viewValue),
          isValid = !isNaN(date);

      if (isValid) {
        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.timezone);
      } else if (!$datepickerSuppressError) {
        $log.error('Datepicker directive: "ng-model" value must be a Date object');
      }
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if (this.element) {
      $scope.selectedDt = null;
      this._refreshView();
      if ($scope.activeDt) {
        $scope.activeDateId = $scope.activeDt.uid;
      }

      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
      date = dateParser.fromTimezone(date, ngModelOptions.timezone);
      ngModelCtrl.$setValidity('dateDisabled', !date ||
        this.element && !this.isDisabled(date));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
    model = dateParser.fromTimezone(model, ngModelOptions.timezone);
    var today = new Date();
    today = dateParser.fromTimezone(today, ngModelOptions.timezone);
    var time = this.compare(date, today);
    var dt = {
      date: date,
      label: dateParser.filter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      past: time < 0,
      current: time === 0,
      future: time > 0,
      customClass: this.customClass(date) || null
    };

    if (model && this.compare(date, model) === 0) {
      $scope.selectedDt = dt;
    }

    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
      $scope.activeDt = dt;
    }

    return dt;
  };

  this.isDisabled = function(date) {
    return $scope.disabled ||
      this.minDate && this.compare(date, this.minDate) < 0 ||
      this.maxDate && this.compare(date, this.maxDate) > 0 ||
      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
  };

  this.customClass = function(date) {
    return $scope.customClass({date: date, mode: $scope.datepickerMode});
  };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function(date) {
    if ($scope.datepickerMode === self.minMode) {
      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.timezone) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      dt = dateParser.toTimezone(dt, ngModelOptions.timezone);
      ngModelCtrl.$setViewValue(dt);
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

      $scope.$emit('uib:datepicker.mode');
    }

    $scope.$broadcast('uib:datepicker.focus');
  };

  $scope.move = function(direction) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function(direction) {
    direction = direction || 1;

    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
      $scope.datepickerMode === self.minMode && direction === -1) {
      return;
    }

    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

    $scope.$emit('uib:datepicker.mode');
  };

  // Key event mapper
  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

  var focusElement = function() {
    self.element[0].focus();
  };

  // Listen for focus requests from popup directive
  $scope.$on('uib:datepicker.focus', focusElement);

  $scope.keydown = function(evt) {
    var key = $scope.keys[evt.which];

    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
      return;
    }

    evt.preventDefault();
    if (!self.shortcutPropagation) {
      evt.stopPropagation();
    }

    if (key === 'enter' || key === 'space') {
      if (self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };

  $element.on('keydown', function(evt) {
    $scope.$apply(function() {
      $scope.keydown(evt);
    });
  });

  $scope.$on('$destroy', function() {
    //Clear all watch listeners on destroy
    while (watchListeners.length) {
      watchListeners.shift()();
    }
  });

  function setMode(mode) {
    $scope.datepickerMode = mode;
    $scope.datepickerOptions.datepickerMode = mode;
  }
}])

.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

  this.step = { months: 1 };
  this.element = $element;
  function getDaysInMonth(year, month) {
    return month === 1 && year % 4 === 0 &&
      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
  }

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    scope.showWeeks = ctrl.showWeeks;
    ctrl.refreshView();
  };

  this.getDates = function(startDate, n) {
    var dates = new Array(n), current = new Date(startDate), i = 0, date;
    while (i < n) {
      date = new Date(current);
      dates[i++] = date;
      current.setDate(current.getDate() + 1);
    }
    return dates;
  };

  this._refreshView = function() {
    var year = this.activeDate.getFullYear(),
      month = this.activeDate.getMonth(),
      firstDayOfMonth = new Date(this.activeDate);

    firstDayOfMonth.setFullYear(year, month, 1);

    var difference = this.startingDay - firstDayOfMonth.getDay(),
      numDisplayedFromPreviousMonth = difference > 0 ?
        7 - difference : - difference,
      firstDate = new Date(firstDayOfMonth);

    if (numDisplayedFromPreviousMonth > 0) {
      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
    }

    // 42 is the number of days on a six-week calendar
    var days = this.getDates(firstDate, 42);
    for (var i = 0; i < 42; i ++) {
      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
        secondary: days[i].getMonth() !== month,
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.labels = new Array(7);
    for (var j = 0; j < 7; j++) {
      scope.labels[j] = {
        abbr: dateFilter(days[j].date, this.formatDayHeader),
        full: dateFilter(days[j].date, 'EEEE')
      };
    }

    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
    scope.rows = this.split(days, 7);

    if (scope.showWeeks) {
      scope.weekNumbers = [];
      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
          numWeeks = scope.rows.length;
      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
        scope.weekNumbers.push(
          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
      }
    }
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  function getISO8601WeekNumber(date) {
    var checkDate = new Date(date);
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
    var time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
  }

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getDate();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - 7;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + 7;
    } else if (key === 'pageup' || key === 'pagedown') {
      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setMonth(month, 1);
      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
    } else if (key === 'home') {
      date = 1;
    } else if (key === 'end') {
      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
    }
    this.activeDate.setDate(date);
  };
}])

.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  this.step = { years: 1 };
  this.element = $element;

  this.init = function(ctrl) {
    angular.extend(ctrl, this);
    ctrl.refreshView();
  };

  this._refreshView = function() {
    var months = new Array(12),
        year = this.activeDate.getFullYear(),
        date;

    for (var i = 0; i < 12; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(year, i, 1);
      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
    scope.rows = this.split(months, this.monthColumns);
    scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
  };

  this.compare = function(date1, date2) {
    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
    _date1.setFullYear(date1.getFullYear());
    _date2.setFullYear(date2.getFullYear());
    return _date1 - _date2;
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getMonth();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - this.monthColumns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + this.monthColumns;
    } else if (key === 'pageup' || key === 'pagedown') {
      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
      this.activeDate.setFullYear(year);
    } else if (key === 'home') {
      date = 0;
    } else if (key === 'end') {
      date = 11;
    }
    this.activeDate.setMonth(date);
  };
}])

.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
  var columns, range;
  this.element = $element;

  function getStartingYear(year) {
    return parseInt((year - 1) / range, 10) * range + 1;
  }

  this.yearpickerInit = function() {
    columns = this.yearColumns;
    range = this.yearRows * columns;
    this.step = { years: range };
  };

  this._refreshView = function() {
    var years = new Array(range), date;

    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
      date = new Date(this.activeDate);
      date.setFullYear(start + i, 0, 1);
      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
        uid: scope.uniqueId + '-' + i
      });
    }

    scope.title = [years[0].label, years[range - 1].label].join(' - ');
    scope.rows = this.split(years, columns);
    scope.columns = columns;
  };

  this.compare = function(date1, date2) {
    return date1.getFullYear() - date2.getFullYear();
  };

  this.handleKeyDown = function(key, evt) {
    var date = this.activeDate.getFullYear();

    if (key === 'left') {
      date = date - 1;
    } else if (key === 'up') {
      date = date - columns;
    } else if (key === 'right') {
      date = date + 1;
    } else if (key === 'down') {
      date = date + columns;
    } else if (key === 'pageup' || key === 'pagedown') {
      date += (key === 'pageup' ? - 1 : 1) * range;
    } else if (key === 'home') {
      date = getStartingYear(this.activeDate.getFullYear());
    } else if (key === 'end') {
      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
    }
    this.activeDate.setFullYear(date);
  };
}])

.directive('uibDatepicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
    },
    scope: {
      datepickerOptions: '=?'
    },
    require: ['uibDatepicker', '^ngModel'],
    restrict: 'A',
    controller: 'UibDatepickerController',
    controllerAs: 'datepicker',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      datepickerCtrl.init(ngModelCtrl);
    }
  };
})

.directive('uibDaypicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/day.html';
    },
    require: ['^uibDatepicker', 'uibDaypicker'],
    restrict: 'A',
    controller: 'UibDaypickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        daypickerCtrl = ctrls[1];

      daypickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibMonthpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/month.html';
    },
    require: ['^uibDatepicker', 'uibMonthpicker'],
    restrict: 'A',
    controller: 'UibMonthpickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0],
        monthpickerCtrl = ctrls[1];

      monthpickerCtrl.init(datepickerCtrl);
    }
  };
})

.directive('uibYearpicker', function() {
  return {
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepicker/year.html';
    },
    require: ['^uibDatepicker', 'uibYearpicker'],
    restrict: 'A',
    controller: 'UibYearpickerController',
    link: function(scope, element, attrs, ctrls) {
      var ctrl = ctrls[0];
      angular.extend(ctrl, ctrls[1]);
      ctrl.yearpickerInit();

      ctrl.refreshView();
    }
  };
});

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods for working with the DOM.
 * It is meant to be used where we need to absolute-position elements in
 * relation to another element (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
    /**
     * Used by scrollbarWidth() function to cache scrollbar's width.
     * Do not access this variable directly, use scrollbarWidth() instead.
     */
    var SCROLLBAR_WIDTH;
    /**
     * scrollbar on body and html element in IE and Edge overlay
     * content and should be considered 0 width.
     */
    var BODY_SCROLLBAR_WIDTH;
    var OVERFLOW_REGEX = {
      normal: /(auto|scroll)/,
      hidden: /(auto|scroll|hidden)/
    };
    var PLACEMENT_REGEX = {
      auto: /\s?auto?\s?/i,
      primary: /^(top|bottom|left|right)$/,
      secondary: /^(top|bottom|left|right|center)$/,
      vertical: /^(top|bottom)$/
    };
    var BODY_REGEX = /(HTML|BODY)/;

    return {

      /**
       * Provides a raw DOM element from a jQuery/jQLite element.
       *
       * @param {element} elem - The element to convert.
       *
       * @returns {element} A HTML element.
       */
      getRawNode: function(elem) {
        return elem.nodeName ? elem : elem[0] || elem;
      },

      /**
       * Provides a parsed number for a style property.  Strips
       * units and casts invalid numbers to 0.
       *
       * @param {string} value - The style value to parse.
       *
       * @returns {number} A valid number.
       */
      parseStyle: function(value) {
        value = parseFloat(value);
        return isFinite(value) ? value : 0;
      },

      /**
       * Provides the closest positioned ancestor.
       *
       * @param {element} element - The element to get the offest parent for.
       *
       * @returns {element} The closest positioned ancestor.
       */
      offsetParent: function(elem) {
        elem = this.getRawNode(elem);

        var offsetParent = elem.offsetParent || $document[0].documentElement;

        function isStaticPositioned(el) {
          return ($window.getComputedStyle(el).position || 'static') === 'static';
        }

        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || $document[0].documentElement;
      },

      /**
       * Provides the scrollbar width, concept from TWBS measureScrollbar()
       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
       * In IE and Edge, scollbar on body and html element overlay and should
       * return a width of 0.
       *
       * @returns {number} The width of the browser scollbar.
       */
      scrollbarWidth: function(isBody) {
        if (isBody) {
          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
            var bodyElem = $document.find('body');
            bodyElem.addClass('uib-position-body-scrollbar-measure');
            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
            bodyElem.removeClass('uib-position-body-scrollbar-measure');
          }
          return BODY_SCROLLBAR_WIDTH;
        }

        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
          $document.find('body').append(scrollElem);
          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
          scrollElem.remove();
        }

        return SCROLLBAR_WIDTH;
      },

      /**
       * Provides the padding required on an element to replace the scrollbar.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
       *     <li>**widthOverflow**: whether the the width is overflowing</li>
       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
       *     <li>**heightOverflow**: whether the the height is overflowing</li>
       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
       *   </ul>
       */
      scrollbarPadding: function(elem) {
        elem = this.getRawNode(elem);

        var elemStyle = $window.getComputedStyle(elem);
        var paddingRight = this.parseStyle(elemStyle.paddingRight);
        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
        var scrollParent = this.scrollParent(elem, false, true);
        var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));

        return {
          scrollbarWidth: scrollbarWidth,
          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
          right: paddingRight + scrollbarWidth,
          originalRight: paddingRight,
          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
          bottom: paddingBottom + scrollbarWidth,
          originalBottom: paddingBottom
         };
      },

      /**
       * Checks to see if the element is scrollable.
       *
       * @param {element} elem - The element to check.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       *
       * @returns {boolean} Whether the element is scrollable.
       */
      isScrollable: function(elem, includeHidden) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var elemStyle = $window.getComputedStyle(elem);
        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
      },

      /**
       * Provides the closest scrollable ancestor.
       * A port of the jQuery UI scrollParent method:
       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
       *
       * @param {element} elem - The element to find the scroll parent of.
       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
       *   default is false.
       * @param {boolean=} [includeSelf=false] - Should the element being passed be
       * included in the scrollable llokup.
       *
       * @returns {element} A HTML element.
       */
      scrollParent: function(elem, includeHidden, includeSelf) {
        elem = this.getRawNode(elem);

        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
        var documentEl = $document[0].documentElement;
        var elemStyle = $window.getComputedStyle(elem);
        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
          return elem;
        }
        var excludeStatic = elemStyle.position === 'absolute';
        var scrollParent = elem.parentElement || documentEl;

        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
          return documentEl;
        }

        while (scrollParent.parentElement && scrollParent !== documentEl) {
          var spStyle = $window.getComputedStyle(scrollParent);
          if (excludeStatic && spStyle.position !== 'static') {
            excludeStatic = false;
          }

          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
            break;
          }
          scrollParent = scrollParent.parentElement;
        }

        return scrollParent;
      },

      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/ - distance to closest positioned
       * ancestor.  Does not account for margins by default like jQuery position.
       *
       * @param {element} elem - The element to caclulate the position on.
       * @param {boolean=} [includeMargins=false] - Should margins be accounted
       * for, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of offset parent</li>
       *     <li>**left**: distance to left edge of offset parent</li>
       *   </ul>
       */
      position: function(elem, includeMagins) {
        elem = this.getRawNode(elem);

        var elemOffset = this.offset(elem);
        if (includeMagins) {
          var elemStyle = $window.getComputedStyle(elem);
          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
        }
        var parent = this.offsetParent(elem);
        var parentOffset = {top: 0, left: 0};

        if (parent !== $document[0].documentElement) {
          parentOffset = this.offset(parent);
          parentOffset.top += parent.clientTop - parent.scrollTop;
          parentOffset.left += parent.clientLeft - parent.scrollLeft;
        }

        return {
          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
          top: Math.round(elemOffset.top - parentOffset.top),
          left: Math.round(elemOffset.left - parentOffset.left)
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/ - distance to viewport.  Does
       * not account for borders, margins, or padding on the body
       * element.
       *
       * @param {element} elem - The element to calculate the offset on.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**width**: the width of the element</li>
       *     <li>**height**: the height of the element</li>
       *     <li>**top**: distance to top edge of viewport</li>
       *     <li>**right**: distance to bottom edge of viewport</li>
       *   </ul>
       */
      offset: function(elem) {
        elem = this.getRawNode(elem);

        var elemBCR = elem.getBoundingClientRect();
        return {
          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
        };
      },

      /**
       * Provides offset distance to the closest scrollable ancestor
       * or viewport.  Accounts for border and scrollbar width.
       *
       * Right and bottom dimensions represent the distance to the
       * respective edge of the viewport element.  If the element
       * edge extends beyond the viewport, a negative value will be
       * reported.
       *
       * @param {element} elem - The element to get the viewport offset for.
       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
       * of the first scrollable element, default is false.
       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
       * be accounted for, default is true.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: distance to the top content edge of viewport element</li>
       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
       *     <li>**left**: distance to the left content edge of viewport element</li>
       *     <li>**right**: distance to the right content edge of viewport element</li>
       *   </ul>
       */
      viewportOffset: function(elem, useDocument, includePadding) {
        elem = this.getRawNode(elem);
        includePadding = includePadding !== false ? true : false;

        var elemBCR = elem.getBoundingClientRect();
        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
        var offsetParentBCR = offsetParent.getBoundingClientRect();

        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
        if (offsetParent === $document[0].documentElement) {
          offsetBCR.top += $window.pageYOffset;
          offsetBCR.left += $window.pageXOffset;
        }
        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

        if (includePadding) {
          var offsetParentStyle = $window.getComputedStyle(offsetParent);
          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
        }

        return {
          top: Math.round(elemBCR.top - offsetBCR.top),
          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
          left: Math.round(elemBCR.left - offsetBCR.left),
          right: Math.round(offsetBCR.right - elemBCR.right)
        };
      },

      /**
       * Provides an array of placement values parsed from a placement string.
       * Along with the 'auto' indicator, supported placement strings are:
       *   <ul>
       *     <li>top: element on top, horizontally centered on host element.</li>
       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
       *     <li>left: element on left, vertically centered on host element.</li>
       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
       *     <li>right: element on right, vertically centered on host element.</li>
       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
       *   </ul>
       * A placement string with an 'auto' indicator is expected to be
       * space separated from the placement, i.e: 'auto bottom-left'  If
       * the primary and secondary placement values do not match 'top,
       * bottom, left, right' then 'top' will be the primary placement and
       * 'center' will be the secondary placement.  If 'auto' is passed, true
       * will be returned as the 3rd value of the array.
       *
       * @param {string} placement - The placement string to parse.
       *
       * @returns {array} An array with the following values
       * <ul>
       *   <li>**[0]**: The primary placement.</li>
       *   <li>**[1]**: The secondary placement.</li>
       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
       * </ul>
       */
      parsePlacement: function(placement) {
        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
        if (autoPlace) {
          placement = placement.replace(PLACEMENT_REGEX.auto, '');
        }

        placement = placement.split('-');

        placement[0] = placement[0] || 'top';
        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
          placement[0] = 'top';
        }

        placement[1] = placement[1] || 'center';
        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
          placement[1] = 'center';
        }

        if (autoPlace) {
          placement[2] = true;
        } else {
          placement[2] = false;
        }

        return placement;
      },

      /**
       * Provides coordinates for an element to be positioned relative to
       * another element.  Passing 'auto' as part of the placement parameter
       * will enable smart placement - where the element fits. i.e:
       * 'auto left-top' will check to see if there is enough space to the left
       * of the hostElem to fit the targetElem, if not place right (same for secondary
       * top placement).  Available space is calculated using the viewportOffset
       * function.
       *
       * @param {element} hostElem - The element to position against.
       * @param {element} targetElem - The element to position.
       * @param {string=} [placement=top] - The placement for the targetElem,
       *   default is 'top'. 'center' is assumed as secondary placement for
       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
       *   <ul>
       *     <li>top</li>
       *     <li>top-right</li>
       *     <li>top-left</li>
       *     <li>bottom</li>
       *     <li>bottom-left</li>
       *     <li>bottom-right</li>
       *     <li>left</li>
       *     <li>left-top</li>
       *     <li>left-bottom</li>
       *     <li>right</li>
       *     <li>right-top</li>
       *     <li>right-bottom</li>
       *   </ul>
       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
       *   be calculated from the body element, default is false.
       *
       * @returns {object} An object with the following properties:
       *   <ul>
       *     <li>**top**: Value for targetElem top.</li>
       *     <li>**left**: Value for targetElem left.</li>
       *     <li>**placement**: The resolved placement.</li>
       *   </ul>
       */
      positionElements: function(hostElem, targetElem, placement, appendToBody) {
        hostElem = this.getRawNode(hostElem);
        targetElem = this.getRawNode(targetElem);

        // need to read from prop to support tests.
        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

        placement = this.parsePlacement(placement);

        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
        var targetElemPos = {top: 0, left: 0, placement: ''};

        if (placement[2]) {
          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

          var targetElemStyle = $window.getComputedStyle(targetElem);
          var adjustedSize = {
            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
          };

          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
                         placement[0];

          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
                         placement[1];

          if (placement[1] === 'center') {
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
                placement[1] = 'left';
              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
                placement[1] = 'right';
              }
            } else {
              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
                placement[1] = 'top';
              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
                placement[1] = 'bottom';
              }
            }
          }
        }

        switch (placement[0]) {
          case 'top':
            targetElemPos.top = hostElemPos.top - targetHeight;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left - targetWidth;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width;
            break;
        }

        switch (placement[1]) {
          case 'top':
            targetElemPos.top = hostElemPos.top;
            break;
          case 'bottom':
            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
            break;
          case 'left':
            targetElemPos.left = hostElemPos.left;
            break;
          case 'right':
            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
            break;
          case 'center':
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
            } else {
              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
            }
            break;
        }

        targetElemPos.top = Math.round(targetElemPos.top);
        targetElemPos.left = Math.round(targetElemPos.left);
        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

        return targetElemPos;
      },

      /**
       * Provides a way to adjust the top positioning after first
       * render to correctly align element to top after content
       * rendering causes resized element height
       *
       * @param {array} placementClasses - The array of strings of classes
       * element should have.
       * @param {object} containerPosition - The object with container
       * position information
       * @param {number} initialHeight - The initial height for the elem.
       * @param {number} currentHeight - The current height for the elem.
       */
      adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
        if (placementClasses.indexOf('top') !== -1 && initialHeight !== currentHeight) {
          return {
            top: containerPosition.top - currentHeight + 'px'
          };
        }
      },

      /**
       * Provides a way for positioning tooltip & dropdown
       * arrows when using placement options beyond the standard
       * left, right, top, or bottom.
       *
       * @param {element} elem - The tooltip/dropdown element.
       * @param {string} placement - The placement for the elem.
       */
      positionArrow: function(elem, placement) {
        elem = this.getRawNode(elem);

        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
        if (!innerElem) {
          return;
        }

        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
        if (!arrowElem) {
          return;
        }

        var arrowCss = {
          top: '',
          bottom: '',
          left: '',
          right: ''
        };

        placement = this.parsePlacement(placement);
        if (placement[1] === 'center') {
          // no adjustment necessary - just reset styles
          angular.element(arrowElem).css(arrowCss);
          return;
        }

        var borderProp = 'border-' + placement[0] + '-width';
        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

        var borderRadiusProp = 'border-';
        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
          borderRadiusProp += placement[0] + '-' + placement[1];
        } else {
          borderRadiusProp += placement[1] + '-' + placement[0];
        }
        borderRadiusProp += '-radius';
        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

        switch (placement[0]) {
          case 'top':
            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'bottom':
            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'left':
            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
            break;
          case 'right':
            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
            break;
        }

        arrowCss[placement[1]] = borderRadius;

        angular.element(arrowElem).css(arrowCss);
      }
    };
  }]);

angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

.value('$datepickerPopupLiteralWarning', true)

.constant('uibDatepickerPopupConfig', {
  altInputFormats: [],
  appendToBody: false,
  clearText: 'Clear',
  closeOnDateSelection: true,
  closeText: 'Done',
  currentText: 'Today',
  datepickerPopup: 'yyyy-MM-dd',
  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
  html5Types: {
    date: 'yyyy-MM-dd',
    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
    'month': 'yyyy-MM'
  },
  onOpenFocus: true,
  showButtonBar: true,
  placement: 'auto bottom-left'
})

.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
  var cache = {},
    isHtml5DateInput = false;
  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];

  this.init = function(_ngModel_) {
    ngModel = _ngModel_;
    ngModelOptions = angular.isObject(_ngModel_.$options) ?
      _ngModel_.$options :
      {
        timezone: null
      };
    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
      $scope.$parent.$eval($attrs.closeOnDateSelection) :
      datepickerPopupConfig.closeOnDateSelection;
    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
      datepickerPopupConfig.appendToBody;
    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
      $attrs.datepickerPopupTemplateUrl :
      datepickerPopupConfig.datepickerPopupTemplateUrl;
    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
      $scope.$parent.$eval($attrs.altInputFormats) :
      datepickerPopupConfig.altInputFormats;

    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
      $scope.$parent.$eval($attrs.showButtonBar) :
      datepickerPopupConfig.showButtonBar;

    if (datepickerPopupConfig.html5Types[$attrs.type]) {
      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
      isHtml5DateInput = true;
    } else {
      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
        // Invalidate the $modelValue to ensure that formatters re-run
        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
        if (newDateFormat !== dateFormat) {
          dateFormat = newDateFormat;
          ngModel.$modelValue = null;

          if (!dateFormat) {
            throw new Error('uibDatepickerPopup must have a date format specified.');
          }
        }
      });
    }

    if (!dateFormat) {
      throw new Error('uibDatepickerPopup must have a date format specified.');
    }

    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
      throw new Error('HTML5 date input types do not support custom formats.');
    }

    // popup element used to display calendar
    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');

    popupEl.attr({
      'ng-model': 'date',
      'ng-change': 'dateSelection(date)',
      'template-url': datepickerPopupTemplateUrl
    });

    // datepicker element
    datepickerEl = angular.element(popupEl.children()[0]);
    datepickerEl.attr('template-url', datepickerTemplateUrl);

    if (!$scope.datepickerOptions) {
      $scope.datepickerOptions = {};
    }

    if (isHtml5DateInput) {
      if ($attrs.type === 'month') {
        $scope.datepickerOptions.datepickerMode = 'month';
        $scope.datepickerOptions.minMode = 'month';
      }
    }

    datepickerEl.attr('datepicker-options', 'datepickerOptions');

    if (!isHtml5DateInput) {
      // Internal API to maintain the correct ng-invalid-[key] class
      ngModel.$$parserName = 'date';
      ngModel.$validators.date = validator;
      ngModel.$parsers.unshift(parseDate);
      ngModel.$formatters.push(function(value) {
        if (ngModel.$isEmpty(value)) {
          $scope.date = value;
          return value;
        }

        if (angular.isNumber(value)) {
          value = new Date(value);
        }

        $scope.date = dateParser.fromTimezone(value, ngModelOptions.timezone);

        return dateParser.filter($scope.date, dateFormat);
      });
    } else {
      ngModel.$formatters.push(function(value) {
        $scope.date = dateParser.fromTimezone(value, ngModelOptions.timezone);
        return value;
      });
    }

    // Detect changes in the view from the text box
    ngModel.$viewChangeListeners.push(function() {
      $scope.date = parseDateString(ngModel.$viewValue);
    });

    $element.on('keydown', inputKeydownBind);

    $popup = $compile(popupEl)($scope);
    // Prevent jQuery cache memory leak (template is now redundant after linking)
    popupEl.remove();

    if (appendToBody) {
      $document.find('body').append($popup);
    } else {
      $element.after($popup);
    }

    $scope.$on('$destroy', function() {
      if ($scope.isOpen === true) {
        if (!$rootScope.$$phase) {
          $scope.$apply(function() {
            $scope.isOpen = false;
          });
        }
      }

      $popup.remove();
      $element.off('keydown', inputKeydownBind);
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);

      //Clear all watch listeners on destroy
      while (watchListeners.length) {
        watchListeners.shift()();
      }
    });
  };

  $scope.getText = function(key) {
    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
  };

  $scope.isDisabled = function(date) {
    if (date === 'today') {
      date = dateParser.fromTimezone(new Date(), ngModelOptions.timezone);
    }

    var dates = {};
    angular.forEach(['minDate', 'maxDate'], function(key) {
      if (!$scope.datepickerOptions[key]) {
        dates[key] = null;
      } else if (angular.isDate($scope.datepickerOptions[key])) {
        dates[key] = new Date($scope.datepickerOptions[key]);
      } else {
        if ($datepickerPopupLiteralWarning) {
          $log.warn('Literal date support has been deprecated, please switch to date object usage');
        }

        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
      }
    });

    return $scope.datepickerOptions &&
      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
  };

  $scope.compare = function(date1, date2) {
    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
  };

  // Inner change
  $scope.dateSelection = function(dt) {
    $scope.date = dt;
    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
    $element.val(date);
    ngModel.$setViewValue(date);

    if (closeOnDateSelection) {
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.keydown = function(evt) {
    if (evt.which === 27) {
      evt.stopPropagation();
      $scope.isOpen = false;
      $element[0].focus();
    }
  };

  $scope.select = function(date, evt) {
    evt.stopPropagation();

    if (date === 'today') {
      var today = new Date();
      if (angular.isDate($scope.date)) {
        date = new Date($scope.date);
        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
      } else {
        date = dateParser.fromTimezone(today, ngModelOptions.timezone);
        date.setHours(0, 0, 0, 0);
      }
    }
    $scope.dateSelection(date);
  };

  $scope.close = function(evt) {
    evt.stopPropagation();

    $scope.isOpen = false;
    $element[0].focus();
  };

  $scope.disabled = angular.isDefined($attrs.disabled) || false;
  if ($attrs.ngDisabled) {
    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
      $scope.disabled = disabled;
    }));
  }

  $scope.$watch('isOpen', function(value) {
    if (value) {
      if (!$scope.disabled) {
        $timeout(function() {
          positionPopup();

          if (onOpenFocus) {
            $scope.$broadcast('uib:datepicker.focus');
          }

          $document.on('click', documentClickBind);

          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
          if (appendToBody || $position.parsePlacement(placement)[2]) {
            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
            if (scrollParentEl) {
              scrollParentEl.on('scroll', positionPopup);
            }
          } else {
            scrollParentEl = null;
          }

          angular.element($window).on('resize', positionPopup);
        }, 0, false);
      } else {
        $scope.isOpen = false;
      }
    } else {
      $document.off('click', documentClickBind);
      if (scrollParentEl) {
        scrollParentEl.off('scroll', positionPopup);
      }
      angular.element($window).off('resize', positionPopup);
    }
  });

  function cameltoDash(string) {
    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
  }

  function parseDateString(viewValue) {
    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
    if (isNaN(date)) {
      for (var i = 0; i < altInputFormats.length; i++) {
        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
        if (!isNaN(date)) {
          return date;
        }
      }
    }
    return date;
  }

  function parseDate(viewValue) {
    if (angular.isNumber(viewValue)) {
      // presumably timestamp to date object
      viewValue = new Date(viewValue);
    }

    if (!viewValue) {
      return null;
    }

    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
      return viewValue;
    }

    if (angular.isString(viewValue)) {
      var date = parseDateString(viewValue);
      if (!isNaN(date)) {
        return dateParser.fromTimezone(date, ngModelOptions.timezone);
      }
    }

    return ngModel.$options && ngModel.$options.allowInvalid ? viewValue : undefined;
  }

  function validator(modelValue, viewValue) {
    var value = modelValue || viewValue;

    if (!$attrs.ngRequired && !value) {
      return true;
    }

    if (angular.isNumber(value)) {
      value = new Date(value);
    }

    if (!value) {
      return true;
    }

    if (angular.isDate(value) && !isNaN(value)) {
      return true;
    }

    if (angular.isString(value)) {
      return !isNaN(parseDateString(value));
    }

    return false;
  }

  function documentClickBind(event) {
    if (!$scope.isOpen && $scope.disabled) {
      return;
    }

    var popup = $popup[0];
    var dpContainsTarget = $element[0].contains(event.target);
    // The popup node may not be an element node
    // In some browsers (IE) only element nodes have the 'contains' function
    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
    }
  }

  function inputKeydownBind(evt) {
    if (evt.which === 27 && $scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = false;
      });
      $element[0].focus();
    } else if (evt.which === 40 && !$scope.isOpen) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.$apply(function() {
        $scope.isOpen = true;
      });
    }
  }

  function positionPopup() {
    if ($scope.isOpen) {
      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
      var position = $position.positionElements($element, dpElement, placement, appendToBody);
      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
      if (dpElement.hasClass('uib-position-measure')) {
        dpElement.removeClass('uib-position-measure');
      }
    }
  }

  $scope.$on('uib:datepicker.mode', function() {
    $timeout(positionPopup, 0, false);
  });
}])

.directive('uibDatepickerPopup', function() {
  return {
    require: ['ngModel', 'uibDatepickerPopup'],
    controller: 'UibDatepickerPopupController',
    scope: {
      datepickerOptions: '=?',
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@'
    },
    link: function(scope, element, attrs, ctrls) {
      var ngModel = ctrls[0],
        ctrl = ctrls[1];

      ctrl.init(ngModel);
    }
  };
})

.directive('uibDatepickerPopupWrap', function() {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
    }
  };
});

angular.module('ui.bootstrap.debounce', [])
/**
 * A helper, internal service that debounces a function
 */
  .factory('$$debounce', ['$timeout', function($timeout) {
    return function(callback, debounceTime) {
      var timeoutPromise;

      return function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments);
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }

        timeoutPromise = $timeout(function() {
          callback.apply(self, args);
        }, debounceTime);
      };
    };
  }]);

angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])

.constant('uibDropdownConfig', {
  appendToOpenClass: 'uib-dropdown-open',
  openClass: 'open'
})

.service('uibDropdownService', ['$document', '$rootScope', function($document, $rootScope) {
  var openScope = null;

  this.open = function(dropdownScope, element) {
    if (!openScope) {
      $document.on('click', closeDropdown);
    }

    if (openScope && openScope !== dropdownScope) {
      openScope.isOpen = false;
    }

    openScope = dropdownScope;
  };

  this.close = function(dropdownScope, element) {
    if (openScope === dropdownScope) {
      $document.off('click', closeDropdown);
      $document.off('keydown', this.keybindFilter);
      openScope = null;
    }
  };

  var closeDropdown = function(evt) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope) { return; }

    if (evt && openScope.getAutoClose() === 'disabled') { return; }

    if (evt && evt.which === 3) { return; }

    var toggleElement = openScope.getToggleElement();
    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    if (evt && openScope.getAutoClose() === 'outsideClick' &&
      dropdownElement && dropdownElement[0].contains(evt.target)) {
      return;
    }

    openScope.focusToggleElement();
    openScope.isOpen = false;

    if (!$rootScope.$$phase) {
      openScope.$apply();
    }
  };

  this.keybindFilter = function(evt) {
    if (!openScope) {
      // see this.close as ESC could have been pressed which kills the scope so we can not proceed
      return;
    }

    var dropdownElement = openScope.getDropdownElement();
    var toggleElement = openScope.getToggleElement();
    var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
    var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
    if (evt.which === 27) {
      evt.stopPropagation();
      openScope.focusToggleElement();
      closeDropdown();
    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
      evt.preventDefault();
      evt.stopPropagation();
      openScope.focusDropdownEntry(evt.which);
    }
  };
}])

.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
  var self = this,
    scope = $scope.$new(), // create a child scope so we are not polluting original one
    templateScope,
    appendToOpenClass = dropdownConfig.appendToOpenClass,
    openClass = dropdownConfig.openClass,
    getIsOpen,
    setIsOpen = angular.noop,
    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
    appendToBody = false,
    appendTo = null,
    keynavEnabled = false,
    selectedOption = null,
    body = $document.find('body');

  $element.addClass('dropdown');

  this.init = function() {
    if ($attrs.isOpen) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }

    if (angular.isDefined($attrs.dropdownAppendTo)) {
      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
      if (appendToEl) {
        appendTo = angular.element(appendToEl);
      }
    }

    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
    keynavEnabled = angular.isDefined($attrs.keyboardNav);

    if (appendToBody && !appendTo) {
      appendTo = body;
    }

    if (appendTo && self.dropdownMenu) {
      appendTo.append(self.dropdownMenu);
      $element.on('$destroy', function handleDestroyEvent() {
        self.dropdownMenu.remove();
      });
    }
  };

  this.toggle = function(open) {
    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    if (angular.isFunction(setIsOpen)) {
      setIsOpen(scope, scope.isOpen);
    }

    return scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.getAutoClose = function() {
    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
  };

  scope.getElement = function() {
    return $element;
  };

  scope.isKeynavEnabled = function() {
    return keynavEnabled;
  };

  scope.focusDropdownEntry = function(keyCode) {
    var elems = self.dropdownMenu ? //If append to body is used.
      angular.element(self.dropdownMenu).find('a') :
      $element.find('ul').eq(0).find('a');

    switch (keyCode) {
      case 40: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = 0;
        } else {
          self.selectedOption = self.selectedOption === elems.length - 1 ?
            self.selectedOption :
            self.selectedOption + 1;
        }
        break;
      }
      case 38: {
        if (!angular.isNumber(self.selectedOption)) {
          self.selectedOption = elems.length - 1;
        } else {
          self.selectedOption = self.selectedOption === 0 ?
            0 : self.selectedOption - 1;
        }
        break;
      }
    }
    elems[self.selectedOption].focus();
  };

  scope.getDropdownElement = function() {
    return self.dropdownMenu;
  };

  scope.focusToggleElement = function() {
    if (self.toggleElement) {
      self.toggleElement[0].focus();
    }
  };

  scope.$watch('isOpen', function(isOpen, wasOpen) {
    if (appendTo && self.dropdownMenu) {
      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
        css,
        rightalign,
        scrollbarPadding,
        scrollbarWidth = 0;

      css = {
        top: pos.top + 'px',
        display: isOpen ? 'block' : 'none'
      };

      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
      if (!rightalign) {
        css.left = pos.left + 'px';
        css.right = 'auto';
      } else {
        css.left = 'auto';
        scrollbarPadding = $position.scrollbarPadding(appendTo);

        if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
          scrollbarWidth = scrollbarPadding.scrollbarWidth;
        }

        css.right = window.innerWidth - scrollbarWidth -
          (pos.left + $element.prop('offsetWidth')) + 'px';
      }

      // Need to adjust our positioning to be relative to the appendTo container
      // if it's not the body element
      if (!appendToBody) {
        var appendOffset = $position.offset(appendTo);

        css.top = pos.top - appendOffset.top + 'px';

        if (!rightalign) {
          css.left = pos.left - appendOffset.left + 'px';
        } else {
          css.right = window.innerWidth -
            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
        }
      }

      self.dropdownMenu.css(css);
    }

    var openContainer = appendTo ? appendTo : $element;
    var hasOpenClass = openContainer.hasClass(appendTo ? appendToOpenClass : openClass);

    if (hasOpenClass === !isOpen) {
      $animate[isOpen ? 'addClass' : 'removeClass'](openContainer, appendTo ? appendToOpenClass : openClass).then(function() {
        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
          toggleInvoker($scope, { open: !!isOpen });
        }
      });
    }

    if (isOpen) {
      if (self.dropdownMenuTemplateUrl) {
        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
          templateScope = scope.$new();
          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
            var newEl = dropdownElement;
            self.dropdownMenu.replaceWith(newEl);
            self.dropdownMenu = newEl;
            $document.on('keydown', uibDropdownService.keybindFilter);
          });
        });
      } else {
        $document.on('keydown', uibDropdownService.keybindFilter);
      }

      scope.focusToggleElement();
      uibDropdownService.open(scope, $element);
    } else {
      uibDropdownService.close(scope, $element);
      if (self.dropdownMenuTemplateUrl) {
        if (templateScope) {
          templateScope.$destroy();
        }
        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
        self.dropdownMenu.replaceWith(newEl);
        self.dropdownMenu = newEl;
      }

      self.selectedOption = null;
    }

    if (angular.isFunction(setIsOpen)) {
      setIsOpen($scope, isOpen);
    }
  });
}])

.directive('uibDropdown', function() {
  return {
    controller: 'UibDropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init();
    }
  };
})

.directive('uibDropdownMenu', function() {
  return {
    restrict: 'A',
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
        return;
      }

      element.addClass('dropdown-menu');

      var tplUrl = attrs.templateUrl;
      if (tplUrl) {
        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
      }

      if (!dropdownCtrl.dropdownMenu) {
        dropdownCtrl.dropdownMenu = element;
      }
    }
  };
})

.directive('uibDropdownToggle', function() {
  return {
    require: '?^uibDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl) {
        return;
      }

      element.addClass('dropdown-toggle');

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if (!element.hasClass('disabled') && !attrs.disabled) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.bind('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.unbind('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.stackedMap', [])
/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function() {
    return {
      createNew: function() {
        var stack = [];

        return {
          add: function(key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function(key) {
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function() {
            return stack[stack.length - 1];
          },
          remove: function(key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function() {
            return stack.pop();
          },
          length: function() {
            return stack.length;
          }
        };
      }
    };
  });
angular.module('ui.bootstrap.modal', ['ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
/**
 * A helper, internal data structure that stores all references attached to key
 */
  .factory('$$multiMap', function() {
    return {
      createNew: function() {
        var map = {};

        return {
          entries: function() {
            return Object.keys(map).map(function(key) {
              return {
                key: key,
                value: map[key]
              };
            });
          },
          get: function(key) {
            return map[key];
          },
          hasKey: function(key) {
            return !!map[key];
          },
          keys: function() {
            return Object.keys(map);
          },
          put: function(key, value) {
            if (!map[key]) {
              map[key] = [];
            }

            map[key].push(value);
          },
          remove: function(key, value) {
            var values = map[key];

            if (!values) {
              return;
            }

            var idx = values.indexOf(value);

            if (idx !== -1) {
              values.splice(idx, 1);
            }

            if (!values.length) {
              delete map[key];
            }
          }
        };
      }
    };
  })

/**
 * Pluggable resolve mechanism for the modal resolve resolution
 * Supports UI Router's $resolve service
 */
  .provider('$uibResolve', function() {
    var resolve = this;
    this.resolver = null;

    this.setResolver = function(resolver) {
      this.resolver = resolver;
    };

    this.$get = ['$injector', '$q', function($injector, $q) {
      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
      return {
        resolve: function(invocables, locals, parent, self) {
          if (resolver) {
            return resolver.resolve(invocables, locals, parent, self);
          }

          var promises = [];

          angular.forEach(invocables, function(value) {
            if (angular.isFunction(value) || angular.isArray(value)) {
              promises.push($q.resolve($injector.invoke(value)));
            } else if (angular.isString(value)) {
              promises.push($q.resolve($injector.get(value)));
            } else {
              promises.push($q.resolve(value));
            }
          });

          return $q.all(promises).then(function(resolves) {
            var resolveObj = {};
            var resolveIter = 0;
            angular.forEach(invocables, function(value, key) {
              resolveObj[key] = resolves[resolveIter++];
            });

            return resolveObj;
          });
        }
      };
    }];
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
  function($animate, $injector, $modalStack) {
    return {
      restrict: 'A',
      compile: function(tElement, tAttrs) {
        tElement.addClass(tAttrs.backdropClass);
        return linkFn;
      }
    };

    function linkFn(scope, element, attrs) {
      if (attrs.modalInClass) {
        $animate.addClass(element, attrs.modalInClass);

        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
          var done = setIsAsync();
          if (scope.modalOptions.animation) {
            $animate.removeClass(element, attrs.modalInClass).then(done);
          } else {
            done();
          }
        });
      }
    }
  }])

  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
  function($modalStack, $q, $animateCss, $document) {
    return {
      scope: {
        index: '@'
      },
      restrict: 'A',
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'uib/template/modal/window.html';
      },
      link: function(scope, element, attrs) {
        element.addClass(attrs.windowTopClass || '');
        scope.size = attrs.size;

        scope.close = function(evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop &&
            modal.value.backdrop !== 'static' &&
            evt.target === evt.currentTarget) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };

        // moved from template to fix issue #2280
        element.on('click', scope.close);

        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
        // We can detect that by using this property in the template associated with this directive and then use
        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
        scope.$isRendered = true;

        // Deferred object that will be resolved when this modal is rendered.
        var modalRenderDeferObj = $q.defer();
        // Resolve render promise post-digest
        scope.$$postDigest(function() {
          modalRenderDeferObj.resolve();
        });

        modalRenderDeferObj.promise.then(function() {
          var animationPromise = null;

          if (attrs.modalInClass) {
            animationPromise = $animateCss(element, {
              addClass: attrs.modalInClass
            }).start();

            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
              var done = setIsAsync();
              $animateCss(element, {
                removeClass: attrs.modalInClass
              }).start().then(done);
            });
          }


          $q.when(animationPromise).then(function() {
            // Notify {@link $modalStack} that modal is rendered.
            var modal = $modalStack.getTop();
            if (modal) {
              $modalStack.modalRendered(modal.key);
            }

            /**
             * If something within the freshly-opened modal already has focus (perhaps via a
             * directive that causes focus) then there's no need to try to focus anything.
             */
            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
              var inputWithAutofocus = element[0].querySelector('[autofocus]');
              /**
               * Auto-focusing of a freshly-opened modal element causes any child elements
               * with the autofocus attribute to lose focus. This is an issue on touch
               * based devices which will show and then hide the onscreen keyboard.
               * Attempts to refocus the autofocus element via JavaScript will not reopen
               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
               * the modal element if the modal does not contain an autofocus element.
               */
              if (inputWithAutofocus) {
                inputWithAutofocus.focus();
              } else {
                element[0].focus();
              }
            }
          });
        });
      }
    };
  }])

  .directive('uibModalAnimationClass', function() {
    return {
      compile: function(tElement, tAttrs) {
        if (tAttrs.modalAnimation) {
          tElement.addClass(tAttrs.uibModalAnimationClass);
        }
      }
    };
  })

  .directive('uibModalTransclude', ['$animate', function($animate) {
    return {
      link: function(scope, element, attrs, controller, transclude) {
        transclude(scope.$parent, function(clone) {
          element.empty();
          $animate.enter(clone, element);
        });
      }
    };
  }])

  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var openedClasses = $$multiMap.createNew();
      var $modalStack = {
        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
      };
      var topModalIndex = 0;
      var previousTopOpenedModal = null;
      var ARIA_HIDDEN_ATTRIBUTE_NAME = 'data-bootstrap-modal-aria-hidden-count';

      //Modal focus behavior
      var tabbableSelector = 'a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']), ' +
        'button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']), textarea:not([disabled]):not([tabindex=\'-1\']), ' +
        'iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]';
      var scrollbarPadding;
      var SNAKE_CASE_REGEXP = /[A-Z]/g;

      // TODO: extract into common dependency with tooltip
      function snake_case(name) {
        var separator = '-';
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase();
        });
      }

      function isVisible(element) {
        return !!(element.offsetWidth ||
          element.offsetHeight ||
          element.getClientRects().length);
      }

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }

        // If any backdrop exist, ensure that it's index is always
        // right below the top modal
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
          topBackdropIndex = topModalIndex;
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value;
        var appendToElement = modalWindow.appendTo;

        //clean up the stack
        openedWindows.remove(modalInstance);
        previousTopOpenedModal = openedWindows.top();
        if (previousTopOpenedModal) {
          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
        }

        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
          openedClasses.remove(modalBodyClass, modalInstance);
          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
            if (scrollbarPadding.originalRight) {
              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
            } else {
              appendToElement.css({paddingRight: ''});
            }
            scrollbarPadding = null;
          }
          toggleTopWindowClass(true);
        }, modalWindow.closedDeferred);
        checkRemoveBackdrop();

        //move focus to specified element if available, or else to body
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
          elementToReceiveFocus.focus();
        } else if (appendToElement.focus) {
          appendToElement.focus();
        }
      }

      // Add or remove "windowTopClass" from the top window in the stack
      function toggleTopWindowClass(toggleSwitch) {
        var modalWindow;

        if (openedWindows.length() > 0) {
          modalWindow = openedWindows.top().value;
          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
        }
      }

      function checkRemoveBackdrop() {
        //remove backdrop if no longer needed
        if (backdropDomEl && backdropIndex() === -1) {
          var backdropScopeRef = backdropScope;
          removeAfterAnimate(backdropDomEl, backdropScope, function() {
            backdropScopeRef = null;
          });
          backdropDomEl = undefined;
          backdropScope = undefined;
        }
      }

      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
          if (!asyncDeferred) {
            asyncDeferred = $q.defer();
            asyncPromise = asyncDeferred.promise;
          }

          return function asyncDone() {
            asyncDeferred.resolve();
          };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

        // Note that it's intentional that asyncPromise might be null.
        // That's when setIsAsync has not been called during the
        // NOW_CLOSING_EVENT broadcast.
        return $q.when(asyncPromise).then(afterAnimating);

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          $animate.leave(domEl).then(function() {
            if (done) {
              done();
            }

            domEl.remove();
            if (closedDeferred) {
              closedDeferred.resolve();
            }
          });

          scope.$destroy();
        }
      }

      $document.on('keydown', keydownListener);

      $rootScope.$on('$destroy', function() {
        $document.off('keydown', keydownListener);
      });

      function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
          return evt;
        }

        var modal = openedWindows.top();
        if (modal) {
          switch (evt.which) {
            case 27: {
              if (modal.value.keyboard) {
                evt.preventDefault();
                $rootScope.$apply(function() {
                  $modalStack.dismiss(modal.key, 'escape key press');
                });
              }
              break;
            }
            case 9: {
              var list = $modalStack.loadFocusElementList(modal);
              var focusChanged = false;
              if (evt.shiftKey) {
                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
                  focusChanged = $modalStack.focusLastFocusableElement(list);
                }
              } else {
                if ($modalStack.isFocusInLastItem(evt, list)) {
                  focusChanged = $modalStack.focusFirstFocusableElement(list);
                }
              }

              if (focusChanged) {
                evt.preventDefault();
                evt.stopPropagation();
              }

              break;
            }
          }
        }
      }

      $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement,
          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

        toggleTopWindowClass(false);

        // Store the current top first, to determine what index we ought to use
        // for the current top modal
        previousTopOpenedModal = openedWindows.top();

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          renderDeferred: modal.renderDeferred,
          closedDeferred: modal.closedDeferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard,
          openedClass: modal.openedClass,
          windowTopClass: modal.windowTopClass,
          animation: modal.animation,
          appendTo: modal.appendTo
        });

        openedClasses.put(modalBodyClass, modalInstance);

        var appendToElement = modal.appendTo,
            currBackdropIndex = backdropIndex();

        if (!appendToElement.length) {
          throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
        }

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.modalOptions = modal;
          backdropScope.index = currBackdropIndex;
          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
          backdropDomEl.attr({
            'class': 'modal-backdrop',
            'ng-style': '{\'z-index\': 1040 + (index && 1 || 0) + index*10}',
            'uib-modal-animation-class': 'fade',
            'modal-in-class': 'in'
          });
          if (modal.backdropClass) {
            backdropDomEl.addClass(modal.backdropClass);
          }

          if (modal.animation) {
            backdropDomEl.attr('modal-animation', 'true');
          }
          $compile(backdropDomEl)(backdropScope);
          $animate.enter(backdropDomEl, appendToElement);
          if ($uibPosition.isScrollable(appendToElement)) {
            scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
            if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
              appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
            }
          }
        }

        var content;
        if (modal.component) {
          content = document.createElement(snake_case(modal.component.name));
          content = angular.element(content);
          content.attr({
            resolve: '$resolve',
            'modal-instance': '$uibModalInstance',
            close: '$close($value)',
            dismiss: '$dismiss($value)'
          });
        } else {
          content = modal.content;
        }

        // Set the top modal index based on the index of the previous top modal
        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
        angularDomEl.attr({
          'class': 'modal',
          'template-url': modal.windowTemplateUrl,
          'window-top-class': modal.windowTopClass,
          'role': 'dialog',
          'aria-labelledby': modal.ariaLabelledBy,
          'aria-describedby': modal.ariaDescribedBy,
          'size': modal.size,
          'index': topModalIndex,
          'animate': 'animate',
          'ng-style': '{\'z-index\': 1050 + $$topModalIndex*10, display: \'block\'}',
          'tabindex': -1,
          'uib-modal-animation-class': 'fade',
          'modal-in-class': 'in'
        }).append(content);
        if (modal.windowClass) {
          angularDomEl.addClass(modal.windowClass);
        }

        if (modal.animation) {
          angularDomEl.attr('modal-animation', 'true');
        }

        appendToElement.addClass(modalBodyClass);
        if (modal.scope) {
          // we need to explicitly add the modal index to the modal scope
          // because it is needed by ngStyle to compute the zIndex property.
          modal.scope.$$topModalIndex = topModalIndex;
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

        openedWindows.top().value.modalDomEl = angularDomEl;
        openedWindows.top().value.modalOpener = modalOpener;

        applyAriaHidden(angularDomEl);

        function applyAriaHidden(el) {
          if (!el || el[0].tagName === 'BODY') {
            return;
          }

          getSiblings(el).forEach(function(sibling) {
            var elemIsAlreadyHidden = sibling.getAttribute('aria-hidden') === 'true',
              ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);

            if (!ariaHiddenCount) {
              ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
            }

            sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
            sibling.setAttribute('aria-hidden', 'true');
          });

          return applyAriaHidden(el.parent());

          function getSiblings(el) {
            var children = el.parent() ? el.parent().children() : [];

            return Array.prototype.filter.call(children, function(child) {
              return child !== el[0];
            });
          }
        }
      };

      function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
      }

      function unhideBackgroundElements() {
        Array.prototype.forEach.call(
          document.querySelectorAll('[' + ARIA_HIDDEN_ATTRIBUTE_NAME + ']'),
          function(hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10),
              newHiddenCount = ariaHiddenCount - 1;
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);

            if (!newHiddenCount) {
              hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
              hiddenEl.removeAttribute('aria-hidden');
            }
          }
        );
      }

      $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }

        return !modalWindow;
      };

      $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
          return true;
        }
        return !modalWindow;
      };

      $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function() {
        return openedWindows.top();
      };

      $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        $modalStack.focusFirstFocusableElement($modalStack.loadFocusElementList(modalWindow));
        if (modalWindow) {
          modalWindow.value.renderDeferred.resolve();
        }
      };

      $modalStack.focusFirstFocusableElement = function(list) {
        if (list.length > 0) {
          list[0].focus();
          return true;
        }
        return false;
      };

      $modalStack.focusLastFocusableElement = function(list) {
        if (list.length > 0) {
          list[list.length - 1].focus();
          return true;
        }
        return false;
      };

      $modalStack.isModalFocused = function(evt, modalWindow) {
        if (evt && modalWindow) {
          var modalDomEl = modalWindow.value.modalDomEl;
          if (modalDomEl && modalDomEl.length) {
            return (evt.target || evt.srcElement) === modalDomEl[0];
          }
        }
        return false;
      };

      $modalStack.isFocusInFirstItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[0];
        }
        return false;
      };

      $modalStack.isFocusInLastItem = function(evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[list.length - 1];
        }
        return false;
      };

      $modalStack.loadFocusElementList = function(modalWindow) {
        if (modalWindow) {
          var modalDomE1 = modalWindow.value.modalDomEl;
          if (modalDomE1 && modalDomE1.length) {
            var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
            return elements ?
              Array.prototype.filter.call(elements, function(element) {
                return isVisible(element);
              }) : elements;
          }
        }
      };

      return $modalStack;
    }])

  .provider('$uibModal', function() {
    var $modalProvider = {
      options: {
        animation: true,
        backdrop: true, //can also be false or 'static'
        keyboard: true
      },
      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $templateRequest(angular.isFunction(options.templateUrl) ?
                options.templateUrl() : options.templateUrl);
          }

          var promiseChain = null;
          $modal.getPromiseChain = function() {
            return promiseChain;
          };

          $modal.open = function(modalOptions) {
            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();
            var modalClosedDeferred = $q.defer();
            var modalRenderDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              closed: modalClosedDeferred.promise,
              rendered: modalRenderDeferred.promise,
              close: function (result) {
                return $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                return $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};
            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

            //verify options
            if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of component or template or templateUrl options is required.');
            }

            var templateAndResolvePromise;
            if (modalOptions.component) {
              templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
            } else {
              templateAndResolvePromise =
                $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);
            }

            function resolveWithTemplate() {
              return templateAndResolvePromise;
            }

            // Wait for the resolution of the existing promise chain.
            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
            // Then add to $modalStack and resolve opened.
            // Finally clean up the chain variable if no subsequent modal has overwritten it.
            var samePromise;
            samePromise = promiseChain = $q.all([promiseChain])
              .then(resolveWithTemplate, resolveWithTemplate)
              .then(function resolveSuccess(tplAndVars) {
                var providedScope = modalOptions.scope || $rootScope;

                var modalScope = providedScope.$new();
                modalScope.$close = modalInstance.close;
                modalScope.$dismiss = modalInstance.dismiss;

                modalScope.$on('$destroy', function() {
                  if (!modalScope.$$uibDestructionScheduled) {
                    modalScope.$dismiss('$uibUnscheduledDestruction');
                  }
                });

                var modal = {
                  scope: modalScope,
                  deferred: modalResultDeferred,
                  renderDeferred: modalRenderDeferred,
                  closedDeferred: modalClosedDeferred,
                  animation: modalOptions.animation,
                  backdrop: modalOptions.backdrop,
                  keyboard: modalOptions.keyboard,
                  backdropClass: modalOptions.backdropClass,
                  windowTopClass: modalOptions.windowTopClass,
                  windowClass: modalOptions.windowClass,
                  windowTemplateUrl: modalOptions.windowTemplateUrl,
                  ariaLabelledBy: modalOptions.ariaLabelledBy,
                  ariaDescribedBy: modalOptions.ariaDescribedBy,
                  size: modalOptions.size,
                  openedClass: modalOptions.openedClass,
                  appendTo: modalOptions.appendTo
                };

                var component = {};
                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

                if (modalOptions.component) {
                  constructLocals(component, false, true, false);
                  component.name = modalOptions.component;
                  modal.component = component;
                } else if (modalOptions.controller) {
                  constructLocals(ctrlLocals, true, false, true);

                  // the third param will make the controller instantiate later,private api
                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
                  if (modalOptions.controllerAs && modalOptions.bindToController) {
                    ctrlInstance = ctrlInstantiate.instance;
                    ctrlInstance.$close = modalScope.$close;
                    ctrlInstance.$dismiss = modalScope.$dismiss;
                    angular.extend(ctrlInstance, {
                      $resolve: ctrlLocals.$scope.$resolve
                    }, providedScope);
                  }

                  ctrlInstance = ctrlInstantiate();

                  if (angular.isFunction(ctrlInstance.$onInit)) {
                    ctrlInstance.$onInit();
                  }
                }

                if (!modalOptions.component) {
                  modal.content = tplAndVars[0];
                }

                $modalStack.open(modalInstance, modal);
                modalOpenedDeferred.resolve(true);

                function constructLocals(obj, template, instanceOnScope, injectable) {
                  obj.$scope = modalScope;
                  obj.$scope.$resolve = {};
                  if (instanceOnScope) {
                    obj.$scope.$uibModalInstance = modalInstance;
                  } else {
                    obj.$uibModalInstance = modalInstance;
                  }

                  var resolves = template ? tplAndVars[1] : tplAndVars;
                  angular.forEach(resolves, function(value, key) {
                    if (injectable) {
                      obj[key] = value;
                    }

                    obj.$scope.$resolve[key] = value;
                  });
                }
            }, function resolveError(reason) {
              modalOpenedDeferred.reject(reason);
              modalResultDeferred.reject(reason);
            })['finally'](function() {
              if (promiseChain === samePromise) {
                promiseChain = null;
              }
            });

            return modalInstance;
          };

          return $modal;
        }
      ]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.paging', [])
/**
 * Helper internal service for generating common controller code between the
 * pager and pagination components
 */
.factory('uibPaging', ['$parse', function($parse) {
  return {
    create: function(ctrl, $scope, $attrs) {
      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
      ctrl._watchers = [];

      ctrl.init = function(ngModelCtrl, config) {
        ctrl.ngModelCtrl = ngModelCtrl;
        ctrl.config = config;

        ngModelCtrl.$render = function() {
          ctrl.render();
        };

        if ($attrs.itemsPerPage) {
          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
            ctrl.itemsPerPage = parseInt(value, 10);
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }));
        } else {
          ctrl.itemsPerPage = config.itemsPerPage;
        }

        $scope.$watch('totalItems', function(newTotal, oldTotal) {
          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
            $scope.totalPages = ctrl.calculateTotalPages();
            ctrl.updatePage();
          }
        });
      };

      ctrl.calculateTotalPages = function() {
        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
        return Math.max(totalPages || 0, 1);
      };

      ctrl.render = function() {
        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
      };

      $scope.selectPage = function(page, evt) {
        if (evt) {
          evt.preventDefault();
        }

        var clickAllowed = !$scope.ngDisabled || !evt;
        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
          if (evt && evt.target) {
            evt.target.blur();
          }
          ctrl.ngModelCtrl.$setViewValue(page);
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.getText = function(key) {
        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
      };

      $scope.noPrevious = function() {
        return $scope.page === 1;
      };

      $scope.noNext = function() {
        return $scope.page === $scope.totalPages;
      };

      ctrl.updatePage = function() {
        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

        if ($scope.page > $scope.totalPages) {
          $scope.selectPage($scope.totalPages);
        } else {
          ctrl.ngModelCtrl.$render();
        }
      };

      $scope.$on('$destroy', function() {
        while (ctrl._watchers.length) {
          ctrl._watchers.shift()();
        }
      });
    }
  };
}]);

angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])

.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

  uibPaging.create(this, $scope, $attrs);
}])

.constant('uibPagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
  return {
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@',
      ngDisabled: '='
    },
    require: ['uibPager', '?ngModel'],
    restrict: 'A',
    controller: 'UibPagerController',
    controllerAs: 'pager',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pager/pager.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pager');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
        return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
    }
  };
}]);

angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])
.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
  var ctrl = this;
  // Setup configuration parameters
  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;

  uibPaging.create(this, $scope, $attrs);

  if ($attrs.maxSize) {
    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
      maxSize = parseInt(value, 10);
      ctrl.render();
    }));
  }

  // Create page object used in template
  function makePage(number, text, isActive) {
    return {
      number: number,
      text: text,
      active: isActive
    };
  }

  function getPages(currentPage, totalPages) {
    var pages = [];

    // Default page limits
    var startPage = 1, endPage = totalPages;
    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

    // recompute if maxSize
    if (isMaxSized) {
      if (rotate) {
        // Current page is displayed in the middle of the visible ones
        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
        endPage = startPage + maxSize - 1;

        // Adjust if limit is exceeded
        if (endPage > totalPages) {
          endPage = totalPages;
          startPage = endPage - maxSize + 1;
        }
      } else {
        // Visible pages are paginated with maxSize
        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

        // Adjust last page if limit is exceeded
        endPage = Math.min(startPage + maxSize - 1, totalPages);
      }
    }

    // Add page number links
    for (var number = startPage; number <= endPage; number++) {
      var page = makePage(number, pageLabel(number), number === currentPage);
      pages.push(page);
    }

    // Add links to move between page sets
    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
      if (startPage > 1) {
        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
        var previousPageSet = makePage(startPage - 1, '...', false);
        pages.unshift(previousPageSet);
      }
        if (boundaryLinkNumbers) {
          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
            var secondPageLink = makePage(2, '2', false);
            pages.unshift(secondPageLink);
          }
          //add the first page
          var firstPageLink = makePage(1, '1', false);
          pages.unshift(firstPageLink);
        }
      }

      if (endPage < totalPages) {
        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
        var nextPageSet = makePage(endPage + 1, '...', false);
        pages.push(nextPageSet);
      }
        if (boundaryLinkNumbers) {
          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
            pages.push(secondToLastPageLink);
          }
          //add the last page
          var lastPageLink = makePage(totalPages, totalPages, false);
          pages.push(lastPageLink);
        }
      }
    }
    return pages;
  }

  var originalRender = this.render;
  this.render = function() {
    originalRender();
    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
      $scope.pages = getPages($scope.page, $scope.totalPages);
    }
  };
}])

.constant('uibPaginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  boundaryLinkNumbers: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true,
  forceEllipses: false
})

.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
  return {
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@',
      ngDisabled:'='
    },
    require: ['uibPagination', '?ngModel'],
    restrict: 'A',
    controller: 'UibPaginationController',
    controllerAs: 'pagination',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
    },
    link: function(scope, element, attrs, ctrls) {
      element.addClass('pagination');
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider('$uibTooltip', function() {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    placementClassPrefix: '',
    animation: true,
    popupDelay: 0,
    popupCloseDelay: 0,
    useContentExp: false
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'outsideClick': 'outsideClick',
    'focus': 'blur',
    'none': ''
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function(value) {
		angular.extend(globalOptions, value);
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
   */
  this.setTriggers = function setTriggers(triggers) {
    angular.extend(triggerMap, triggers);
  };

  /**
   * This is a helper function for translating camel-case to snake_case.
   */
  function snake_case(name) {
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
    var openedTooltips = $$stackedMap.createNew();
    $document.on('keyup', keypressListener);

    $rootScope.$on('$destroy', function() {
      $document.off('keyup', keypressListener);
    });

    function keypressListener(e) {
      if (e.which === 27) {
        var last = openedTooltips.top();
        if (last) {
          last.value.close();
          last = null;
        }
      }
    }

    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
      options = angular.extend({}, defaultOptions, globalOptions, options);

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers(trigger) {
        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
        var hide = show.map(function(trigger) {
          return triggerMap[trigger] || trigger;
        });
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case(ttType);

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName + '-popup ' +
          'uib-title="' + startSym + 'title' + endSym + '" ' +
          (options.useContentExp ?
            'content-exp="contentExp()" ' :
            'content="' + startSym + 'content' + endSym + '" ') +
          'origin-scope="origScope" ' +
          'class="uib-position-measure ' + prefix + '" ' +
          'tooltip-animation-class="fade"' +
          'uib-tooltip-classes ' +
          'ng-class="{ in: isOpen }" ' +
          '>' +
        '</div>';

      return {
        compile: function(tElem, tAttrs) {
          var tooltipLinker = $compile(template);

          return function link(scope, element, attrs, tooltipCtrl) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var showTimeout;
            var hideTimeout;
            var positionTimeout;
            var adjustmentTimeout;
            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
            var triggers = getTriggers(undefined);
            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
            var ttScope = scope.$new(true);
            var repositionScheduled = false;
            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
            var observers = [];
            var lastPlacement;

            var positionTooltip = function() {
              // check if tooltip exists and is not empty
              if (!tooltip || !tooltip.html()) { return; }

              if (!positionTimeout) {
                positionTimeout = $timeout(function() {
                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                  var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                  var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });
                  var placementClasses = ttPosition.placement.split('-');

                  if (!tooltip.hasClass(placementClasses[0])) {
                    tooltip.removeClass(lastPlacement.split('-')[0]);
                    tooltip.addClass(placementClasses[0]);
                  }

                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
                  }

                  adjustmentTimeout = $timeout(function() {
                    var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
                    var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
                    if (adjustment) {
                      tooltip.css(adjustment);
                    }
                    adjustmentTimeout = null;
                  }, 0, false);

                  // first time through tt element will have the
                  // uib-position-measure class or if the placement
                  // has changed we need to position the arrow.
                  if (tooltip.hasClass('uib-position-measure')) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                    tooltip.removeClass('uib-position-measure');
                  } else if (lastPlacement !== ttPosition.placement) {
                    $position.positionArrow(tooltip, ttPosition.placement);
                  }
                  lastPlacement = ttPosition.placement;

                  positionTimeout = null;
                }, 0, false);
              }
            };

            // Set up the correct scope to allow transclusion later
            ttScope.origScope = scope;

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind() {
              if (!ttScope.isOpen) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
                return;
              }

              cancelHide();
              prepareTooltip();

              if (ttScope.popupDelay) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!showTimeout) {
                  showTimeout = $timeout(show, ttScope.popupDelay, false);
                }
              } else {
                show();
              }
            }

            function hideTooltipBind() {
              cancelShow();

              if (ttScope.popupCloseDelay) {
                if (!hideTimeout) {
                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
                }
              } else {
                hide();
              }
            }

            // Show the tooltip popup element.
            function show() {
              cancelShow();
              cancelHide();

              // Don't show empty tooltips.
              if (!ttScope.content) {
                return angular.noop;
              }

              createTooltip();

              // And show the tooltip.
              ttScope.$evalAsync(function() {
                ttScope.isOpen = true;
                assignIsOpen(true);
                positionTooltip();
              });
            }

            function cancelShow() {
              if (showTimeout) {
                $timeout.cancel(showTimeout);
                showTimeout = null;
              }

              if (positionTimeout) {
                $timeout.cancel(positionTimeout);
                positionTimeout = null;
              }
            }

            // Hide the tooltip popup element.
            function hide() {
              if (!ttScope) {
                return;
              }

              // First things first: we don't show it anymore.
              ttScope.$evalAsync(function() {
                if (ttScope) {
                  ttScope.isOpen = false;
                  assignIsOpen(false);
                  // And now we remove it from the DOM. However, if we have animation, we
                  // need to wait for it to expire beforehand.
                  // FIXME: this is a placeholder for a port of the transitions library.
                  // The fade transition in TWBS is 150ms.
                  if (ttScope.animation) {
                    if (!transitionTimeout) {
                      transitionTimeout = $timeout(removeTooltip, 150, false);
                    }
                  } else {
                    removeTooltip();
                  }
                }
              });
            }

            function cancelHide() {
              if (hideTimeout) {
                $timeout.cancel(hideTimeout);
                hideTimeout = null;
              }

              if (transitionTimeout) {
                $timeout.cancel(transitionTimeout);
                transitionTimeout = null;
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                return;
              }

              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                if (appendToBody) {
                  $document.find('body').append(tooltip);
                } else {
                  element.after(tooltip);
                }
              });

              openedTooltips.add(ttScope, {
                close: hide
              });

              prepObservers();
            }

            function removeTooltip() {
              cancelShow();
              cancelHide();
              unregisterObservers();

              if (tooltip) {
                tooltip.remove();

                tooltip = null;
                if (adjustmentTimeout) {
                  $timeout.cancel(adjustmentTimeout);
                }
              }

              openedTooltips.remove(ttScope);

              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            /**
             * Set the initial scope values. Once
             * the tooltip is created, the observers
             * will be added to keep things in sync.
             */
            function prepareTooltip() {
              ttScope.title = attrs[prefix + 'Title'];
              if (contentParse) {
                ttScope.content = contentParse(scope);
              } else {
                ttScope.content = attrs[ttType];
              }

              ttScope.popupClass = attrs[prefix + 'Class'];
              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
              var placement = $position.parsePlacement(ttScope.placement);
              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
            }

            function assignIsOpen(isOpen) {
              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                isOpenParse.assign(scope, isOpen);
              }
            }

            ttScope.contentExp = function() {
              return ttScope.content;
            };

            /**
             * Observe the relevant attributes.
             */
            attrs.$observe('disabled', function(val) {
              if (val) {
                cancelShow();
              }

              if (val && ttScope.isOpen) {
                hide();
              }
            });

            if (isOpenParse) {
              scope.$watch(isOpenParse, function(val) {
                if (ttScope && !val === ttScope.isOpen) {
                  toggleTooltipBind();
                }
              });
            }

            function prepObservers() {
              observers.length = 0;

              if (contentParse) {
                observers.push(
                  scope.$watch(contentParse, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    }
                  })
                );

                observers.push(
                  tooltipLinkedScope.$watch(function() {
                    if (!repositionScheduled) {
                      repositionScheduled = true;
                      tooltipLinkedScope.$$postDigest(function() {
                        repositionScheduled = false;
                        if (ttScope && ttScope.isOpen) {
                          positionTooltip();
                        }
                      });
                    }
                  })
                );
              } else {
                observers.push(
                  attrs.$observe(ttType, function(val) {
                    ttScope.content = val;
                    if (!val && ttScope.isOpen) {
                      hide();
                    } else {
                      positionTooltip();
                    }
                  })
                );
              }

              observers.push(
                attrs.$observe(prefix + 'Title', function(val) {
                  ttScope.title = val;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );

              observers.push(
                attrs.$observe(prefix + 'Placement', function(val) {
                  ttScope.placement = val ? val : options.placement;
                  if (ttScope.isOpen) {
                    positionTooltip();
                  }
                })
              );
            }

            function unregisterObservers() {
              if (observers.length) {
                angular.forEach(observers, function(observer) {
                  observer();
                });
                observers.length = 0;
              }
            }

            // hide tooltips/popovers for outsideClick trigger
            function bodyHideTooltipBind(e) {
              if (!ttScope || !ttScope.isOpen || !tooltip) {
                return;
              }
              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                hideTooltipBind();
              }
            }

            var unregisterTriggers = function() {
              triggers.show.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  element.off('click', toggleTooltipBind);
                } else {
                  element.off(trigger, showTooltipBind);
                  element.off(trigger, toggleTooltipBind);
                }
              });
              triggers.hide.forEach(function(trigger) {
                if (trigger === 'outsideClick') {
                  $document.off('click', bodyHideTooltipBind);
                } else {
                  element.off(trigger, hideTooltipBind);
                }
              });
            };

            function prepTriggers() {
              var showTriggers = [], hideTriggers = [];
              var val = scope.$eval(attrs[prefix + 'Trigger']);
              unregisterTriggers();

              if (angular.isObject(val)) {
                Object.keys(val).forEach(function(key) {
                  showTriggers.push(key);
                  hideTriggers.push(val[key]);
                });
                triggers = {
                  show: showTriggers,
                  hide: hideTriggers
                };
              } else {
                triggers = getTriggers(val);
              }

              if (triggers.show !== 'none') {
                triggers.show.forEach(function(trigger, idx) {
                  if (trigger === 'outsideClick') {
                    element.on('click', toggleTooltipBind);
                    $document.on('click', bodyHideTooltipBind);
                  } else if (trigger === triggers.hide[idx]) {
                    element.on(trigger, toggleTooltipBind);
                  } else if (trigger) {
                    element.on(trigger, showTooltipBind);
                    element.on(triggers.hide[idx], hideTooltipBind);
                  }

                  element.on('keypress', function(e) {
                    if (e.which === 27) {
                      hideTooltipBind();
                    }
                  });
                });
              }
            }

            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal;
            var appendKey = prefix + 'AppendToBody';
            if (appendKey in attrs && attrs[appendKey] === undefined) {
              appendToBodyVal = true;
            } else {
              appendToBodyVal = scope.$eval(attrs[appendKey]);
            }

            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

// This is mostly ngInclude code but with a custom scope
.directive('uibTooltipTemplateTransclude', [
         '$animate', '$sce', '$compile', '$templateRequest',
function ($animate, $sce, $compile, $templateRequest) {
  return {
    link: function(scope, elem, attrs) {
      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

      var changeCounter = 0,
        currentScope,
        previousElement,
        currentElement;

      var cleanupLastIncludeContent = function() {
        if (previousElement) {
          previousElement.remove();
          previousElement = null;
        }

        if (currentScope) {
          currentScope.$destroy();
          currentScope = null;
        }

        if (currentElement) {
          $animate.leave(currentElement).then(function() {
            previousElement = null;
          });
          previousElement = currentElement;
          currentElement = null;
        }
      };

      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
        var thisChangeId = ++changeCounter;

        if (src) {
          //set the 2nd param to true to ignore the template request error so that the inner
          //contents and scope can be cleaned up.
          $templateRequest(src, true).then(function(response) {
            if (thisChangeId !== changeCounter) { return; }
            var newScope = origScope.$new();
            var template = response;

            var clone = $compile(template)(newScope, function(clone) {
              cleanupLastIncludeContent();
              $animate.enter(clone, elem);
            });

            currentScope = newScope;
            currentElement = clone;

            currentScope.$emit('$includeContentLoaded', src);
          }, function() {
            if (thisChangeId === changeCounter) {
              cleanupLastIncludeContent();
              scope.$emit('$includeContentError', src);
            }
          });
          scope.$emit('$includeContentRequested', src);
        } else {
          cleanupLastIncludeContent();
        }
      });

      scope.$on('$destroy', cleanupLastIncludeContent);
    }
  };
}])

/**
 * Note that it's intentional that these classes are *not* applied through $animate.
 * They must not be animated as they're expected to be present on the tooltip on
 * initialization.
 */
.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      // need to set the primary position so the
      // arrow has space during position measure.
      // tooltip.positionTooltip()
      if (scope.placement) {
        // // There are no top-left etc... classes
        // // in TWBS, so we need the primary position.
        var position = $uibPosition.parsePlacement(scope.placement);
        element.addClass(position[0]);
      }

      if (scope.popupClass) {
        element.addClass(scope.popupClass);
      }

      if (scope.animation) {
        element.addClass(attrs.tooltipAnimationClass);
      }
    }
  };
}])

.directive('uibTooltipPopup', function() {
  return {
    restrict: 'A',
    scope: { content: '@' },
    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
  };
})

.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
}])

.directive('uibTooltipTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
  };
})

.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}])

.directive('uibTooltipHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&' },
    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
  };
})

.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, and selector delegatation.
 */
angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

.directive('uibPopoverTemplatePopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', contentExp: '&', originScope: '&' },
    templateUrl: 'uib/template/popover/popover-template.html'
  };
})

.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverHtmlPopup', function() {
  return {
    restrict: 'A',
    scope: { contentExp: '&', uibTitle: '@' },
    templateUrl: 'uib/template/popover/popover-html.html'
  };
})

.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
    useContentExp: true
  });
}])

.directive('uibPopoverPopup', function() {
  return {
    restrict: 'A',
    scope: { uibTitle: '@', content: '@' },
    templateUrl: 'uib/template/popover/popover.html'
  };
})

.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
  return $uibTooltip('uibPopover', 'popover', 'click');
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('uibProgressConfig', {
  animate: true,
  max: 100
})

.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
  var self = this,
      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

  this.bars = [];
  $scope.max = getMaxOrDefault();

  this.addBar = function(bar, element, attrs) {
    if (!animate) {
      element.css({'transition': 'none'});
    }

    this.bars.push(bar);

    bar.max = getMaxOrDefault();
    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

    bar.$watch('value', function(value) {
      bar.recalculatePercentage();
    });

    bar.recalculatePercentage = function() {
      var totalPercentage = self.bars.reduce(function(total, bar) {
        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
        return total + bar.percent;
      }, 0);

      if (totalPercentage > 100) {
        bar.percent -= totalPercentage - 100;
      }
    };

    bar.$on('$destroy', function() {
      element = null;
      self.removeBar(bar);
    });
  };

  this.removeBar = function(bar) {
    this.bars.splice(this.bars.indexOf(bar), 1);
    this.bars.forEach(function (bar) {
      bar.recalculatePercentage();
    });
  };

  //$attrs.$observe('maxParam', function(maxParam) {
  $scope.$watch('maxParam', function(maxParam) {
    self.bars.forEach(function(bar) {
      bar.max = getMaxOrDefault();
      bar.recalculatePercentage();
    });
  });

  function getMaxOrDefault () {
    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
  }
}])

.directive('uibProgress', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    require: 'uibProgress',
    scope: {
      maxParam: '=?max'
    },
    templateUrl: 'uib/template/progressbar/progress.html'
  };
})

.directive('uibBar', function() {
  return {
    replace: true,
    transclude: true,
    require: '^uibProgress',
    scope: {
      value: '=',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/bar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, element, attrs);
    }
  };
})

.directive('uibProgressbar', function() {
  return {
    replace: true,
    transclude: true,
    controller: 'UibProgressController',
    scope: {
      value: '=',
      maxParam: '=?max',
      type: '@'
    },
    templateUrl: 'uib/template/progressbar/progressbar.html',
    link: function(scope, element, attrs, progressCtrl) {
      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
    }
  };
});

angular.module('ui.bootstrap.rating', [])

.constant('uibRatingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null,
  enableReset: true,
  titles: ['one', 'two', 'three', 'four', 'five']
})

.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl = { $setViewValue: angular.noop },
    self = this;

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.push(function(value) {
      if (angular.isNumber(value) && value << 0 !== value) {
        value = Math.round(value);
      }

      return value;
    });

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
    this.enableReset = angular.isDefined($attrs.enableReset) ?
      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
      tmpTitles : ratingConfig.titles;

    var ratingStates = angular.isDefined($attrs.ratingStates) ?
      $scope.$parent.$eval($attrs.ratingStates) :
      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
    }
    return states;
  };

  this.getTitle = function(index) {
    if (index >= this.titles.length) {
      return index + 1;
    }

    return this.titles[index];
  };

  $scope.rate = function(value) {
    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
      ngModelCtrl.$setViewValue(newViewValue);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if (!$scope.readonly) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.title = self.getTitle($scope.value - 1);
  };
}])

.directive('uibRating', function() {
  return {
    require: ['uibRating', 'ngModel'],
    restrict: 'A',
    scope: {
      readonly: '=?readOnly',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'UibRatingController',
    templateUrl: 'uib/template/rating/rating.html',
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      ratingCtrl.init(ngModelCtrl);
    }
  };
});

angular.module('ui.bootstrap.tabs', [])

.controller('UibTabsetController', ['$scope', function ($scope) {
  var ctrl = this,
    oldIndex;
  ctrl.tabs = [];

  ctrl.select = function(index, evt) {
    if (!destroyed) {
      var previousIndex = findTabIndex(oldIndex);
      var previousSelected = ctrl.tabs[previousIndex];
      if (previousSelected) {
        previousSelected.tab.onDeselect({
          $event: evt,
          $selectedIndex: index
        });
        if (evt && evt.isDefaultPrevented()) {
          return;
        }
        previousSelected.tab.active = false;
      }

      var selected = ctrl.tabs[index];
      if (selected) {
        selected.tab.onSelect({
          $event: evt
        });
        selected.tab.active = true;
        ctrl.active = selected.index;
        oldIndex = selected.index;
      } else if (!selected && angular.isDefined(oldIndex)) {
        ctrl.active = null;
        oldIndex = null;
      }
    }
  };

  ctrl.addTab = function addTab(tab) {
    ctrl.tabs.push({
      tab: tab,
      index: tab.index
    });
    ctrl.tabs.sort(function(t1, t2) {
      if (t1.index > t2.index) {
        return 1;
      }

      if (t1.index < t2.index) {
        return -1;
      }

      return 0;
    });

    if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
      var newActiveIndex = findTabIndex(tab.index);
      ctrl.select(newActiveIndex);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index;
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].tab === tab) {
        index = i;
        break;
      }
    }

    if (ctrl.tabs[index].index === ctrl.active) {
      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
        index - 1 : index + 1 % ctrl.tabs.length;
      ctrl.select(newActiveTabIndex);
    }

    ctrl.tabs.splice(index, 1);
  };

  $scope.$watch('tabset.active', function(val) {
    if (angular.isDefined(val) && val !== oldIndex) {
      ctrl.select(findTabIndex(val));
    }
  });

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });

  function findTabIndex(index) {
    for (var i = 0; i < ctrl.tabs.length; i++) {
      if (ctrl.tabs[i].index === index) {
        return i;
      }
    }
  }
}])

.directive('uibTabset', function() {
  return {
    transclude: true,
    replace: true,
    scope: {},
    bindToController: {
      active: '=?',
      type: '@'
    },
    controller: 'UibTabsetController',
    controllerAs: 'tabset',
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
    },
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ?
        scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ?
        scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

.directive('uibTab', ['$parse', function($parse) {
  return {
    require: '^uibTabset',
    replace: true,
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || 'uib/template/tabs/tab.html';
    },
    transclude: true,
    scope: {
      heading: '@',
      index: '=?',
      classes: '@?',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    controllerAs: 'tab',
    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
      scope.disabled = false;
      if (attrs.disable) {
        scope.$parent.$watch($parse(attrs.disable), function(value) {
          scope.disabled = !! value;
        });
      }

      if (angular.isUndefined(attrs.index)) {
        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
        } else {
          scope.index = 0;
        }
      }

      if (angular.isUndefined(attrs.classes)) {
        scope.classes = '';
      }

      scope.select = function(evt) {
        if (!scope.disabled) {
          var index;
          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
            if (tabsetCtrl.tabs[i].tab === scope) {
              index = i;
              break;
            }
          }

          tabsetCtrl.select(index, evt);
        }
      };

      tabsetCtrl.addTab(scope);
      scope.$on('$destroy', function() {
        tabsetCtrl.removeTab(scope);
      });

      //We need to transclude later, once the content container is ready.
      //when this link happens, we're inside a tab heading.
      scope.$transcludeFn = transclude;
    }
  };
}])

.directive('uibTabHeadingTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTab',
    link: function(scope, elm) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
})

.directive('uibTabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^uibTabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };

  function isTabHeading(node) {
    return node.tagName && (
      node.hasAttribute('uib-tab-heading') ||
      node.hasAttribute('data-uib-tab-heading') ||
      node.hasAttribute('x-uib-tab-heading') ||
      node.tagName.toLowerCase() === 'uib-tab-heading' ||
      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
      node.tagName.toLowerCase() === 'uib:tab-heading'
    );
  }
});

angular.module('ui.bootstrap.timepicker', [])

.constant('uibTimepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  secondStep: 1,
  showMeridian: true,
  showSeconds: false,
  meridians: null,
  readonlyInput: false,
  mousewheel: true,
  arrowkeys: true,
  showSpinners: true,
  templateUrl: 'uib/template/timepicker/timepicker.html'
})

.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
  var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
  var selected = new Date(),
    watchers = [],
    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
  $element.removeAttr('tabindex');

  this.init = function(ngModelCtrl_, inputs) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.unshift(function(modelValue) {
      return modelValue ? new Date(modelValue) : null;
    });

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1),
        secondsInputEl = inputs.eq(2);

    hoursModelCtrl = hoursInputEl.controller('ngModel');
    minutesModelCtrl = minutesInputEl.controller('ngModel');
    secondsModelCtrl = secondsInputEl.controller('ngModel');

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

    if (mousewheel) {
      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
    if (arrowkeys) {
      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = +value;
    }));
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = +value;
    }));
  }

  var min;
  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
    var dt = new Date(value);
    min = isNaN(dt) ? undefined : dt;
  }));

  var max;
  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
    var dt = new Date(value);
    max = isNaN(dt) ? undefined : dt;
  }));

  var disabled = false;
  if ($attrs.ngDisabled) {
    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
      disabled = value;
    }));
  }

  $scope.noIncrementHours = function() {
    var incrementedSelected = addMinutes(selected, hourStep * 60);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementHours = function() {
    var decrementedSelected = addMinutes(selected, -hourStep * 60);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementMinutes = function() {
    var incrementedSelected = addMinutes(selected, minuteStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementMinutes = function() {
    var decrementedSelected = addMinutes(selected, -minuteStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noIncrementSeconds = function() {
    var incrementedSelected = addSeconds(selected, secondStep);
    return disabled || incrementedSelected > max ||
      incrementedSelected < selected && incrementedSelected < min;
  };

  $scope.noDecrementSeconds = function() {
    var decrementedSelected = addSeconds(selected, -secondStep);
    return disabled || decrementedSelected < min ||
      decrementedSelected > selected && decrementedSelected > max;
  };

  $scope.noToggleMeridian = function() {
    if (selected.getHours() < 12) {
      return disabled || addMinutes(selected, 12 * 60) > max;
    }

    return disabled || addMinutes(selected, -12 * 60) < min;
  };

  var secondStep = timepickerConfig.secondStep;
  if ($attrs.secondStep) {
    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
      secondStep = +value;
    }));
  }

  $scope.showSeconds = timepickerConfig.showSeconds;
  if ($attrs.showSeconds) {
    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
      $scope.showSeconds = !!value;
    }));
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if (ngModelCtrl.$error.time) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
          selected.setHours(hours);
          refresh();
        }
      } else {
        updateTemplate();
      }
    }));
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate() {
    var hours = +$scope.hours;
    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
      hours >= 0 && hours < 24;
    if (!valid || $scope.hours === '') {
      return undefined;
    }

    if ($scope.showMeridian) {
      if (hours === 12) {
        hours = 0;
      }
      if ($scope.meridian === meridians[1]) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = +$scope.minutes;
    var valid = minutes >= 0 && minutes < 60;
    if (!valid || $scope.minutes === '') {
      return undefined;
    }
    return minutes;
  }

  function getSecondsFromTemplate() {
    var seconds = +$scope.seconds;
    return seconds >= 0 && seconds < 60 ? seconds : undefined;
  }

  function pad(value, noPad) {
    if (value === null) {
      return '';
    }

    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
      '0' + value : value.toString();
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
      return e.detail || delta > 0;
    };

    hoursInputEl.bind('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
      }
      e.preventDefault();
    });

    minutesInputEl.bind('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
      }
      e.preventDefault();
    });

     secondsInputEl.bind('mousewheel wheel', function(e) {
      if (!disabled) {
        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
      }
      e.preventDefault();
    });
  };

  // Respond on up/down arrowkeys
  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    hoursInputEl.bind('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementHours();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementHours();
          $scope.$apply();
        }
      }
    });

    minutesInputEl.bind('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementMinutes();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementMinutes();
          $scope.$apply();
        }
      }
    });

    secondsInputEl.bind('keydown', function(e) {
      if (!disabled) {
        if (e.which === 38) { // up
          e.preventDefault();
          $scope.incrementSeconds();
          $scope.$apply();
        } else if (e.which === 40) { // down
          e.preventDefault();
          $scope.decrementSeconds();
          $scope.$apply();
        }
      }
    });
  };

  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
    if ($scope.readonlyInput) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      $scope.updateSeconds = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
      ngModelCtrl.$setViewValue(null);
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
        if (hoursModelCtrl) {
          hoursModelCtrl.$setValidity('hours', false);
        }
      }

      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
        if (minutesModelCtrl) {
          minutesModelCtrl.$setValidity('minutes', false);
        }
      }

      if (angular.isDefined(invalidSeconds)) {
        $scope.invalidSeconds = invalidSeconds;
        if (secondsModelCtrl) {
          secondsModelCtrl.$setValidity('seconds', false);
        }
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate(),
        minutes = getMinutesFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(true);
        } else {
          refresh('h');
        }
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.bind('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.hours === null || $scope.hours === '') {
        invalidate(true);
      } else if (!$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply(function() {
          $scope.hours = pad($scope.hours, !padHours);
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        selected.setHours(hours);
        selected.setMinutes(minutes);
        if (selected < min || selected > max) {
          invalidate(undefined, true);
        } else {
          refresh('m');
        }
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.bind('blur', function(e) {
      ngModelCtrl.$setTouched();
      if (modelIsEmpty()) {
        makeValid();
      } else if ($scope.minutes === null) {
        invalidate(undefined, true);
      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
        $scope.$apply(function() {
          $scope.minutes = pad($scope.minutes);
        });
      }
    });

    $scope.updateSeconds = function() {
      var seconds = getSecondsFromTemplate();

      ngModelCtrl.$setDirty();

      if (angular.isDefined(seconds)) {
        selected.setSeconds(seconds);
        refresh('s');
      } else {
        invalidate(undefined, undefined, true);
      }
    };

    secondsInputEl.bind('blur', function(e) {
      if (modelIsEmpty()) {
        makeValid();
      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
        $scope.$apply( function() {
          $scope.seconds = pad($scope.seconds);
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$viewValue;

    if (isNaN(date)) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if (date) {
        selected = date;
      }

      if (selected < min || selected > max) {
        ngModelCtrl.$setValidity('time', false);
        $scope.invalidHours = true;
        $scope.invalidMinutes = true;
      } else {
        makeValid();
      }
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh(keyboardChange) {
    makeValid();
    ngModelCtrl.$setViewValue(new Date(selected));
    updateTemplate(keyboardChange);
  }

  function makeValid() {
    if (hoursModelCtrl) {
      hoursModelCtrl.$setValidity('hours', true);
    }

    if (minutesModelCtrl) {
      minutesModelCtrl.$setValidity('minutes', true);
    }

    if (secondsModelCtrl) {
      secondsModelCtrl.$setValidity('seconds', true);
    }

    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
    $scope.invalidSeconds = false;
  }

  function updateTemplate(keyboardChange) {
    if (!ngModelCtrl.$modelValue) {
      $scope.hours = null;
      $scope.minutes = null;
      $scope.seconds = null;
      $scope.meridian = meridians[0];
    } else {
      var hours = selected.getHours(),
        minutes = selected.getMinutes(),
        seconds = selected.getSeconds();

      if ($scope.showMeridian) {
        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
      }

      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
      if (keyboardChange !== 'm') {
        $scope.minutes = pad(minutes);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

      if (keyboardChange !== 's') {
        $scope.seconds = pad(seconds);
      }
      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
    }
  }

  function addSecondsToSelected(seconds) {
    selected = addSeconds(selected, seconds);
    refresh();
  }

  function addMinutes(selected, minutes) {
    return addSeconds(selected, minutes*60);
  }

  function addSeconds(date, seconds) {
    var dt = new Date(date.getTime() + seconds * 1000);
    var newDate = new Date(date);
    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
    return newDate;
  }

  function modelIsEmpty() {
    return ($scope.hours === null || $scope.hours === '') &&
      ($scope.minutes === null || $scope.minutes === '') &&
      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
  }

  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

  $scope.incrementHours = function() {
    if (!$scope.noIncrementHours()) {
      addSecondsToSelected(hourStep * 60 * 60);
    }
  };

  $scope.decrementHours = function() {
    if (!$scope.noDecrementHours()) {
      addSecondsToSelected(-hourStep * 60 * 60);
    }
  };

  $scope.incrementMinutes = function() {
    if (!$scope.noIncrementMinutes()) {
      addSecondsToSelected(minuteStep * 60);
    }
  };

  $scope.decrementMinutes = function() {
    if (!$scope.noDecrementMinutes()) {
      addSecondsToSelected(-minuteStep * 60);
    }
  };

  $scope.incrementSeconds = function() {
    if (!$scope.noIncrementSeconds()) {
      addSecondsToSelected(secondStep);
    }
  };

  $scope.decrementSeconds = function() {
    if (!$scope.noDecrementSeconds()) {
      addSecondsToSelected(-secondStep);
    }
  };

  $scope.toggleMeridian = function() {
    var minutes = getMinutesFromTemplate(),
        hours = getHoursFromTemplate();

    if (!$scope.noToggleMeridian()) {
      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
      } else {
        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
      }
    }
  };

  $scope.blur = function() {
    ngModelCtrl.$setTouched();
  };

  $scope.$on('$destroy', function() {
    while (watchers.length) {
      watchers.shift()();
    }
  });
}])

.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
  return {
    require: ['uibTimepicker', '?^ngModel'],
    restrict: 'A',
    controller: 'UibTimepickerController',
    controllerAs: 'timepicker',
    scope: {},
    templateUrl: function(element, attrs) {
      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
    },
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (ngModelCtrl) {
        timepickerCtrl.init(ngModelCtrl, element.find('input'));
      }
    }
  };
}]);

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('uibTypeaheadParser', ['$parse', function($parse) {
    //                      000001111111100000000000002222222200000000000000003333333333333330000000000044444444000
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
      parse: function(input) {
        var match = input.match(TYPEAHEAD_REGEXP);
        if (!match) {
          throw new Error(
            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
              ' but got "' + input + '".');
        }

        return {
          itemName: match[3],
          source: $parse(match[4]),
          viewMapper: $parse(match[2] || match[1]),
          modelMapper: $parse(match[1])
        };
      }
    };
  }])

  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
    var HOT_KEYS = [9, 13, 27, 38, 40];
    var eventDebounceTime = 200;
    var modelCtrl, ngModelOptions;
    //SUPPORTED ATTRIBUTES (OPTIONS)

    //minimal no of characters that needs to be entered before typeahead kicks-in
    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
    if (!minLength && minLength !== 0) {
      minLength = 1;
    }

    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal;
    });

    //minimal wait time after last character typed before typeahead kicks-in
    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

    //should it restrict model values to the ones selected from the popup only?
    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
      isEditable = newVal !== false;
    });

    //binding to a variable that indicates if matches are being retrieved asynchronously
    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

    //a function to determine if an event should cause selection
    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
      var evt = vals.$event;
      return evt.which === 13 || evt.which === 9;
    };

    //a callback executed when a match is selected
    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

    //should it select highlighted popup value when losing focus?
    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

    //binding to a variable that indicates if there were no results after the query is completed
    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

    var appendTo = attrs.typeaheadAppendTo ?
      originalScope.$eval(attrs.typeaheadAppendTo) : null;

    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

    //If input matches an item of the list exactly, select it automatically
    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

    //binding to a variable that indicates if dropdown is open
    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

    //INTERNAL VARIABLES

    //model setter executed upon match selection
    var parsedModel = $parse(attrs.ngModel);
    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
    var $setModelValue = function(scope, newValue) {
      if (angular.isFunction(parsedModel(originalScope)) &&
        ngModelOptions && ngModelOptions.$options && ngModelOptions.$options.getterSetter) {
        return invokeModelSetter(scope, {$$$p: newValue});
      }

      return parsedModel.assign(scope, newValue);
    };

    //expressions used by typeahead
    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

    var hasFocus;

    //Used to avoid bug in iOS webview where iOS keyboard does not fire
    //mousedown & mouseup events
    //Issue #3699
    var selected;

    //create a child scope for the typeahead directive so we are not polluting original scope
    //with typeahead-specific data (matches, query etc.)
    var scope = originalScope.$new();
    var offDestroy = originalScope.$on('$destroy', function() {
      scope.$destroy();
    });
    scope.$on('$destroy', offDestroy);

    // WAI-ARIA
    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
    element.attr({
      'aria-autocomplete': 'list',
      'aria-expanded': false,
      'aria-owns': popupId
    });

    var inputsContainer, hintInputElem;
    //add read-only input to show hint
    if (showHint) {
      inputsContainer = angular.element('<div></div>');
      inputsContainer.css('position', 'relative');
      element.after(inputsContainer);
      hintInputElem = element.clone();
      hintInputElem.attr('placeholder', '');
      hintInputElem.attr('tabindex', '-1');
      hintInputElem.val('');
      hintInputElem.css({
        'position': 'absolute',
        'top': '0px',
        'left': '0px',
        'border-color': 'transparent',
        'box-shadow': 'none',
        'opacity': 1,
        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
        'color': '#999'
      });
      element.css({
        'position': 'relative',
        'vertical-align': 'top',
        'background-color': 'transparent'
      });

      if (hintInputElem.attr('id')) {
        hintInputElem.removeAttr('id'); // remove duplicate id if present.
      }
      inputsContainer.append(hintInputElem);
      hintInputElem.after(element);
    }

    //pop-up element used to display matches
    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
    popUpEl.attr({
      id: popupId,
      matches: 'matches',
      active: 'activeIdx',
      select: 'select(activeIdx, evt)',
      'move-in-progress': 'moveInProgress',
      query: 'query',
      position: 'position',
      'assign-is-open': 'assignIsOpen(isOpen)',
      debounce: 'debounceUpdate'
    });
    //custom item template
    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
    }

    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
    }

    var resetHint = function() {
      if (showHint) {
        hintInputElem.val('');
      }
    };

    var resetMatches = function() {
      scope.matches = [];
      scope.activeIdx = -1;
      element.attr('aria-expanded', false);
      resetHint();
    };

    var getMatchId = function(index) {
      return popupId + '-option-' + index;
    };

    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
    // This attribute is added or removed automatically when the `activeIdx` changes.
    scope.$watch('activeIdx', function(index) {
      if (index < 0) {
        element.removeAttr('aria-activedescendant');
      } else {
        element.attr('aria-activedescendant', getMatchId(index));
      }
    });

    var inputIsExactMatch = function(inputValue, index) {
      if (scope.matches.length > index && inputValue) {
        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
      }

      return false;
    };

    var getMatchesAsync = function(inputValue, evt) {
      var locals = {$viewValue: inputValue};
      isLoadingSetter(originalScope, true);
      isNoResultsSetter(originalScope, false);
      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
        //it might happen that several async queries were in progress if a user were typing fast
        //but we are interested only in responses that correspond to the current view value
        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
        if (onCurrentRequest && hasFocus) {
          if (matches && matches.length > 0) {
            scope.activeIdx = focusFirst ? 0 : -1;
            isNoResultsSetter(originalScope, false);
            scope.matches.length = 0;

            //transform labels
            for (var i = 0; i < matches.length; i++) {
              locals[parserResult.itemName] = matches[i];
              scope.matches.push({
                id: getMatchId(i),
                label: parserResult.viewMapper(scope, locals),
                model: matches[i]
              });
            }

            scope.query = inputValue;
            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
            //due to other elements being rendered
            recalculatePosition();

            element.attr('aria-expanded', true);

            //Select the single remaining option if user input matches
            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(0, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
              } else {
                scope.select(0, evt);
              }
            }

            if (showHint) {
              var firstLabel = scope.matches[0].label;
              if (angular.isString(inputValue) &&
                inputValue.length > 0 &&
                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
              } else {
                hintInputElem.val('');
              }
            }
          } else {
            resetMatches();
            isNoResultsSetter(originalScope, true);
          }
        }
        if (onCurrentRequest) {
          isLoadingSetter(originalScope, false);
        }
      }, function() {
        resetMatches();
        isLoadingSetter(originalScope, false);
        isNoResultsSetter(originalScope, true);
      });
    };

    // bind events only if appendToBody params exist - performance feature
    if (appendToBody) {
      angular.element($window).on('resize', fireRecalculating);
      $document.find('body').on('scroll', fireRecalculating);
    }

    // Declare the debounced function outside recalculating for
    // proper debouncing
    var debouncedRecalculate = $$debounce(function() {
      // if popup is visible
      if (scope.matches.length) {
        recalculatePosition();
      }

      scope.moveInProgress = false;
    }, eventDebounceTime);

    // Default progress type
    scope.moveInProgress = false;

    function fireRecalculating() {
      if (!scope.moveInProgress) {
        scope.moveInProgress = true;
        scope.$digest();
      }

      debouncedRecalculate();
    }

    // recalculate actual position and set new values to scope
    // after digest loop is popup in right position
    function recalculatePosition() {
      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
      scope.position.top += element.prop('offsetHeight');
    }

    //we need to propagate user's query so we can higlight matches
    scope.query = undefined;

    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
    var timeoutPromise;

    var scheduleSearchWithTimeout = function(inputValue) {
      timeoutPromise = $timeout(function() {
        getMatchesAsync(inputValue);
      }, waitTime);
    };

    var cancelPreviousTimeout = function() {
      if (timeoutPromise) {
        $timeout.cancel(timeoutPromise);
      }
    };

    resetMatches();

    scope.assignIsOpen = function (isOpen) {
      isOpenSetter(originalScope, isOpen);
    };

    scope.select = function(activeIdx, evt) {
      //called from within the $digest() cycle
      var locals = {};
      var model, item;

      selected = true;
      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
      model = parserResult.modelMapper(originalScope, locals);
      $setModelValue(originalScope, model);
      modelCtrl.$setValidity('editable', true);
      modelCtrl.$setValidity('parse', true);

      onSelectCallback(originalScope, {
        $item: item,
        $model: model,
        $label: parserResult.viewMapper(originalScope, locals),
        $event: evt
      });

      resetMatches();

      //return focus to the input element if a match was selected via a mouse click event
      // use timeout to avoid $rootScope:inprog error
      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
        $timeout(function() { element[0].focus(); }, 0, false);
      }
    };

    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
    element.on('keydown', function(evt) {
      //typeahead is open and an "interesting" key was pressed
      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
        return;
      }

      var shouldSelect = isSelectEvent(originalScope, {$event: evt});

      /**
       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
       * or
       * shift + tab is pressed to bring focus to the previous element
       * then clear the results
       */
      if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
        resetMatches();
        scope.$digest();
        return;
      }

      evt.preventDefault();
      var target;
      switch (evt.which) {
        case 27: // escape
          evt.stopPropagation();

          resetMatches();
          originalScope.$digest();
          break;
        case 38: // up arrow
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        case 40: // down arrow
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();
          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
          target.parentNode.scrollTop = target.offsetTop;
          break;
        default:
          if (shouldSelect) {
            scope.$apply(function() {
              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                $$debounce(function() {
                  scope.select(scope.activeIdx, evt);
                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
              } else {
                scope.select(scope.activeIdx, evt);
              }
            });
          }
      }
    });

    element.bind('focus', function (evt) {
      hasFocus = true;
      if (minLength === 0 && !modelCtrl.$viewValue) {
        $timeout(function() {
          getMatchesAsync(modelCtrl.$viewValue, evt);
        }, 0);
      }
    });

    element.bind('blur', function(evt) {
      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
        selected = true;
        scope.$apply(function() {
          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
            $$debounce(function() {
              scope.select(scope.activeIdx, evt);
            }, scope.debounceUpdate.blur);
          } else {
            scope.select(scope.activeIdx, evt);
          }
        });
      }
      if (!isEditable && modelCtrl.$error.editable) {
        modelCtrl.$setViewValue();
        scope.$apply(function() {
          // Reset validity as we are clearing
          modelCtrl.$setValidity('editable', true);
          modelCtrl.$setValidity('parse', true);
        });
        element.val('');
      }
      hasFocus = false;
      selected = false;
    });

    // Keep reference to click handler to unbind it.
    var dismissClickHandler = function(evt) {
      // Issue #3973
      // Firefox treats right click as a click on document
      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
        resetMatches();
        if (!$rootScope.$$phase) {
          originalScope.$digest();
        }
      }
    };

    $document.on('click', dismissClickHandler);

    originalScope.$on('$destroy', function() {
      $document.off('click', dismissClickHandler);
      if (appendToBody || appendTo) {
        $popup.remove();
      }

      if (appendToBody) {
        angular.element($window).off('resize', fireRecalculating);
        $document.find('body').off('scroll', fireRecalculating);
      }
      // Prevent jQuery cache memory leak
      popUpEl.remove();

      if (showHint) {
          inputsContainer.remove();
      }
    });

    var $popup = $compile(popUpEl)(scope);

    if (appendToBody) {
      $document.find('body').append($popup);
    } else if (appendTo) {
      angular.element(appendTo).eq(0).append($popup);
    } else {
      element.after($popup);
    }

    this.init = function(_modelCtrl, _ngModelOptions) {
      modelCtrl = _modelCtrl;
      ngModelOptions = _ngModelOptions;

      scope.debounceUpdate = modelCtrl.$options && $parse(modelCtrl.$options.debounce)(originalScope);

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function(inputValue) {
        hasFocus = true;

        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        }

        if (!inputValue) {
          // Reset in case user had typed something previously.
          modelCtrl.$setValidity('editable', true);
          return null;
        }

        modelCtrl.$setValidity('editable', false);
        return undefined;
      });

      modelCtrl.$formatters.push(function(modelValue) {
        var candidateViewValue, emptyViewValue;
        var locals = {};

        // The validity may be set to false via $parsers (see above) if
        // the model is restricted to selected values. If the model
        // is set manually it is considered to be valid.
        if (!isEditable) {
          modelCtrl.$setValidity('editable', true);
        }

        if (inputFormatter) {
          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);
        }

        //it might happen that we don't have enough info to properly render input value
        //we need to check for this situation and simply return model value if we can't apply custom formatting
        locals[parserResult.itemName] = modelValue;
        candidateViewValue = parserResult.viewMapper(originalScope, locals);
        locals[parserResult.itemName] = undefined;
        emptyViewValue = parserResult.viewMapper(originalScope, locals);

        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
      });
    };
  }])

  .directive('uibTypeahead', function() {
    return {
      controller: 'UibTypeaheadController',
      require: ['ngModel', '^?ngModelOptions', 'uibTypeahead'],
      link: function(originalScope, element, attrs, ctrls) {
        ctrls[2].init(ctrls[0], ctrls[1]);
      }
    };
  })

  .directive('uibTypeaheadPopup', ['$$debounce', function($$debounce) {
    return {
      scope: {
        matches: '=',
        query: '=',
        active: '=',
        position: '&',
        moveInProgress: '=',
        select: '&',
        assignIsOpen: '&',
        debounce: '&'
      },
      replace: true,
      templateUrl: function(element, attrs) {
        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
      },
      link: function(scope, element, attrs) {
        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function() {
          var isDropdownOpen = scope.matches.length > 0;
          scope.assignIsOpen({ isOpen: isDropdownOpen });
          return isDropdownOpen;
        };

        scope.isActive = function(matchIdx) {
          return scope.active === matchIdx;
        };

        scope.selectActive = function(matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function(activeIdx, evt) {
          var debounce = scope.debounce();
          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
            $$debounce(function() {
              scope.select({activeIdx: activeIdx, evt: evt});
            }, angular.isNumber(debounce) ? debounce : debounce['default']);
          } else {
            scope.select({activeIdx: activeIdx, evt: evt});
          }
        };
      }
    };
  }])

  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
    return {
      scope: {
        index: '=',
        match: '=',
        query: '='
      },
      link: function(scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
        $templateRequest(tplUrl).then(function(tplContent) {
          var tplEl = angular.element(tplContent.trim());
          element.replaceWith(tplEl);
          $compile(tplEl)(scope);
        });
      }
    };
  }])

  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has('$sanitize');

    function escapeRegexp(queryToEscape) {
      // Regex: capture the whole query string and replace it with the string that will be used to match
      // the results, for example if the capture is "a" the result will be \a
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    function containsHtml(matchItem) {
      return /<.*>/g.test(matchItem);
    }

    return function(matchItem, query) {
      if (!isSanitizePresent && containsHtml(matchItem)) {
        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
      }
      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
      if (!isSanitizePresent) {
        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
      }
      return matchItem;
    };
  }]);

angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/accordion/accordion-group.html",
    "<div role=\"tab\" id=\"{{::headingId}}\" aria-selected=\"{{isOpen}}\" class=\"panel-heading\" ng-keypress=\"toggleOpen($event)\">\n" +
    "  <h4 class=\"panel-title\">\n" +
    "    <a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\" ng-disabled=\"isDisabled\" uib-tabindex-toggle><span uib-accordion-header ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "  </h4>\n" +
    "</div>\n" +
    "<div id=\"{{::panelId}}\" aria-labelledby=\"{{::headingId}}\" aria-hidden=\"{{!isOpen}}\" role=\"tabpanel\" class=\"panel-collapse collapse\" uib-collapse=\"!isOpen\">\n" +
    "  <div class=\"panel-body\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/accordion/accordion.html",
    "<div role=\"tablist\" class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/alert/alert.html",
    "<button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close({$event: $event})\">\n" +
    "  <span aria-hidden=\"true\">&times;</span>\n" +
    "  <span class=\"sr-only\">Close</span>\n" +
    "</button>\n" +
    "<div ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/carousel/carousel.html",
    "<div class=\"carousel-inner\" ng-transclude></div>\n" +
    "<a role=\"button\" href class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
    "  <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></span>\n" +
    "  <span class=\"sr-only\">previous</span>\n" +
    "</a>\n" +
    "<a role=\"button\" href class=\"right carousel-control\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
    "  <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></span>\n" +
    "  <span class=\"sr-only\">next</span>\n" +
    "</a>\n" +
    "<ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
    "  <li ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
    "    <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
    "  </li>\n" +
    "</ol>\n" +
    "");
}]);

angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/carousel/slide.html",
    "<div class=\"text-center\" ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepicker/datepicker.html",
    "<div ng-switch=\"datepickerMode\">\n" +
    "  <div uib-daypicker ng-switch-when=\"day\" tabindex=\"0\" class=\"uib-daypicker\"></div>\n" +
    "  <div uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\" class=\"uib-monthpicker\"></div>\n" +
    "  <div uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\" class=\"uib-yearpicker\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepicker/day.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
    "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-day text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-default btn-sm\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-info' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepicker/month.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::yearHeaderColspan}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-default\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-info' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepicker/year.html",
    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
    "        id=\"{{::dt.uid}}\"\n" +
    "        ng-class=\"::dt.customClass\">\n" +
    "        <button type=\"button\" class=\"btn btn-default\"\n" +
    "          uib-is-class=\"\n" +
    "            'btn-info' for selectedDt,\n" +
    "            'active' for activeDt\n" +
    "            on dt\"\n" +
    "          ng-click=\"select(dt.date)\"\n" +
    "          ng-disabled=\"::dt.disabled\"\n" +
    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/datepickerPopup/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/datepickerPopup/popup.html",
    "<ul role=\"presentation\" class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
    "  <li ng-transclude></li>\n" +
    "  <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
    "    <span class=\"btn-group pull-left\">\n" +
    "      <button type=\"button\" class=\"btn btn-sm btn-info uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
    "      <button type=\"button\" class=\"btn btn-sm btn-danger uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
    "    </span>\n" +
    "    <button type=\"button\" class=\"btn btn-sm btn-success pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
    "  </li>\n" +
    "</ul>\n" +
    "");
}]);

angular.module("uib/template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/modal/window.html",
    "<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
    "");
}]);

angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/pager/pager.html",
    "<li ng-class=\"{disabled: noPrevious()||ngDisabled, previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
    "<li ng-class=\"{disabled: noNext()||ngDisabled, next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
    "");
}]);

angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/pagination/pagination.html",
    "<li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-first\"><a href ng-click=\"selectPage(1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('first')}}</a></li>\n" +
    "<li ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-prev\"><a href ng-click=\"selectPage(page - 1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
    "<li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\" class=\"pagination-page\"><a href ng-click=\"selectPage(page.number, $event)\" ng-disabled=\"ngDisabled&&!page.active\" uib-tabindex-toggle>{{page.text}}</a></li>\n" +
    "<li ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-next\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
    "<li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-last\"><a href ng-click=\"selectPage(totalPages, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('last')}}</a></li>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-html-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "");
}]);

angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/tooltip/tooltip-template-popup.html",
    "<div class=\"tooltip-arrow\"></div>\n" +
    "<div class=\"tooltip-inner\"\n" +
    "  uib-tooltip-template-transclude=\"contentExp()\"\n" +
    "  tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/popover/popover-html.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/popover/popover-template.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\"\n" +
    "      uib-tooltip-template-transclude=\"contentExp()\"\n" +
    "      tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/popover/popover.html",
    "<div class=\"arrow\"></div>\n" +
    "\n" +
    "<div class=\"popover-inner\">\n" +
    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
    "    <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/progressbar/bar.html",
    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
    "");
}]);

angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/progressbar/progress.html",
    "<div class=\"progress\" ng-transclude aria-labelledby=\"{{::title}}\"></div>");
}]);

angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/progressbar/progressbar.html",
    "<div class=\"progress\">\n" +
    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\" aria-valuetext=\"{{title}}\">\n" +
    "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
    "    <i ng-repeat-end ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\" ng-attr-title=\"{{r.title}}\"></i>\n" +
    "</span>\n" +
    "");
}]);

angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/tabs/tab.html",
    "<li ng-class=\"[{active: active, disabled: disabled}, classes]\" class=\"uib-tab nav-item\">\n" +
    "  <a href ng-click=\"select($event)\" class=\"nav-link\" uib-tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\"\n" +
    "         ng-repeat=\"tab in tabset.tabs\"\n" +
    "         ng-class=\"{active: tabset.active === tab.index}\"\n" +
    "         uib-tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/timepicker/timepicker.html",
    "<table class=\"uib-timepicker\">\n" +
    "  <tbody>\n" +
    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
    "      <td class=\"uib-increment hours\"><a ng-click=\"incrementHours()\" ng-class=\"{disabled: noIncrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementHours()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "      <td>&nbsp;</td>\n" +
    "      <td class=\"uib-increment minutes\"><a ng-click=\"incrementMinutes()\" ng-class=\"{disabled: noIncrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementMinutes()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-increment seconds\"><a ng-click=\"incrementSeconds()\" ng-class=\"{disabled: noIncrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementSeconds()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "      <td ng-show=\"showMeridian\"></td>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <td class=\"form-group uib-time hours\" ng-class=\"{'has-error': invalidHours}\">\n" +
    "        <input type=\"text\" placeholder=\"HH\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementHours()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td class=\"uib-separator\">:</td>\n" +
    "      <td class=\"form-group uib-time minutes\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
    "        <input type=\"text\" placeholder=\"MM\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementMinutes()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-separator\">:</td>\n" +
    "      <td class=\"form-group uib-time seconds\" ng-class=\"{'has-error': invalidSeconds}\" ng-show=\"showSeconds\">\n" +
    "        <input type=\"text\" placeholder=\"SS\" ng-model=\"seconds\" ng-change=\"updateSeconds()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementSeconds()\" ng-blur=\"blur()\">\n" +
    "      </td>\n" +
    "      <td ng-show=\"showMeridian\" class=\"uib-time am-pm\"><button type=\"button\" ng-class=\"{disabled: noToggleMeridian()}\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\" ng-disabled=\"noToggleMeridian()\" tabindex=\"{{::tabindex}}\">{{meridian}}</button></td>\n" +
    "    </tr>\n" +
    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
    "      <td class=\"uib-decrement hours\"><a ng-click=\"decrementHours()\" ng-class=\"{disabled: noDecrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementHours()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "      <td>&nbsp;</td>\n" +
    "      <td class=\"uib-decrement minutes\"><a ng-click=\"decrementMinutes()\" ng-class=\"{disabled: noDecrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementMinutes()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
    "      <td ng-show=\"showSeconds\" class=\"uib-decrement seconds\"><a ng-click=\"decrementSeconds()\" ng-class=\"{disabled: noDecrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementSeconds()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "      <td ng-show=\"showMeridian\"></td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/typeahead/typeahead-match.html",
    "<a href\n" +
    "   tabindex=\"-1\"\n" +
    "   ng-bind-html=\"match.label | uibTypeaheadHighlight:query\"\n" +
    "   ng-attr-title=\"{{match.label}}\"></a>\n" +
    "");
}]);

angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("uib/template/typeahead/typeahead-popup.html",
    "<ul class=\"dropdown-menu\" ng-show=\"isOpen() && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
    "    <li class=\"uib-typeahead-match\" ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index, $event)\" role=\"option\" id=\"{{::match.id}}\">\n" +
    "        <div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
    "    </li>\n" +
    "</ul>\n" +
    "");
}]);
angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });
},{}],6:[function(require,module,exports){
require('./dist/ui-bootstrap-tpls');

module.exports = 'ui.bootstrap';

},{"./dist/ui-bootstrap-tpls":5}],7:[function(require,module,exports){
/**
 * @author Manuel Mazzuola
 * https://github.com/manuelmazzuola/angular-ui-router-styles
 * Inspired by https://github.com/tennisgent/angular-route-styles
 */

(function() {
  'use strict';
  angular
    .module('uiRouterStyles', ['ui.router'])
    .directive('head', uiRouterStylesDirective);

  uiRouterStylesDirective.$inject = ['$rootScope', '$compile', '$state', '$interpolate'];
  function uiRouterStylesDirective($rootScope, $compile, $state, $interpolate) {
    var directive = {
      restrict: 'E',
      link: uiRouterStylesLink
    };

    return directive;

    function uiRouterStylesLink(scope, elem) {
      var start = $interpolate.startSymbol(), end = $interpolate.endSymbol();
      var html = '<link rel="stylesheet" ng-repeat="(k, css) in routeStyles track by k" ng-href="' + start + 'css' + end + '" >';

      scope.routeStyles = [];

      activate();

      ////

      function activate() {
        elem.append($compile(html)(scope));
        $rootScope.$on('$stateChangeSuccess', stateChangeSuccessCallback);
      }

      // Get the parent state
      function $$parentState(state) {
        // Check if state has explicit parent OR we try guess parent from its name
        var name = state.parent || (/^(.+)\.[^.]+$/.exec(state.name) || [])[1];
        // If we were able to figure out parent name then get this state
        return name && $state.get(name);
      }

      function stateChangeSuccessCallback(evt, toState) {
        // From current state to the root
        scope.routeStyles = [];
        for(var state = toState; state && state.name !== ''; state=$$parentState(state)) {
          if(state && state.data && state.data.css) {
            if(!Array.isArray(state.data.css)) {
              state.data.css = [state.data.css];
            }
            angular.forEach(state.data.css, function(css) {
              if(scope.routeStyles.indexOf(css) === -1) {
                scope.routeStyles.push(css);
              }
            });
          }
        }
        scope.routeStyles.reverse();
      }
    }
  }
})();

},{}],8:[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.3.1
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy,
    toJson = angular.toJson;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i] || !parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 *
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 *
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 *
 * ## The main module for ui.router
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes.
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router -
 *
 * *You'll need to include **only** this module as the dependency within your angular app.*
 *
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {

  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });


  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study`
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});

    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;

      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;

      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }

      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required

    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }

    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }

      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;

      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values);
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }

      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }

      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }
        parent.then(done, fail);
      }

      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }

      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }

      return result;
    };
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via
   * `$injector.invoke()`, and can have an arbitrary number of dependencies.
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the
   * resulting value will be used instead. Dependencies of invocables are resolved
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve`
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises
   * returned by injectables have been resolved. If any invocable
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an
   * invocable is rejected, the `$resolve` promise is immediately rejected with the
   * same error. A rejection of a `parent` promise (if specified) will likewise be
   * propagated immediately. Once the `$resolve` promise has been rejected, no
   * further invocables will be called.
   *
   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter
   * with the same name as the injectable, which will be fulfilled from the `parent`
   * injectable of the same name. This allows inherited values to be decorated.
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous)
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available.
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to
   * be a service name to be passed to `$injector.get()`. This is supported primarily
   * for backwards-compatibility with the `resolve` property of `$routeProvider`
   * routes.
   *
   * @param {object} invocables functions to invoke or
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object.
   *
   * @param {object} config Configuration object for which to load a template.
   * The following properties are search in the specified order, and the first one
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash, optional) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
      case true:
        result = result.replace(/\/$/, '');
        surroundPattern = ['(?:\/(', ')|\/)?'];
      break;
      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

    if (regexp) {
      type      = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
    }

    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  var param, paramVal;
  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    param = this.params[paramName];
    paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace.length; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
    param = this.params[paramName];
    paramVal = searchParams[paramName];
    for (j = 0; j < param.replace.length; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
    values[paramName] = param.value(paramVal);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validates
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      var isFinalPathParam = i + 1 === nPath;

      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }

      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      if (encoded.length === 0) continue;
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/** Given an encoded string, or a decoded object, returns a decoded object */
Type.prototype.$normalize = function(val) {
  return this.is(val) ? val : this.decode(val);
};

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        if (isArray(val) && val.length === 0) return val;
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
    this.name = type.name;
    this.$arrayMode = mode;
  }

  return new ArrayType(this, mode);
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  // Use tildes to pre-encode slashes.
  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
  // and bidirectional encoding/decoding fails.
  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
  function valToString(val) { return val != null ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val; }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    "string": {
      encode: valToString,
      decode: valFromString,
      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
      // In 0.2.x, string params are optional by default for backwards compat
      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
      pattern: /[^/]*/
    },
    "int": {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    "bool": {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    "date": {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    "json": {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    "any": { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);

      if (angular.isString(config.type))
        return $types[config.type];
      if (config.type instanceof Type)
        return config.type;
      return new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      var defaultValue = injector.invoke(config.$$fn);
      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
      return defaultValue;
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
      for (i = 0; i < keys.length; i++) {
        param = this[keys[i]];
        rawVal = paramValues[keys[i]];
        if ((rawVal === undefined || rawVal === null) && param.isOptional)
          break; // There was no parameter value, but the param is optional
        normalized = param.type.$normalize(rawVal);
        if (!param.type.is(normalized))
          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
        encoded = param.type.encode(normalized);
        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
      }
      return true;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`.
 * When `$location` changes it runs through a list of rules one by one until a
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {function} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|function} rule The url path you want to redirect to or a function
   * rule that returns the url path. The function version is passed two params:
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching.
   *
   * If the handler is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|function} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
      //if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
         var url = urlMatcher.format(params || {});

        // Handle the special hash param, if needed
        if (url !== null && params && params['#']) {
            url += '#' + params['#'];
        }

        $location.url(url);
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }

        isHtml5 = isHtml5 && $sniffer.history;

        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        // Handle special hash param, if needed
        if (url !== null && params && params['#']) {
          url += '#' + params['#'];
        }

        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = inherit(state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      var ownParams = pick(state.ownParams, state.ownParams.$$keys());
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);

      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the
   * `stateBuilder` object used internally by `$stateProvider`. This can be used
   * to add custom functionality to ui-router, for example inferring templateUrl
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new
   * properties within the state's internal definition. There is currently no clear
   * use-case for this beyond accessing internal states (i.e. $state.$current),
   * however, expect this to become increasingly relevant as we introduce additional
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of
   * execution of the builder functions in non-deterministic. Builder functions
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view
   *   name (i.e. "viewName@stateName") and each value is the config object
   *   (template, controller) for the view. Even when you don't use the views object
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state,
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state.
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate.
   * @param {object} func A function that is responsible for decorating the original
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property
   *   takes precedence over templateUrl.
   *
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   *
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises,
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,
   *     it is injected and return value it treated as dependency. If result is a promise, it is
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, {
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, {
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload(state) {
      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls
     * `$state.transitionTo` internally but automatically sets options to
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
     * This allows you to easily use an absolute or relative to path and specify
     * only the parameters you'd like to update (while letting unspecified parameters
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state,
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently
     * defined parameters. Only parameters specified in the state definition can be overridden, new
     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
     *    have changed.  It will reload the resolves and views of the current state and parent states.
     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
     *    the transition reloads the resolves and views for that matched state, and all its children states.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      // Store the hash param for later (since it will be stripped out by various methods)
      var hash = toParams['#'];

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      } else if (isString(options.reload) || isObject(options.reload)) {
        if (isObject(options.reload) && !options.reload.name) {
          throw new Error('Invalid reload state object');
        }

        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
        if (options.reload && !reloadState) {
          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
        }

        while (state && state === fromPath[keep] && state !== reloadState) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
        if (hash) toParams['#'] = hash;
        $state.params = toParams;
        copy($state.params, $stateParams);
        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
        if (options.location && to.navigable && to.navigable.url) {
          $urlRouter.push(to.navigable.url, toParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
          $urlRouter.update(true);
        }
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
      if (hash) toParams['#'] = hash;

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          //Don't update and resync url if there's been a new transition started. see issue #2238, #600
          if ($state.transition == null) $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }).then(null, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     *
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);

      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      function resolveViews() {
        var viewsPromises = [];

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
          }];

          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, dst.globals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            result.$$resolveAs = view.resolveAs;
            dst[name] = result;
          }));
        });

        return $q.all(viewsPromises).then(function(){
          return dst.globals;
        });
      }

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(resolveViews).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
    // Return true if there are no differences in non-search (path/object) params, false if there are differences
    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
      function notSearchParam(key) {
        return fromAndToState.params[key].location != "search";
      }
      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
      return nonQueryParamSet.$$equals(fromParams, toParams);
    }

    // If reload was not explicitly requested
    // and we're transitioning to the same state we're already in
    // and    the locals didn't change
    //     or they changed in a way that doesn't merit reloading
    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
    // Then return true.
    if (!options.reload && to === from &&
      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .factory('$stateParams', function () { return {}; })
  .constant("$state.runtime", { autoinject: true })
  .provider('$state', $StateProvider)
  // Inject $state to initialize when entering runtime. #2574
  .run(['$injector', function ($injector) {
    // Allow tests (stateSpec.js) to turn this off by defining this constant
    if ($injector.get("$state.runtime").autoinject) {
      $injector.get('$state');
    }
  }]);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      return $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @example
 * A view can be unnamed or named.
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div>
 *
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div>
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 *
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }
 * })
 * </pre>
 *
 * But typically you'll only use the views property if you name your view or have more than one view
 * in the same template. There's not really a compelling reason to name a view if its the only one,
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre>
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }
 * })
 * </pre>
 *
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div>
 * <div ui-view="data"></div>
 * </pre>
 *
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 *
 * Resolve data:
 *
 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
 *
 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
 * depends on `$resolve` data.
 *
 * Example usage of $resolve in a view template
 * <pre>
 * $stateProvider.state('home', {
 *   template: '<my-component user="$resolve.user"></my-component>',
 *   resolve: {
 *     user: function(UserService) { return UserService.fetchUser(); }
 *   }
 * });
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate,   $q) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          if (angular.version.minor > 2) {
            $animate.enter(element, null, target).then(cb);
          } else {
            $animate.enter(element, null, target, cb);
          }
        },
        leave: function(element, cb) {
          if (angular.version.minor > 2) {
            $animate.leave(element).then(cb);
          } else {
            $animate.leave(element, cb);
          }
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope),
            inherited     = $element.inheritedData('$uiView');

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            var $uiViewData = currentEl.data('$uiViewAnim');
            renderer.leave(currentEl, function() {
              $uiViewData.$$animLeave.resolve();
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoading
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           *
           * Fired once the view **begins loading**, *before* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
          newScope.$emit('$viewContentLoading', name);

          var clone = $transclude(newScope, function(clone) {
            var animEnter = $q.defer(), animLeave = $q.defer();
            var viewAnimData = {
              $animEnter: animEnter.promise,
              $animLeave: animLeave.promise,
              $$animLeave: animLeave
            };

            clone.data('$uiViewAnim', viewAnimData);
            renderer.enter(clone, $element, function onUiViewEnter() {
              animEnter.resolve();
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
          currentScope.$emit('$viewContentLoaded', name);
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var resolveData = angular.extend({}, locals);
        scope[locals.$$resolveAs] = resolveData;

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          locals.$element = $element;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
            scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
          }
          if (isFunction(controller.$onInit)) controller.$onInit();
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var uiViewCreatedBy = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

function getTypeInfo(el) {
  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
  var isForm = el[0].nodeName === "FORM";

  return {
    attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
    isAnchor: el.prop("tagName").toUpperCase() === "A",
    clickable: !isForm
  };
}

function clickHook(el, $state, $timeout, type, current) {
  return function(e) {
    var button = e.which || e.button, target = current();

    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
      var transition = $timeout(function() {
        $state.go(target.state, target.params, target.options);
      });
      e.preventDefault();

      // if the state has no URL, ignore one preventDefault from the <a> directive.
      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;

      e.preventDefault = function() {
        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
      };
    }
  };
}

function defaultOpts(el, $state) {
  return { relative: stateContext(el) || $state.$current, inherit: true };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
 * URL, the directive will automatically generate & update the `href` attribute via
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
 * the link will trigger a state transition with optional parameters.
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 *
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref    = parseStateRef(attrs.uiSref, $state.current.name);
      var def    = { state: ref.state, href: null, params: null };
      var type   = getTypeInfo(element);
      var active = uiSrefActive[1] || uiSrefActive[0];
      var unlinkInfoFn = null;
      var hookFn;

      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

      var update = function(val) {
        if (val) def.params = angular.copy(val);
        def.href = $state.href(ref.state, def.params, def.options);

        if (unlinkInfoFn) unlinkInfoFn();
        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
        if (def.href !== null) attrs.$set(type.attr, def.href);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);
        def.params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (!type.clickable) return;
      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
      element.bind("click", hookFn);
      scope.$on('$destroy', function() {
        element.unbind("click", hookFn);
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-state
 *
 * @requires ui.router.state.uiSref
 *
 * @restrict A
 *
 * @description
 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
 * params and override options.
 *
 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 */
$StateRefDynamicDirective.$inject = ['$state', '$timeout'];
function $StateRefDynamicDirective($state, $timeout) {
  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var type   = getTypeInfo(element);
      var active = uiSrefActive[1] || uiSrefActive[0];
      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';
      var def    = { state: null, params: null, options: null, href: null };
      var unlinkInfoFn = null;
      var hookFn;

      function runStateRefLink (group) {
        def.state = group[0]; def.params = group[1]; def.options = group[2];
        def.href = $state.href(def.state, def.params, def.options);

        if (unlinkInfoFn) unlinkInfoFn();
        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
        if (def.href) attrs.$set(type.attr, def.href);
      }

      scope.$watch(watch, runStateRefLink, true);
      runStateRefLink(scope.$eval(watch));

      if (!type.clickable) return;
      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
      element.bind("click", hookFn);
      scope.$on('$destroy', function() {
        element.unbind("click", hookFn);
      });
    }
  };
}


/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * It is also possible to pass ui-sref-active an expression that evaluates
 * to an object hash, whose keys represent active class names and whose
 * values represent the respective state names/globs.
 * ui-sref-active will match if the current active state **includes** any of
 * the specified state names/globs, even the abstract ones.
 *
 * @Example
 * Given the following template, with "admin" being an abstract state:
 * <pre>
 * <div ui-sref-active="{'active': 'admin.*'}">
 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
 * </div>
 * </pre>
 *
 * When the current state is "admin.roles" the "active" class will be applied
 * to both the <div> and <a> elements. It is important to note that the state
 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

      try {
        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
      } catch (e) {
        // Do nothing. uiSrefActive is not a valid expression.
        // Fall back to using $interpolate below
      }
      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
      if (isObject(uiSrefActive)) {
        forEach(uiSrefActive, function(stateOrName, activeClass) {
          if (isString(stateOrName)) {
            var ref = parseStateRef(stateOrName, $state.current.name);
            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
          }
        });
      }

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$addStateInfo = function (newState, newParams) {
        // we already got an explicit state provided by ui-sref-active, so we
        // shadow the one that comes from ui-sref
        if (isObject(uiSrefActive) && states.length > 0) {
          return;
        }
        var deregister = addState(newState, newParams, uiSrefActive);
        update();
        return deregister;
      };

      $scope.$on('$stateChangeSuccess', update);

      function addState(stateName, stateParams, activeClass) {
        var state = $state.get(stateName, stateContext($element));
        var stateHash = createStateHash(stateName, stateParams);

        var stateInfo = {
          state: state || { name: stateName },
          params: stateParams,
          hash: stateHash
        };

        states.push(stateInfo);
        activeClasses[stateHash] = activeClass;

        return function removeState() {
          var idx = states.indexOf(stateInfo);
          if (idx !== -1) states.splice(idx, 1);
        };
      }

      /**
       * @param {string} state
       * @param {Object|string} [params]
       * @return {string}
       */
      function createStateHash(state, params) {
        if (!isString(state)) {
          throw new Error('state should be a string');
        }
        if (isObject(params)) {
          return state + toJson(params);
        }
        params = $scope.$eval(params);
        if (isObject(params)) {
          return state + toJson(params);
        }
        return state;
      }

      // Update route state
      function update() {
        for (var i = 0; i < states.length; i++) {
          if (anyMatch(states[i].state, states[i].params)) {
            addClass($element, activeClasses[states[i].hash]);
          } else {
            removeClass($element, activeClasses[states[i].hash]);
          }

          if (exactMatch(states[i].state, states[i].params)) {
            addClass($element, activeEqClass);
          } else {
            removeClass($element, activeEqClass);
          }
        }
      }

      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
      function removeClass(el, className) { el.removeClass(className); }
      function anyMatch(state, params) { return $state.includes(state.name, params); }
      function exactMatch(state, params) { return $state.is(state.name, params); }

      update();
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective)
  .directive('uiState', $StateRefDynamicDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state, params) {
    return $state.is(state, params);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state, params, options) {
    return $state.includes(state, params, options);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
},{}],9:[function(require,module,exports){
/*** Directives and services for responding to idle users in AngularJS
* @author Mike Grabski <me@mikegrabski.com>
* @version v1.3.1
* @link https://github.com/HackedByChinese/ng-idle.git
* @license MIT
*/
(function(window, angular, undefined) {
'use strict';
angular.module('ngIdle', ['ngIdle.keepalive', 'ngIdle.idle', 'ngIdle.countdown', 'ngIdle.title', 'ngIdle.localStorage']);
angular.module('ngIdle.keepalive', [])
  .provider('Keepalive', function() {
    var options = {
      http: null,
      interval: 10 * 60
    };

    this.http = function(value) {
      if (!value) throw new Error('Argument must be a string containing a URL, or an object containing the HTTP request configuration.');
      if (angular.isString(value)) {
        value = {
          url: value,
          method: 'GET'
        };
      }

      value.cache = false;

      options.http = value;
    };

    var setInterval = this.interval = function(seconds) {
      seconds = parseInt(seconds);

      if (isNaN(seconds) || seconds <= 0) throw new Error('Interval must be expressed in seconds and be greater than 0.');
      options.interval = seconds;
    };

    this.$get = ['$rootScope', '$log', '$interval', '$http',
      function($rootScope, $log, $interval, $http) {

        var state = {
          ping: null
        };

        function handleResponse(data, status) {
          $rootScope.$broadcast('KeepaliveResponse', data, status);
        }

        function ping() {
          $rootScope.$broadcast('Keepalive');

          if (angular.isObject(options.http)) {
            $http(options.http)
              .success(handleResponse)
              .error(handleResponse);
          }
        }

        return {
          _options: function() {
            return options;
          },
          setInterval: setInterval,
          start: function() {
            $interval.cancel(state.ping);

            state.ping = $interval(ping, options.interval * 1000);
            return state.ping;
          },
          stop: function() {
            $interval.cancel(state.ping);
          },
          ping: function() {
            ping();
          }
        };
      }
    ];
  });

angular.module('ngIdle.idle', ['ngIdle.keepalive', 'ngIdle.localStorage'])
  .provider('Idle', function() {
    var options = {
      idle: 20 * 60, // in seconds (default is 20min)
      timeout: 30, // in seconds (default is 30sec)
      autoResume: 'idle', // lets events automatically resume (unsets idle state/resets warning)
      interrupt: 'mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll',
      windowInterrupt: null,
      keepalive: true
    };

    /**
     *  Sets the number of seconds a user can be idle before they are considered timed out.
     *  @param {Number|Boolean} seconds A positive number representing seconds OR 0 or false to disable this feature.
     */
    var setTimeout = this.timeout = function(seconds) {
      if (seconds === false) options.timeout = 0;
      else if (angular.isNumber(seconds) && seconds >= 0) options.timeout = seconds;
      else throw new Error('Timeout must be zero or false to disable the feature, or a positive integer (in seconds) to enable it.');
    };

    this.interrupt = function(events) {
      options.interrupt = events;
    };

    this.windowInterrupt = function(events) {
      options.windowInterrupt = events;
    };

    var setIdle = this.idle = function(seconds) {
      if (seconds <= 0) throw new Error('Idle must be a value in seconds, greater than 0.');

      options.idle = seconds;
    };

    this.autoResume = function(value) {
      if (value === true) options.autoResume = 'idle';
      else if (value === false) options.autoResume = 'off';
      else options.autoResume = value;
    };

    this.keepalive = function(enabled) {
      options.keepalive = enabled === true;
    };

    this.$get = ['$interval', '$log', '$rootScope', '$document', 'Keepalive', 'IdleLocalStorage', '$window',
      function($interval, $log, $rootScope, $document, Keepalive, LocalStorage, $window) {
        var state = {
          idle: null,
          timeout: null,
          idling: false,
          running: false,
          countdown: null
        };

        var id = new Date().getTime();

        function startKeepalive() {
          if (!options.keepalive) return;

          if (state.running) Keepalive.ping();

          Keepalive.start();
        }

        function stopKeepalive() {
          if (!options.keepalive) return;

          Keepalive.stop();
        }

        function toggleState() {
          state.idling = !state.idling;
          var name = state.idling ? 'IdleStart' : 'IdleEnd';

          if (state.idling) {
            $rootScope.$broadcast(name);
            stopKeepalive();
            if (options.timeout) {
              state.countdown = options.timeout;
              countdown();
              state.timeout = $interval(countdown, 1000, options.timeout, false);
            }
          } else {
            startKeepalive();
            $rootScope.$broadcast(name);
          }

          $interval.cancel(state.idle);
        }

        function countdown() {

          // check not called when no longer idling
          // possible with multiple tabs
          if(!state.idling){
            return;
          }

          // countdown has expired, so signal timeout
          if (state.countdown <= 0) {
            timeout();
            return;
          }

          // countdown hasn't reached zero, so warn and decrement
          $rootScope.$broadcast('IdleWarn', state.countdown);
          state.countdown--;
        }

        function interrupted(anotherTab) {
          $rootScope.$broadcast('IdleInterrupt', anotherTab);
        }

        function timeout() {
          stopKeepalive();
          $interval.cancel(state.idle);
          $interval.cancel(state.timeout);

          state.idling = true;
          state.running = false;
          state.countdown = 0;

          $rootScope.$broadcast('IdleTimeout');
        }

        function changeOption(self, fn, value) {
          var reset = self.running();

          self.unwatch();
          fn(value);
          if (reset) self.watch();
        }

        function getExpiry() {
          var obj = LocalStorage.get('expiry');

          return obj && obj.time ? new Date(obj.time) : null;
        }

        function setExpiry(date) {
          if (!date) LocalStorage.remove('expiry');
          else LocalStorage.set('expiry', {id: id, time: date});
        }

        var svc = {
          _options: function() {
            return options;
          },
          _getNow: function() {
            return new Date();
          },
          getIdle: function(){
            return options.idle;
          },
          getTimeout: function(){
            return options.timeout;
          },
          setIdle: function(seconds) {
            changeOption(this, setIdle, seconds);
          },
          setTimeout: function(seconds) {
            changeOption(this, setTimeout, seconds);
          },
          isExpired: function() {
            var expiry = getExpiry();
            return expiry !== null && expiry <= this._getNow();
          },
          running: function() {
            return state.running;
          },
          idling: function() {
            return state.idling;
          },
          watch: function(noExpiryUpdate) {
            $interval.cancel(state.idle);
            $interval.cancel(state.timeout);

            // calculate the absolute expiry date, as added insurance against a browser sleeping or paused in the background
            var timeout = !options.timeout ? 0 : options.timeout;
            if (!noExpiryUpdate) setExpiry(new Date(new Date().getTime() + ((options.idle + timeout) * 1000)));


            if (state.idling) toggleState(); // clears the idle state if currently idling
            else if (!state.running) startKeepalive(); // if about to run, start keep alive

            state.running = true;

            state.idle = $interval(toggleState, options.idle * 1000, 0, false);
          },
          unwatch: function() {
            $interval.cancel(state.idle);
            $interval.cancel(state.timeout);

            state.idling = false;
            state.running = false;
            setExpiry(null);

            stopKeepalive();
          },
          interrupt: function(anotherTab) {
            if (!state.running) return;

            if (options.timeout && this.isExpired()) {
              timeout();
              return;
            } else {
              interrupted(anotherTab);
            }

            // note: you can no longer auto resume once we exceed the expiry; you will reset state by calling watch() manually
            if (anotherTab || options.autoResume === 'idle' || (options.autoResume === 'notIdle' && !state.idling)) this.watch(anotherTab);
          }
        };

        var lastMove = {
          clientX: null,
          clientY: null,
          swap: function(event) {
            var last = {clientX: this.clientX, clientY: this.clientY};
            this.clientX = event.clientX;
            this.clientY = event.clientY;
            return last;
          },
          hasMoved: function(event) {
            var last = this.swap(event);
            if (this.clientX === null || event.movementX || event.movementY) return true;
            else if (last.clientX != event.clientX || last.clientY != event.clientY) return true;
            else return false;
          }
        };

        $document.find('html').on(options.interrupt, function(event) {
          if (event.type === 'mousemove' && event.originalEvent && event.originalEvent.movementX === 0 && event.originalEvent.movementY === 0) {
            return; // Fix for Chrome desktop notifications, triggering mousemove event.
          }

          if (event.type !== 'mousemove' || lastMove.hasMoved(event)) {
            svc.interrupt();
          }
        });

        if(options.windowInterrupt) {
          var eventList = options.windowInterrupt.split(' ');
          var fn = function() {
            svc.interrupt();
          };

          for(var i=0; i<eventList.length; i++) {
            if ($window.addEventListener) $window.addEventListener(eventList[i], fn, false);
            else $window.attachEvent(eventList[i], fn)
          }
        }

        var wrap = function(event) {
          if (event.key === 'ngIdle.expiry' && event.newValue && event.newValue !== event.oldValue) {
            var val = angular.fromJson(event.newValue);
            if (val.id === id) return;
            svc.interrupt(true);
          }
        };

        if ($window.addEventListener) $window.addEventListener('storage', wrap, false);
        else if ($window.attachEvent) $window.attachEvent('onstorage', wrap);

        return svc;
      }
    ];
  });

angular.module('ngIdle.countdown', ['ngIdle.idle'])
  .directive('idleCountdown', ['Idle', function(Idle) {
    return {
      restrict: 'A',
      scope: {
        value: '=idleCountdown'
      },
      link: function($scope) {
        // Initialize the scope's value to the configured timeout.
        $scope.value = Idle.getTimeout();

        $scope.$on('IdleWarn', function(e, countdown) {
          $scope.$evalAsync(function() {
            $scope.value = countdown;
          });
        });

        $scope.$on('IdleTimeout', function() {
          $scope.$evalAsync(function() {
            $scope.value = 0;
          });
        });
      }
    };
  }]);

angular.module('ngIdle.title', [])
  .provider('Title', function() {
    var options = {
      enabled: true
    };

    var setEnabled = this.enabled = function(enabled) {
      options.enabled = enabled === true;
    };

    function padLeft(nr, n, str){
      return new Array(n-String(nr).length+1).join(str||'0')+nr;
    }

    this.$get = ['$document', '$interpolate', function($document, $interpolate) {
      var state = {
        original: null,
        idle: '{{minutes}}:{{seconds}} until your session times out!',
        timedout: 'Your session has expired.'
      };

      return {
        setEnabled: setEnabled,
        isEnabled: function() {
          return options.enabled;
        },
        original: function(val) {
          if (angular.isUndefined(val)) return state.original;

          state.original = val;
        },
        store: function(overwrite) {
          if (overwrite || !state.original) state.original = this.value();
        },
        value: function(val) {
          if (angular.isUndefined(val)) return $document[0].title;

          $document[0].title = val;
        },
        idleMessage: function(val) {
          if (angular.isUndefined(val)) return state.idle;

          state.idle = val;
        },
        timedOutMessage: function(val) {
          if (angular.isUndefined(val)) return state.timedout;

          state.timedout = val;
        },
        setAsIdle: function(countdown) {
          this.store();

          var remaining = { totalSeconds: countdown };
          remaining.minutes = Math.floor(countdown/60);
          remaining.seconds = padLeft(countdown - remaining.minutes * 60, 2);

          this.value($interpolate(this.idleMessage())(remaining));
        },
        setAsTimedOut: function() {
          this.store();

          this.value(this.timedOutMessage());
        },
        restore: function() {
          if (this.original()) this.value(this.original());
        }
      };
    }];
  })
  .directive('title', ['Title', function(Title) {
      return {
        restrict: 'E',
        link: function($scope, $element, $attr) {
          if (!Title.isEnabled() || $attr.idleDisabled) return;

          Title.store(true);

          $scope.$on('IdleStart', function() {
            Title.original($element[0].innerText);
          });

          $scope.$on('IdleWarn', function(e, countdown) {
            Title.setAsIdle(countdown);
          });

          $scope.$on('IdleEnd', function() {
            Title.restore();
          });

          $scope.$on('IdleTimeout', function() {
            Title.setAsTimedOut();
          });
        }
      };
  }]);

angular.module('ngIdle.localStorage', [])
  .service('IdleStorageAccessor', ['$window', function($window) {
    return {
      get: function() {
        return $window.localStorage;
      }
    }
  }])
  .service('IdleLocalStorage', ['IdleStorageAccessor', function(IdleStorageAccessor) {
    function AlternativeStorage() {
      var storageMap = {};

      this.setItem = function (key, value) {
          storageMap[key] = value;
      };

      this.getItem = function (key) {
          if(typeof storageMap[key] !== 'undefined' ) {
              return storageMap[key];
          }
          return null;
      };

      this.removeItem = function (key) {
          storageMap[key] = undefined;
      };
    }

    function getStorage() {
       try {
          var s = IdleStorageAccessor.get();
          s.setItem('ngIdleStorage', '');
          s.removeItem('ngIdleStorage');

          return s;
       } catch(err) {
          return new AlternativeStorage();
       }
    }

    // Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
    // throw QuotaExceededError. We're going to detect this and just silently drop any calls to setItem
    // to avoid the entire page breaking, without having to do a check at each usage of Storage.
    var storage = getStorage();

    return {
      set: function(key, value) {
        storage.setItem('ngIdle.'+key, angular.toJson(value));
      },
      get: function(key) {
        return angular.fromJson(storage.getItem('ngIdle.'+key));
      },
      remove: function(key) {
        storage.removeItem('ngIdle.'+key);
      },
      _wrapped: function() {
        return storage;
      }
    };
}]);

})(window, window.angular);
},{}],10:[function(require,module,exports){
require('./angular-idle');
module.exports = 'ngIdle';

},{"./angular-idle":9}],11:[function(require,module,exports){
"use strict";

require("angular-ui-router");

require("angular-ui-router-styles/ui-router-styles");

require("angular-jwt/");

require("ng-idle/");

require("angular-ui-bootstrap/");

require("angular-animate/");

require("./modules/modules");

require("./modules/templates/templates.module");

require("./modules/(main-app)/");

require("./modules/[directives]/");

require("./modules/[services]/");

require("./modules/home/");

require("./modules/cart/");

require("./modules/community/");

require("./modules/downtown/");

require("./modules/help/");

require("./modules/search/");

require("./modules/setting/");

require("./modules/signin/");

require("./modules/auth/");

require("./modules/signout/");

require("./modules/user/");

require("./modules/shop/");

require("./modules/item/");

require("./modules/chat/");

require("./modules/timeline/");

require("./modules/mail/");

require("./modules/contacts/");

require("./modules/notes/");

require("./modules/calendar/");

},{"./modules/(main-app)/":12,"./modules/[directives]/":17,"./modules/[services]/":21,"./modules/auth/":31,"./modules/calendar/":34,"./modules/cart/":40,"./modules/chat/":54,"./modules/community/":60,"./modules/contacts/":63,"./modules/downtown/":73,"./modules/help/":79,"./modules/home/":85,"./modules/item/":86,"./modules/mail/":92,"./modules/modules":95,"./modules/notes/":96,"./modules/search/":99,"./modules/setting/":102,"./modules/shop/":108,"./modules/signin/":114,"./modules/signout/":117,"./modules/templates/templates.module":120,"./modules/timeline/":121,"./modules/user/":124,"angular-animate/":2,"angular-jwt/":4,"angular-ui-bootstrap/":6,"angular-ui-router":8,"angular-ui-router-styles/ui-router-styles":7,"ng-idle/":10}],12:[function(require,module,exports){
"use strict";

var _mainApp = require("./main-app.constant");

var _mainApp2 = require("./main-app.controller");

var _mainApp3 = require("./main-app.config");

var _mainApp4 = require("./main-app.run");

/**
 * @ngdoc overview
 * @name MainApp
 *
 * @description
 * #Description
 * Top-level module of application.
 */
angular.module("MainApp").constant("MainAppConstant", _mainApp.MainAppConstant).config(_mainApp3.MainAppConfig).controller("MainController", _mainApp2.MainController).run(_mainApp4.MainAppRun);

//$(function () {
//    $('a[href="#search"]').on('click', function(event) {
//        event.preventDefault();
//        $('#search').addClass('open');
//        $('#search > form > input[type="search"]').focus();
//    });
//
//    $('#search, #search button.close').on('click keyup', function(event) {
//        if (event.target == this || event.target.className == 'close' || event.keyCode == 27) {
//            $(this).removeClass('open');
//        }
//    });
//
//
//    //Do not include! This prevents the form from submitting for DEMO purposes only!
//    $('form').submit(function(event) {
//        event.preventDefault();
//        return false;
//    })
//});

},{"./main-app.config":13,"./main-app.constant":14,"./main-app.controller":15,"./main-app.run":16}],13:[function(require,module,exports){
"use strict";

MainAppConfig.$inject = ["$urlRouterProvider", "$stateProvider", "$locationProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MainAppConfig = MainAppConfig;
function MainAppConfig($urlRouterProvider, $stateProvider, $locationProvider) {
    "ngInject";

    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise("/downtown");

    $stateProvider.state("main", {
        // url: "/",
        templateUrl: "modules/(main-app)/main.html",
        controller: "MainController",
        controllerAs: "main",

        data: {
            // css: "/css/cart/cart.css",
            //authenticate: true,
            //
        }
    });
};

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @ngdoc object
 * @name MainApp.MainAppConstant
 * @description
 * Contant object of MainApp module.
 *
 * This object has the following properties:
 *
 * - `appName` – `{string}` – Name of this application.
 */
var MainAppConstant = exports.MainAppConstant = {
  appName: "Sector 5",
  //apiPath: "http://192.168.2.10:8000"
  //apiPath: "http://192.168.10.1:8000"
  apiPath: "http://muime.ddns.net:8000"
};

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc controller
 * @name Main.controller:MainController
 * @description Controller for Main module.
 */
var MainController = exports.MainController = function MainController() {
    "ngInject";

    _classCallCheck(this, MainController);
};

},{}],16:[function(require,module,exports){
'use strict';

MainAppRun.$inject = ["MainAppConstant", "$rootScope", "$state", "AuthService"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MainAppRun = MainAppRun;
function MainAppRun(MainAppConstant, $rootScope, $state, AuthService) {
    "ngInject";

    // change page title based on state

    $rootScope.$on('$stateChangeSuccess', function (event, next, toState) {
        $rootScope.setPageTitle(toState.title);
    });

    // Helper method for setting the page's title
    $rootScope.setPageTitle = function (title) {
        $rootScope.pageTitle = '';
        if (title) {
            $rootScope.pageTitle += title;
            $rootScope.pageTitle += ' \u2014 ';
        }
        $rootScope.pageTitle += MainAppConstant.appName;
    };

    $rootScope.isUserLoggedIn = function () {
        return AuthService.isSignedIn();
    };
};

},{}],17:[function(require,module,exports){
"use strict";

var _permissions = require("./permissions/permissions");

var _slideToggleHorizontal = require("./slide/slide-toggle-horizontal");

/**
 * @ngdoc directive
 * @name Directives.directive:permissions
 *
 * @description
 * Restricting access to page content
 */
angular.module("Directives").directive("permissions", ["AuthService", _permissions.permissions]).directive("slideToggleHorizontal", _slideToggleHorizontal.slideToggleHorizontal);

},{"./permissions/permissions":18,"./slide/slide-toggle-horizontal":19}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.permissions = permissions;
function permissions(AuthService) {
    return {
        restrict: 'A',
        scope: {
            permissions: '='
        },

        link: function link(scope, elem, attrs) {
            if (AuthService.userHasPermission(scope.permissions)) {
                elem.removeClass("ng-hide");
            } else {
                elem.addClass("ng-hide");
            }
        }
    };
};

},{}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.slideToggleHorizontal = slideToggleHorizontal;
function slideToggleHorizontal() {
    "ngInject";

    return {
        restrict: 'A',
        scope: {
            elemSlide: '@slideTarget'
        },

        link: function link(scope, elem, attrs) {
            elem.bind('click', function () {
                var elemSlide = $(scope.elemSlide);

                if (elemSlide.hasClass("show")) {
                    elemSlide.animate({
                        left: "100%"
                    }, 500, function () {
                        elemSlide.removeClass("show");
                        elemSlide.css("left", "");
                    });
                } else {
                    elemSlide.animate({
                        left: 0
                    }, 500, function () {
                        elemSlide.addClass("show");
                        elemSlide.css("left", "");
                    });
                }
            });
        }
    };
};

},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FileAttachService = FileAttachService;
/**
 * @ngdoc service
 * @name Services.service:FileAttachService
 * @description Service for file attachment.
 */
function FileAttachService() {
    "ngInject";

    return {
        formatCapacity: formatCapacity,
        getIcon: getIcon
    };

    function formatCapacity(value) {
        var cf = void 0;
        if (value > 1024 * 100) {
            cf = (value / (1024 * 1024)).toFixed(2) + " MB";
        } else if (value > 100) {
            cf = (value / 1024).toFixed(2) + " KB";
        } else {
            cf = value.toFixed(2) + " B";
        }

        return cf;
    }

    function getIcon(fileName) {
        var ext = getExt(fileName);

        return "/icons/files/" + (ext ? ext : "_blank") + ".png";
    }

    function getExt(fileName) {
        var arrExts = ['aac', 'ai', 'aiff', 'avi', 'bmp', 'c', 'cpp', 'css', 'dat', 'dmg', 'doc', 'dotx', 'dwg', 'dxf', 'eps', 'exe', 'flv', 'gif', 'h', 'hpp', 'html', 'ics', 'iso', 'java', 'jpeg', 'jpg', 'key', 'mid', 'mp3', 'mp4', 'mpg', 'odf', 'ods', 'odt', 'otp', 'ots', 'ott', 'pdf', 'php', 'png', 'ppt', 'psd', 'py', 'qt', 'rar', 'rb', 'rtf', 'sql', 'tga', 'tgz', 'tiff', 'txt', 'wav', 'xls', 'xlsx', 'xml', 'yml', 'zip'];

        var reg_ext = '';
        arrExts.forEach(function (ext) {
            reg_ext += (reg_ext ? '|' : '') + ext;
        });

        var regExp = new RegExp('^(.+)\.(' + reg_ext + ')$', 'i');
        if (regExp.test(fileName)) {
            var ext = fileName.substring(fileName.lastIndexOf('.') + 1);
            if (ext == 'jpeg') {
                ext = 'jpg';
            }

            return ext;
        } else {
            return false;
        }
    }
}

},{}],21:[function(require,module,exports){
"use strict";

var _fileAttach = require("./file/file-attach");

angular.module("Services").factory("FileAttachService", _fileAttach.FileAttachService);

},{"./file/file-attach":20}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.authLogoutInput = authLogoutInput;
function authLogoutInput() {
    "ngInject";

    return {
        restrict: 'A',
        require: "ngModel",
        link: function link(scope, elem, attrs, ctrl) {
            elem.on('keydown', function (event) {
                if (event.keyCode != 13) {
                    scope.auth.error.logout = false;
                }
            });
        }
    };
}

},{}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.authScroll = authScroll;
function authScroll() {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            elem.bind('click', function (event) {
                var $anchor = $(this);

                $('#auth1').stop().animate({
                    scrollTop: $($anchor.attr('href')).offset().top - $('#auth1').offset().top + $('#auth1').scrollTop()
                }, 1250, 'easeInOutExpo');
                event.preventDefault();
            });
        }
    };
}

},{}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.authSigninInput = authSigninInput;
function authSigninInput() {
    "ngInject";

    return {
        restrict: 'A',
        require: "ngModel",
        link: function link(scope, elem, attrs, ctrl) {
            elem.on('keydown', function (event) {
                if (event.keyCode != 13) {
                    scope.auth.error.signin = false;
                }
            });
        }
    };
}

},{}],25:[function(require,module,exports){
"use strict";

authSignupInput.$inject = ["$timeout"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.authSignupInput = authSignupInput;
function authSignupInput($timeout) {
    "ngInject";

    return {
        restrict: 'A',
        require: "ngModel",
        link: function link(scope, elem, attrs, ctrl) {
            var _$timeout = void 0;

            function updateFirstInputError() {
                if (_$timeout) {
                    $timeout.cancel(_$timeout);
                }
                _$timeout = $timeout(function () {
                    var elInputError = $(".auth .signup .signup-input-block.err *[auth-signup-input]");
                    if (elInputError.length) {
                        var inputName = elInputError.attr("name");
                        scope.auth.firstInputError = inputName;
                    } else {
                        scope.auth.firstInputError = null;
                    }
                }, ctrl.$options.debounce);
            }

            if (elem.prop("tagName") == "INPUT") {
                elem.bind('keyup', function () {
                    updateFirstInputError();
                });
            } else if (elem.prop("tagName") == "SELECT") {
                elem.bind('change', function () {
                    updateFirstInputError();
                });
            }
        }
    };
}

},{}],26:[function(require,module,exports){
"use strict";

AuthConfig.$inject = ["$stateProvider", "$httpProvider", "jwtOptionsProvider", "IdleProvider", "TitleProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthConfig = AuthConfig;
function AuthConfig($stateProvider, $httpProvider, jwtOptionsProvider, IdleProvider, TitleProvider) {
    "ngInject";

    IdleProvider.idle(475); // x seconds idle
    IdleProvider.timeout(5); // after x seconds idle, time the user out
    TitleProvider.enabled(false);

    jwtOptionsProvider.config({
        tokenGetter: ["$http", "$window", "jwtHelper", function tokenGetter($http, $window, jwtHelper) {
            "ngInject";

            //console.log("tokenGetter");

            if ($window.localStorage.token) {
                if (jwtHelper.isTokenExpired($window.localStorage.token)) {
                    return null;
                } else {
                    return $http({
                        //url: MainAppConstant.apiPath+'/refreshToken',
                        //url: 'http://192.168.2.10:8000/refreshToken',
                        url: 'http://muime.ddns.net:8000/refreshToken',
                        // This will not send the JWT for this call
                        skipAuthorization: true,
                        method: 'POST',
                        data: { token: $window.localStorage.token }
                    }).then(function (respond) {
                        $window.localStorage.token = respond.data.token;

                        return $window.localStorage.token;
                    });
                }
            } else {
                return null;
            }
        }],
        unauthenticatedRedirector: ["$window", "$state", function unauthenticatedRedirector($window, $state) {
            "ngInject";

            delete $window.localStorage.token;
            delete $window.localStorage.isLoggedOut;

            $state.go("auth");
            //$state.reload();
        }],

        whiteListedDomains: ["localhost", "192.168.10.1", "192.168.2.10"]
    });

    $httpProvider.interceptors.push("jwtInterceptor");

    $stateProvider.state("auth", {
        templateUrl: "modules/auth/auth.html",
        controller: "AuthController",
        controllerAs: "auth",
        title: "Authentication",
        data: {
            authenticate: false
        }
    }).state("forbidden", {
        templateUrl: "modules/auth/forbidden.html",
        data: {
            authenticate: true
        }
    }).state("activate", {
        templateUrl: "modules/auth/activate.html",
        url: "/activate",
        controller: "AuthController",
        controllerAs: "auth",
        title: "Authentication",
        data: {
            authenticate: false,
            css: "/css/auth/auth.css"
        }
    });
};

},{}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc controller
 * @name Auth.controller:AuthController
 * @description Controller for Auth module.
 */
var AuthController = exports.AuthController = function () {
    AuthController.$inject = ["$http", "$window", "$location", "$filter", "$state", "$timeout", "AuthService", "UserService", "Idle"];
    function AuthController($http, $window, $location, $filter, $state, $timeout, AuthService, UserService, Idle) {
        "ngInject";

        _classCallCheck(this, AuthController);

        this._$http = $http;
        this._$window = $window;
        this._$location = $location;
        this._$filter = $filter;
        this._$state = $state;
        this._$timeout = $timeout;
        this._AuthService = AuthService;
        this._UserService = UserService;
        this._Idle = Idle;

        this.arrBdays = [];
        for (var day = 1; day <= 31; day++) {
            this.arrBdays.push({
                value: day >= 10 ? day : "0" + day,
                text: day
            });
        }

        this.arrBmonths = [];
        var arrMonthNames = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        for (var month = 1; month <= 12; month++) {
            this.arrBmonths.push({
                value: month >= 10 ? month : "0" + month,
                text: arrMonthNames[month]
            });
        }

        this.arrByears = [];
        var yearStart = $filter('date')(new Date(), 'yyyy') - 3;
        var yearFinish = yearStart - 80;
        for (var year = yearStart; year >= yearFinish; year--) {
            this.arrByears.push(year);
        }

        this.error = {
            signin: false,
            logout: false,
            duplicateUsername: false,
            notEmail: false,
            lessLengthPassword1: false,
            lessLengthPassword2: false,
            passwordsNotMatch: false,
            invalidBirthday: false
        };

        this.firstInputError = null;

        this.logoutFailed = {
            current: 0,
            FORGOTPW: 3,
            SIGNOUT: 4
        };
    }

    _createClass(AuthController, [{
        key: "signin",
        value: function signin() {
            var _this = this;

            this._AuthService.signin(this.user.username, this.user.password).then(function () {
                if (_this._$state.current.name == "signin") {
                    _this._$window.location.href = "/community";
                } else {
                    _this._$window.location.reload();
                }
            }, function (data) {
                _this.error.signin = true;
            });
        }
    }, {
        key: "signup",
        value: function signup() {
            var _this2 = this;

            var user = {
                firstname: this.user.firstname,
                lastname: this.user.lastname,
                email: this.user.email,
                password: this.user.password1,
                gender: this.user.gender
            };

            this._UserService.Create(user).then(function () {
                //success
                if (_this2._$state.current.name == "signin") {
                    _this2._$window.location.href = "/community";
                } else {
                    _this2._$window.location.reload();
                }
            }, function () {//error
                //
            });
        }
    }, {
        key: "logout",
        value: function logout() {
            var _this3 = this;

            if (this.passwordLogout != "" && this.passwordLogout != undefined) {
                this._AuthService.logout(this.passwordLogout).then(function () {
                    _this3._Idle.watch();
                }, function () {
                    _this3.logoutFailed.current++;
                    _this3.error.logout = true;
                    _this3.passwordLogout = "";

                    if (_this3.logoutFailed.current == _this3.logoutFailed.SIGNOUT) {
                        _this3._$timeout(function () {
                            _this3.signout();
                        }, 1000);
                    }
                });
            }
        }
    }, {
        key: "signout",
        value: function signout() {
            this._AuthService.signout();
        }
    }, {
        key: "isDuplicateUsername",
        value: function isDuplicateUsername() {
            console.log("isDuplicateUsername");
            var is = this._UserService.isDuplicateUsername(this.user.email);
            this.error.duplicateUsername = is;
            this.error.notEmail = false;

            return is;
        }
    }, {
        key: "isNotEmail",
        value: function isNotEmail() {
            var is = !this.user.email.toLowerCase().match(/^[a-z0-9_\+-]+(\.[a-z0-9_\+-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,4})$/);
            this.error.notEmail = is;
            this.error.duplicateUsername = false;

            return is;
        }
    }, {
        key: "isLessLengthPassword1",
        value: function isLessLengthPassword1() {
            console.log("isLessLengthPassword1");
            var is = !(this.user.password1.length >= 6);
            this.error.lessLengthPassword1 = is;

            return is;
        }
    }, {
        key: "isLessLengthPassword2",
        value: function isLessLengthPassword2() {
            var is = !(this.user.password2.length >= 6);
            this.error.lessLengthPassword2 = is;
            this.error.passwordsNotMatch = false;

            return is;
        }
    }, {
        key: "isPasswordsNotMatch",
        value: function isPasswordsNotMatch() {
            var is = !(this.user.password1 == this.user.password2);
            this.error.passwordsNotMatch = is;
            this.error.lessLengthPassword2 = false;

            return is;
        }
    }, {
        key: "isInvalidBirthday",
        value: function isInvalidBirthday() {
            var is = void 0;
            if (this.user.byear && this.user.bmonth && this.user.bday) {
                var birthday = this.user.byear + "-" + this.user.bmonth + "-" + this.user.bday;
                is = !(this._$filter('date')(new Date(birthday), 'yyyy-MM-dd') == birthday);
            } else {
                is = false;
            }
            this.error.invalidBirthday = is;

            return is;
        }
    }, {
        key: "isFirstInputError",
        value: function isFirstInputError(inputName) {
            var is = this.firstInputError == inputName;

            return is;
        }
    }, {
        key: "hasFirstInputError",
        value: function hasFirstInputError() {
            return this.firstInputError != null;
        }
    }, {
        key: "callRestricted",
        value: function callRestricted() {
            var _this4 = this;

            this._$http({
                url: 'http://localhost:8000/protected/restricted',
                method: 'GET'
            }).success(function (data, status, headers, config) {
                _this4.message = _this4.message + ' ' + data.name; // Should log 'foo'
            }).error(function (data, status, headers, config) {
                alert(status + ": " + data);
            });
        }
    }]);

    return AuthController;
}();

},{}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.authInterceptor = authInterceptor;
function authInterceptor($rootScope, $q, $window) {
    return {
        request: function request(config) {
            config.headers = config.headers || {};
            if ($window.localStorage.token) {
                config.headers.Authorization = "Bearer " + $window.localStorage.token;
            }
            return config;
        },
        responseError: function responseError(rejection) {
            if (rejection.status === 401) {
                // handle the case where the user is not authenticated
            }
            return $q.reject(rejection);
        }
    };
};

},{}],29:[function(require,module,exports){
"use strict";

AuthRun.$inject = ["$rootScope", "$state", "AuthService", "authManager", "Idle"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthRun = AuthRun;
function AuthRun($rootScope, $state, AuthService, authManager, Idle) {
    "ngInject";

    authManager.redirectWhenUnauthenticated();

    // change page title based on state
    $rootScope.$on('$stateChangeSuccess', function (event, next, toState) {
        if (AuthService.isSignedIn()) {
            if (AuthService.isLoggedOut()) {
                AuthService.popupLogout();

                Idle.unwatch();
            } else {
                Idle.watch();
            }
        }

        if (AuthService.isRequireAuthenForView(next)) {
            if (!AuthService.isSignedIn()) {
                $state.go("auth");
            } else if (!AuthService.hasPermissionForView(next)) {
                $state.go("forbidden");
            }
        }
    });

    //    $rootScope.$on('IdleStart', function () {
    //    });

    $rootScope.$on('IdleTimeout', function () {
        AuthService.popupLogout();
    });

    $rootScope.popupLogout = function () {
        AuthService.popupLogout();

        Idle.unwatch();
    };

    $rootScope.userLogout = function () {
        return AuthService.profile.first_name + " " + AuthService.profile.last_name;
    };
}

},{}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc service
 * @name Auth.service:AuthService
 * @description Service for Auth module.
 */
var AuthService = exports.AuthService = function () {
    AuthService.$inject = ["$http", "$window", "$q", "$uibModal", "$timeout", "jwtHelper", "MainAppConstant"];
    function AuthService($http, $window, $q, $uibModal, $timeout, jwtHelper, MainAppConstant) {
        "ngInject";

        _classCallCheck(this, AuthService);

        this._$http = $http;
        this._$window = $window;
        this._$q = $q;
        this._$uibModal = $uibModal;
        this._$timeout = $timeout;
        this._jwtHelper = jwtHelper;
        this._MainAppConstant = MainAppConstant;

        this.localStorage = $window.localStorage;
        //this.loadedView = false;
    }

    _createClass(AuthService, [{
        key: "signin",
        value: function signin(shortcutUsername, password) {
            var _this = this;

            var username = this.getUsernameFromShortcut(shortcutUsername).toLowerCase();
            var deferred = this._$q.defer();
            this._$http.post(this._MainAppConstant.apiPath + '/authenticate', { username: username, password: password }).then(function (respond) {
                _this.localStorage.token = respond.data.token;
                _this.localStorage.isLoggedOut = "0";

                deferred.resolve();
            }, function (reason) {
                delete _this.localStorage.token;
                delete _this.localStorage.isLoggedOut;

                deferred.reject(reason.data);
            });
            return deferred.promise;
        }
    }, {
        key: "getUsernameFromShortcut",
        value: function getUsernameFromShortcut(shortcutName) {
            var user = void 0,
                domain = void 0;

            var indSymbol = -1;
            var posSymbol = -1;

            var listSymbol = ["@", "#", "$"];

            listSymbol.forEach(function (symbol, i) {
                if (shortcutName.includes(symbol)) {
                    if (indSymbol == -1 || shortcutName.indexOf(symbol) < posSymbol) {
                        indSymbol = i;
                        posSymbol = shortcutName.indexOf(symbol);
                    }
                }
            });

            if (indSymbol == -1) {
                user = shortcutName;
                domain = "muime.com";
            } else {
                user = shortcutName.substring(0, shortcutName.indexOf(listSymbol[indSymbol]));
                domain = function getDomainFromPart(partName) {
                    if (partName == '') {
                        return "muime.com";
                    } else if (partName.indexOf(".") < 0) {
                        return partName.toLowerCase() + ".com";
                    } else if (partName.substring(partName.indexOf(".") + 1) == "") {
                        return partName.toLowerCase() + "com";
                    } else {
                        return partName.toLowerCase();
                    }
                }(shortcutName.substring(shortcutName.indexOf(listSymbol[indSymbol]) + 1));
            }

            return user + "@" + domain;
        }
    }, {
        key: "signout",
        value: function signout() {
            delete this.localStorage.token;
            delete this.localStorage.isLoggedOut;

            this._$window.location.reload();
        }
    }, {
        key: "isSignedIn",
        value: function isSignedIn() {
            return this.localStorage.token != null;
        }
    }, {
        key: "isLoggedOut",
        value: function isLoggedOut() {
            var remainSessTime = this._jwtHelper.getTokenExpirationDate(this.localStorage.token).getTime() - new Date().getTime();
            //        if(remainSessTime < 16*60*1000){
            //            this.localStorage.isLoggedOut = "1";
            //        }
            console.log(remainSessTime / 60000);
            //        if(remainSessTime < 23*60*1000){
            //            this.localStorage.isLoggedOut = "1";
            //        }

            return this.localStorage.isLoggedOut == "1";
        }
    }, {
        key: "popupLogout",
        value: function popupLogout() {
            var _this2 = this;

            this.localStorage.isLoggedOut = "1";

            if (!this.modalLogout) {
                this.modalLogout = this._$uibModal.open({
                    templateUrl: "modules/auth/logout.html",
                    controller: "AuthController",
                    controllerAs: "auth",
                    backdrop: false,
                    windowTemplateUrl: "modules/auth/window-logout.html"
                });

                var remainSessTime = this._jwtHelper.getTokenExpirationDate(this.localStorage.token).getTime() - new Date().getTime();
                this.timeoutSignout = this._$timeout(function () {
                    _this2.signout();
                }, remainSessTime);
            }
        }
    }, {
        key: "logout",
        value: function logout(password) {
            var deferred = this._$q.defer();

            if (this.profile.password == password) {
                this._$timeout.cancel(this.timeoutSignout);

                this.modalLogout.close();
                this.modalLogout = null;

                this.localStorage.isLoggedOut = "0";

                deferred.resolve();
            } else {
                deferred.reject();
            }
            return deferred.promise;
        }
    }, {
        key: "isRequireAuthenForView",
        value: function isRequireAuthenForView(view) {
            //alert(Object.keys(view));
            if (view.data.authenticate == undefined) {
                return false;
            }
            return view.data.authenticate;
        }
    }, {
        key: "hasPermissionForView",
        value: function hasPermissionForView(view) {
            var _this3 = this;

            if (!view.data.permissions || !view.data.permissions.length) {
                return true;
            }

            var found = false;
            angular.forEach(view.data.permissions, function (permission) {
                if (_this3.profile.permissions.indexOf(permission) >= 0) {
                    found = true;
                    return;
                }
            });
            return found;
        }
    }, {
        key: "userHasPermission",
        value: function userHasPermission(permissions) {
            var _this4 = this;

            var found = false;
            angular.forEach(permissions, function (permission) {
                if (_this4.profile.permissions.indexOf(permission) >= 0) {
                    found = true;
                    return;
                }
            });
            return found;
        }
    }, {
        key: "profile",
        get: function get() {
            //this is used to parse the profile
            function url_base64_decode(str) {
                var output = str.replace('-', '+').replace('_', '/');
                switch (output.length % 4) {
                    case 0:
                        break;
                    case 2:
                        output += '==';
                        break;
                    case 3:
                        output += '=';
                        break;
                    default:
                        throw 'Illegal base64url string!';
                }
                return window.atob(output); //polifyll https://github.com/davidchambers/Base64.js
            }

            var encodedProfile = this.localStorage.token.split('.')[1];
            var profile = JSON.parse(url_base64_decode(encodedProfile));

            return profile;
        }
    }]);

    return AuthService;
}();

},{}],31:[function(require,module,exports){
"use strict";

var _auth = require("./auth.config");

var _auth2 = require("./auth.service");

var _auth3 = require("./auth.interceptor");

var _auth4 = require("./auth.controller");

var _authScroll = require("./auth-scroll.directive");

var _authSigninInput = require("./auth-signin-input.directive");

var _authSignupInput = require("./auth-signup-input.directive");

var _authLogoutInput = require("./auth-logout-input.directive");

var _auth5 = require("./auth.run");

/**
 * @ngdoc overview
 * @name Auth
 *
 * @description
 * #Description
 * Module for Auth page.
 */
angular.module("Auth").config(_auth.AuthConfig).service("AuthService", _auth2.AuthService).factory("authInterceptor", _auth3.authInterceptor).controller("AuthController", _auth4.AuthController).directive("authScroll", _authScroll.authScroll).directive("authSigninInput", _authSigninInput.authSigninInput).directive("authSignupInput", _authSignupInput.authSignupInput).directive("authLogoutInput", _authLogoutInput.authLogoutInput).run(_auth5.AuthRun);

},{"./auth-logout-input.directive":22,"./auth-scroll.directive":23,"./auth-signin-input.directive":24,"./auth-signup-input.directive":25,"./auth.config":26,"./auth.controller":27,"./auth.interceptor":28,"./auth.run":29,"./auth.service":30}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CalendarCenterController = exports.CalendarCenterController = function CalendarCenterController() {
    "ngInject";

    _classCallCheck(this, CalendarCenterController);
};

},{}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CalendarLeftController = exports.CalendarLeftController = function CalendarLeftController() {
    "ngInject";

    _classCallCheck(this, CalendarLeftController);
};

},{}],34:[function(require,module,exports){
"use strict";

var _calendarLeft = require("./calendar.left.controller");

var _calendarCenter = require("./calendar.center.controller");

angular.module("Calendar").controller("CalendarLeftController", _calendarLeft.CalendarLeftController).controller("CalendarCenterController", _calendarCenter.CalendarCenterController);

},{"./calendar.center.controller":32,"./calendar.left.controller":33}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CartCenterController = exports.CartCenterController = function CartCenterController() {
    "ngInject";

    _classCallCheck(this, CartCenterController);
};

},{}],36:[function(require,module,exports){
"use strict";

CartConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CartConfig = CartConfig;
function CartConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.cart", {
        url: "/order",
        title: "Order",
        data: {
            css: "/css/cart/cart.css",
            authenticate: true,
            permissions: ["restricted"]
        },
        views: {
            "top": {
                templateUrl: "modules/cart/cart-top.html",
                controller: "CartTopController",
                controllerAs: "cart"

            },
            "left": {
                templateUrl: "modules/cart/cart-left.html",
                controller: "CartLeftController",
                controllerAs: "cart"

            },
            "center": {
                templateUrl: "modules/cart/cart-center.html",
                controller: "CartCenterController",
                controllerAs: "cart"

            },
            //                "right" :{
            //                        templateUrl: "modules/cart/cart-right.html",
            //                        controller: "CartRightController",
            //                        controllerAs: "cart",
            //
            //
            //                 }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }

        }

    });
};

},{}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CartLeftController = exports.CartLeftController = function CartLeftController() {
    "ngInject";

    _classCallCheck(this, CartLeftController);
};

},{}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CartRightController = exports.CartRightController = function CartRightController() {
    "ngInject";

    _classCallCheck(this, CartRightController);
};

},{}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CartTopController = exports.CartTopController = function CartTopController() {
    "ngInject";

    _classCallCheck(this, CartTopController);
};

},{}],40:[function(require,module,exports){
"use strict";

var _cart = require("./cart.config");

var _cartTop = require("./cart.top.controller");

var _cartLeft = require("./cart.left.controller");

var _cartCenter = require("./cart.center.controller");

var _cartRight = require("./cart.right.controller");

angular.module("Cart").config(_cart.CartConfig).controller("CartTopController", _cartTop.CartTopController).controller("CartLeftController", _cartLeft.CartLeftController).controller("CartCenterController", _cartCenter.CartCenterController).controller("CartRightController", _cartRight.CartRightController);

},{"./cart.center.controller":35,"./cart.config":36,"./cart.left.controller":37,"./cart.right.controller":38,"./cart.top.controller":39}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatConversationClose = chatConversationClose;
function chatConversationClose() {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            elem.bind('click', function (event) {
                scope.$apply(function () {
                    scope.chat.convState = false;
                });
            });
        }
    };
}

},{}],42:[function(require,module,exports){
'use strict';

chatConversationDroppable.$inject = ["$document", "$timeout"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatConversationDroppable = chatConversationDroppable;
function chatConversationDroppable($document, $timeout) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            $document.bind('dragenter', function (e) {
                e.preventDefault();

                if (e.target != elem[0]) {
                    scope.$apply(function () {
                        scope.chat.isConvDropZoneShow = true;
                        scope.chat.isConvDroppableHover = false;
                    });
                }
            });

            $document.bind('dragover', function (e) {
                e.preventDefault();
            });

            $document.bind('dragleave', function (e) {
                e.preventDefault();

                if (e.offsetX <= 0 && e.offsetY <= 0) {
                    scope.$apply(function () {
                        scope.chat.isConvDropZoneShow = false;
                        scope.chat.isConvDroppableHover = false;
                    });
                }
            });

            $document.bind('drop', function (e) {
                e.preventDefault();

                scope.$apply(function () {
                    scope.chat.isConvDropZoneShow = false;
                });
            });

            elem.bind('dragenter', function (e) {
                e.preventDefault();

                scope.$apply(function () {
                    scope.chat.isConvDroppableHover = true;
                });
            });

            elem.bind('drop', function (e) {
                e.preventDefault();

                scope.$apply(function () {
                    scope.chat.isConvDroppableHover = false;
                });

                var fileList = e.target.files || e.dataTransfer.files;
                var arrFiles = [];

                for (var i = 0; i < fileList.length; i++) {
                    var file = fileList[i];
                    arrFiles.push(file);
                }

                scope.chat.sendFile(arrFiles);

                $timeout(function () {
                    var chatConvMsgs = $('#chatConvMsgs');
                    chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
                }, 100);
            });

            //
            //
            //
            //             m_chk_network();
            //
            //            var list_objfile = e.target.files || e.dataTransfer.files;
            //            delete list_objfile.length;
            //
            //            var sum_cf = tsh_elem('#upload_capacityfile'+tsh_wmsgextid_focusnow).get('capacity').toInt();
            //            Object.each(list_objfile, function(objfile){
            //                sum_cf += objfile.size;
            //            });
            //            if(sum_cf > capacityfile_max){
            //                setTimeout(function(){
            //                    tsh_self.barcontent_call("TSH_ALERT_OVERLIMITFILESIZE");
            //                }, 350);
            //            }
            //            else{
            //                if(m_barcontent_getcallvalue() == "TSH_ALERT_OVERLIMITFILESIZE"){
            //                    setTimeout(function(){
            //                        tsh_writemsg_closeoverlimitfilesize();
            //                        m_barcontent_hide();
            //                    }, 350);
            //                }
            //
            //
            //                var show_notification = function(){
            //                    tsh_elem('#upload_areanotif'+tsh_wmsgextid_focusnow).setStyle('display', "inline-block");
            //                };
            //
            //                var hide_notification = function(){
            //                    tsh_elem('#upload_areanotif'+tsh_wmsgextid_focusnow).setStyle('display', "none");
            //                };
            //
            //                var chk_notification = function(){
            //                    if(tsh_elems('#upload_container'+tsh_wmsgextid_focusnow+' .upload_progressbar').length == 0){
            //                        hide_notification();
            //                    }
            //                    else{
            //                        show_notification();
            //                    }
            //                };
            //
            //                var set_numfile = function(value){
            //                    tsh_elem('#upload_numfile'+tsh_wmsgextid_focusnow).set('num', value);
            //                    tsh_elem('#upload_numfile'+tsh_wmsgextid_focusnow).set('text', value+" "+((value > 1)? "files": "file"));
            //                };
            //
            //                var get_extfile = function(fname){
            //                    var list_ext = [
            //                        'aac', 'ai', 'aiff', 'avi', 'bmp', 'c', 'cpp', 'css', 'dat', 'dmg',
            //                        'doc', 'dotx', 'dwg', 'dxf', 'eps', 'exe', 'flv', 'gif', 'h', 'hpp',
            //                        'html', 'ics', 'iso', 'java', 'jpeg', 'jpg', 'key', 'mid', 'mp3', 'mp4',
            //                        'mpg', 'odf', 'ods', 'odt', 'otp', 'ots', 'ott', 'pdf', 'php', 'png',
            //                        'ppt', 'psd', 'py', 'qt', 'rar', 'rb', 'rtf', 'sql', 'tga', 'tgz',
            //                        'tiff', 'txt', 'wav', 'xls', 'xlsx', 'xml', 'yml', 'zip'
            //                    ];
            //
            //                    var reg_ext = '';
            //                    list_ext.each(function(ext){
            //                        reg_ext += (reg_ext? '|': '')+ext;
            //                    });
            //
            //                    if(fname.test(new RegExp('^(.+)\.('+reg_ext+')$', 'i'))){
            //                        var ext = fname.substring(fname.lastIndexOf('.')+1);
            //                        if(ext == 'jpeg'){ ext = 'jpg'; }
            //
            //                        return ext;
            //                    }
            //                    else{
            //                        return false;
            //                    }
            //                };
            //
            //                var format_capacityfile = function(value){
            //                    if(value > 1024*100){
            //                        cf = (value/(1024*1024)).round(2)+" MB";
            //                    }
            //                    else if(value > 100){
            //                        cf = (value/1024).round(2)+" KB";
            //                    }
            //                    else{
            //                        cf = value.round(2)+" B"
            //                    }
            //                    return cf;
            //                };
            //
            //                var set_capacityfile = function(value){
            //                    tsh_elem('#upload_capacityfile'+tsh_wmsgextid_focusnow).set('capacity', value);
            //                    tsh_elem('#upload_capacityfile'+tsh_wmsgextid_focusnow).set('text', format_capacityfile(value));
            //                };
            //
            //                show_notification();
            //
            //                Object.each(list_objfile, function(objfile){
            //                    var new_upload_overview = new Element('div', {
            //                        'class':"upload_overview_tbl",
            //                        'style':"color:rgb(165, 165, 165);",
            //                        'html': '<div class="upload_overview_tblcell" style="width:33px;"><div class="upload_overview_fileicon">'+(get_extfile(objfile.name)? get_extfile(objfile.name).toUpperCase(): '&nbsp;')+'</div></div>'+
            //                                '<div class="upload_overview_tblcell" style="width:85px;"><div class="upload_overview_filename m_ellipsis">'+objfile.name+'</div></div>'+
            //                                '<div class="upload_overview_tblcell"><div class="upload_overview_filesize">'+format_capacityfile(objfile.size)+'</div></div>'
            //                    });
            //                    var new_upload_progressbar = new Element('div', {'class':"upload_progressbar"});
            //                    var new_upload_progress = new Element('div', {'class':"upload_progress"});
            //
            //                    var new_upload_areatooledit = new Element('div', {'class':"upload_area_tooledit"});
            //                    var new_upload_tooledit = new Element('span', {'class':"upload_tooledit"});
            //                    var new_upload_btremove = new Element('span', {'elem':"button", 'text':"Remove", 'class':"upload_bt_remove"});
            //                    var new_upload_btcancel = new Element('span', {'elem':"button", 'text':"Cancel", 'class':"upload_bt_cancel"});
            //
            //                    var new_upload_btedit = new Element('a', {'href':"#", 'class':"upload_bt_edit", 'text':"X"});
            //
            //                    new_upload_progress.inject(new_upload_progressbar);
            //                    new_upload_overview.inject(new_upload_progressbar);
            //                    new_upload_btedit.inject(new_upload_progressbar);
            //
            //                    new_upload_btremove.inject(new_upload_tooledit);
            //                    new_upload_btcancel.inject(new_upload_tooledit);
            //                    new_upload_tooledit.inject(new_upload_areatooledit);
            //                    new_upload_areatooledit.inject(new_upload_progressbar);
            //
            //                    new_upload_progressbar.inject(tsh_elem('#upload_container'+tsh_wmsgextid_focusnow));
            //
            //                    if(window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
            //                        var xhr = new XMLHttpRequest();
            //                    }
            //                    else{// code for IE6, IE5
            //                        var xhr = new ActiveXObject("Microsoft.XMLHTTP");
            //                    }
            //
            //                    if (xhr.upload){
            //                        xhr.upload.addEventListener("progress", function(e) {
            //                            var percent = e.loaded / e.total * 100;
            //                            new_upload_progress.setStyle('width', percent+"%");
            //                        }, false);
            //
            //                        xhr.onreadystatechange = function(e) {
            //                            if(xhr.readyState == 4) {
            //                                new_upload_progress.setStyle('width', "100%");
            //                                if(xhr.status == 200 && xhr.responseText == 1){
            //                                    new_upload_progress.addClass('success');
            //                                    new_upload_overview.setStyle('color', "rgb(60, 60, 60)");
            //
            //                                    tsh_wmsgfiles.push(objfile);
            //                                    tsh_writemsg_saveinput();
            //
            //                                    var numfile = tsh_elem('#upload_numfile'+tsh_wmsgextid_focusnow).get('num').toInt() + 1;
            //                                    set_numfile(numfile);
            //
            //                                    var capacityfile = tsh_elem('#upload_capacityfile'+tsh_wmsgextid_focusnow).get('capacity').toInt() + objfile.size;
            //                                    set_capacityfile(capacityfile);
            //
            //                                    chk_notification();
            //
            //                                    tsh_writemsg_chkaccept();
            //                                }
            //                                else{
            //                                    new_upload_progress.addClass('failed');
            //                                }
            //                            }
            //                        };
            //
            //                        xhr.open("POST", "/tool/writemsg/ajax_uploadfile.php?do=process&wmsgind[typebox]="+tsh_wmsgind_focusnow.typebox+"&wmsgind[uid]="+tsh_wmsgind_focusnow.uid+"&wmsgind[typemsg]="+tsh_wmsgind_focusnow.typemsg, true);
            //                        xhr.setRequestHeader("Pragma", "no-cache");
            //                        xhr.setRequestHeader("Cache-Control", "no-cache");
            //                        xhr.setRequestHeader("Expires", "0");
            //                        xhr.setRequestHeader("X_FILENAME", encodeURIComponent(objfile.name));
            //                        xhr.setRequestHeader("X_FILESIZE", objfile.size);
            //                        xhr.send(objfile);
            //
            //                        tsh_writemsg_chkaccept();
            //                    }
            //
            //                    new_upload_btedit.addEvent('click', function(e){
            //                        e.stop();
            //
            //                        new Fx.Tween(new_upload_areatooledit, {
            //                            duration:350,
            //                            property:"width"
            //                        }).start(new_upload_tooledit.offsetWidth);
            //                    });
            //
            //                    new_upload_btremove.addEvents({
            //                        'mousedown':function(){
            //                            this.addClass("click");
            //                        },
            //                        'mouseup':function(){
            //                            this.removeClass("click");
            //
            //                            m_chk_network();
            //
            //                            if(xhr.readyState < 4){
            //                                xhr.abort();
            //                            }
            //                            else{
            //                                tsh_wmsgfiles.erase(objfile);
            //                                tsh_writemsg_saveinput();
            //
            //                                var numfile = tsh_elem('#upload_numfile'+tsh_wmsgextid_focusnow).get('num').toInt() - 1;
            //                                set_numfile(numfile);
            //
            //                                var capacityfile = tsh_elem('#upload_capacityfile'+tsh_wmsgextid_focusnow).get('capacity').toInt() - objfile.size;
            //                                set_capacityfile(capacityfile);
            //                            }
            //
            //                            tsh_writemsg_rmfile(tsh_wmsgind_focusnow, objfile.name);
            //
            //                            new_upload_progressbar.dispose();
            //
            //                            chk_notification();
            //
            //                            tsh_writemsg_chkaccept();
            //                        }
            //                    });
            //
            //                    new_upload_btcancel.addEvents({
            //                        'mousedown':function(){
            //                            this.addClass("click");
            //                        },
            //                        'mouseup':function(){
            //                            this.removeClass("click");
            //
            //                            new Fx.Tween(new_upload_areatooledit, {
            //                                duration:350,
            //                                property:"width"
            //                            }).start(0);
            //                        }
            //                    });
            //                });
            //            }
        }
    };
}

},{}],43:[function(require,module,exports){
'use strict';

chatConversationImageContent.$inject = ["AuthService"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatConversationImageContent = chatConversationImageContent;
function chatConversationImageContent(AuthService) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            elem.on('load', function () {
                var maxWidth = $(this).parent()[0].offsetWidth;
                var maxHeight = maxWidth * 1.6;
                var baseRatio = maxHeight / maxWidth;

                var currWidth = $(this).width();
                var currHeight = $(this).height();
                var currRatio = currHeight / currWidth;

                if (currRatio > baseRatio) {
                    $(this).css('height', maxHeight);
                } else {
                    $(this).css('width', maxWidth);
                }

                $(this).parent().css('width', $(this).width());
            });
        }
    };
}

},{}],44:[function(require,module,exports){
'use strict';

chatConversationInput.$inject = ["$timeout"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatConversationInput = chatConversationInput;
function chatConversationInput($timeout) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            elem.bind('focus', function () {
                scope.chat.messages[scope.chat.room].filter(function (chat) {
                    return chat.seen == false;
                }).forEach(function (chat) {
                    chat.seen = true;
                });
            });

            elem.bind('keyup', function (event) {
                if (event.keyCode == 13 && !event.shiftKey) {
                    scope.$apply(function () {
                        scope.chat.sendMessage();

                        $timeout(function () {
                            var chatConvMsgs = $('#chatConvMsgs');
                            chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
                        }, 100);
                    });
                }
            });
        }
    };
}

},{}],45:[function(require,module,exports){
'use strict';

chatConversationTakephoto.$inject = ["$timeout"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chatConversationTakephoto = chatConversationTakephoto;
function chatConversationTakephoto($timeout) {
  "ngInject";

  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      // Grab elements, create settings, etc.
      var canvas = document.getElementById('canvas');
      var context = canvas.getContext('2d');
      var video = document.getElementById('video');
      var mediaConfig = { video: true };
      var errBack = function errBack(e) {
        console.log('An error has occurred!', e);
      };

      // Put video listeners into place
      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia(mediaConfig).then(function (stream) {
          video.src = window.URL.createObjectURL(stream);
          video.play();
        });
      }

      /* Legacy code below! */
      else if (navigator.getUserMedia) {
          // Standard
          navigator.getUserMedia(mediaConfig, function (stream) {
            video.src = stream;
            video.play();
          }, errBack);
        } else if (navigator.webkitGetUserMedia) {
          // WebKit-prefixed
          navigator.webkitGetUserMedia(mediaConfig, function (stream) {
            video.src = window.webkitURL.createObjectURL(stream);
            video.play();
          }, errBack);
        } else if (navigator.mozGetUserMedia) {
          // Mozilla-prefixed
          navigator.mozGetUserMedia(mediaConfig, function (stream) {
            video.src = window.URL.createObjectURL(stream);
            video.play();
          }, errBack);
        }

      // Trigger photo take
      document.getElementById('snap').addEventListener('click', function () {
        context.drawImage(video, 0, 0, 640, 480);
      });
    }
  };
}

},{}],46:[function(require,module,exports){
'use strict';

chatConversationTool.$inject = ["$timeout", "$uibModal"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatConversationTool = chatConversationTool;
function chatConversationTool($timeout, $uibModal) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            var functionTools = {
                takephoto: chatCTTakephoto,
                sendfile: chatCTSendfile,
                emo: chatCTEmo,
                call: chatCTCall,
                videocall: chatCTVideocall,
                location: chatCTLocation
            };

            elem.bind('click', function (event) {
                var toolName = attrs.chatConversationTool;
                functionTools[toolName](scope, $timeout, $uibModal);
            });
        }
    };
}

function chatCTTakephoto(scope, $timeout, $uibModal) {
    var modal = $uibModal.open({
        templateUrl: "modules/chat/takephoto.html",
        controller: "ChatController",
        controllerAs: "chat",
        //backdrop: false,
        windowTemplateUrl: "modules/chat/window-takephoto.html"
    });
}

function chatCTEmo() {}

function chatCTSendfile(scope, $timeout, $uibModal) {
    var elInputFile = $('<input/>', {
        type: "file",
        multiple: ""
    }).appendTo('#chatConvBrowseFiles');

    elInputFile.on('change', function (event) {
        var fileList = event.target.files || event.dataTransfer.files;
        var arrFiles = [];

        for (var i = 0; i < fileList.length; i++) {
            var file = fileList[i];
            arrFiles.push(file);
        }

        scope.chat.sendFile(arrFiles);

        $timeout(function () {
            var chatConvMsgs = $('#chatConvMsgs');
            chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
        }, 100);
    });

    elInputFile.click();
}

function chatCTCall() {}

function chatCTVideocall() {}

function chatCTLocation() {}

},{}],47:[function(require,module,exports){
'use strict';

chatModule.$inject = ["$document"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatModule = chatModule;
function chatModule($document) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            //$document.bind('click', function(event){
            elem.bind('click', function (event) {
                if ($.inArray(event.target, $('.contact, .contact *, .conversation, .conversation *')) == -1) {
                    scope.$apply(function () {
                        scope.chat.room = "";
                        scope.chat.convState = false;
                    });
                }
            });
        }
    };
}

},{}],48:[function(require,module,exports){
'use strict';

chatRid.$inject = ["$timeout"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatRid = chatRid;
function chatRid($timeout) {
    "ngInject";

    return {
        restrict: 'A',
        link: function link(scope, elem, attrs) {
            elem.bind('click', function (event) {
                if (scope.chat.convState && scope.chat.room == attrs.chatRid) {
                    scope.$apply(function () {
                        scope.chat.room = "";
                        scope.chat.convState = false;
                    });
                } else {
                    scope.$apply(function () {
                        scope.chat.room = attrs.chatRid;
                        scope.chat.convState = true;

                        $timeout(function () {
                            //console.log($("#chatConvInput").focus);

                            $("#chatConvInput").focus();
                        }, 100);
                    });
                }
            });
        }
    };
}

},{}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChatConfig = ChatConfig;
function ChatConfig($stateProvider) {};

},{}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc controller
 * @name Chat.controller:ChatController
 * @description Controller for Chat module.
 */
var ChatController = exports.ChatController = function () {
    ChatController.$inject = ["ChatSocketService", "AuthService", "FileAttachService", "$scope", "$filter", "$timeout"];
    function ChatController(ChatSocketService, AuthService, FileAttachService, $scope, $filter, $timeout) {
        "ngInject";

        var _this = this;

        _classCallCheck(this, ChatController);

        this.socket = ChatSocketService;
        this._AuthService = AuthService;
        this._FileAttachService = FileAttachService;
        this._$scope = $scope;

        this.newMsg = "";

        this.icon = {
            'r1': "http://i.imgur.com/ae5r9VA.png",
            'r2': "http://i.imgur.com/tnMJGyT.png",
            'r3': "http://i.imgur.com/tnMJGyT.png",
            'r4': "http://i.imgur.com/ae5r9VA.png",
            'r5': "http://i.imgur.com/tnMJGyT.png"
        };

        this.name = {
            'r1': "Kevin Spacey",
            'r2': "Rosamund Pike",
            'r3': "Eva Green",
            'r4': "Paul Newman",
            'r5': "Thomas Break"
        };

        this.messages = {
            'r1': [],
            'r2': [],
            'r3': [],
            'r4': [],
            'r5': []
        };

        this.room = "";

        this.convState = false;

        this.socket.on('connect', function () {
            console.log("io connect success");

            //            this.socket.emit('get:contacts');
            //
            //            this.socket.on('get:contacts', function (data) {
            //                console.log(data);
            //            });


            _this.socket.on('send:message', function (data) {
                data.params.seen = false;
                _this.messages[data.room].push(data.params);

                var chatConvMsgs = $('#chatConvMsgs');
                var needScrollToBottom = chatConvMsgs[0].scrollHeight - (chatConvMsgs[0].scrollTop + chatConvMsgs.height() + parseInt(chatConvMsgs.css('padding-top'))) < 1;
                $timeout(function () {
                    if (needScrollToBottom) {
                        chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
                    }
                }, 100);
            });

            _this.socket.on('send:image', function (data) {
                //                let reader = new FileReader();
                //                 reader.onload = function (evt) {
                //                     let fContent = evt.target.result;
                //
                //                     let chat = {
                //                        icon: data.params.icon,
                //                        username: data.params.username,
                //                        type: "image",
                //                        content: fContent,
                //                        origDt: data.params.origDt,
                //                         seen: false
                //                     };
                //
                //                     this.messages[data.room].push(chat);
                //                 };
                //                reader.readAsDataURL(data.params.fileInfo);


                data.params.seen = false;
                _this.messages[data.room].push(data.params);

                var chatConvMsgs = $('#chatConvMsgs');
                var needScrollToBottom = chatConvMsgs[0].scrollHeight - (chatConvMsgs[0].scrollTop + chatConvMsgs.height() + parseInt(chatConvMsgs.css('padding-top'))) < 1;
                $timeout(function () {
                    if (needScrollToBottom) {
                        chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
                    }
                }, 100);
            });

            _this.socket.on('send:file', function (data) {
                data.params.seen = false;
                _this.messages[data.room].push(data.params);

                var chatConvMsgs = $('#chatConvMsgs');
                var needScrollToBottom = chatConvMsgs[0].scrollHeight - (chatConvMsgs[0].scrollTop + chatConvMsgs.height() + parseInt(chatConvMsgs.css('padding-top'))) < 1;
                $timeout(function () {
                    if (needScrollToBottom) {
                        chatConvMsgs.scrollTop(chatConvMsgs[0].scrollHeight);
                    }
                }, 100);
            });
        });
    }

    _createClass(ChatController, [{
        key: "isSender",
        value: function isSender(username) {
            return username == this._AuthService.profile.username;
        }
    }, {
        key: "getNumNotify",
        value: function getNumNotify(room) {
            return this.messages[room].filter(function (chat) {
                return chat.seen == false;
            }).length;
        }
    }, {
        key: "getIconFile",
        value: function getIconFile(fileName) {
            return this._FileAttachService.getIcon(fileName);
        }
    }, {
        key: "formatCapacityFile",
        value: function formatCapacityFile(fileSize) {
            return this._FileAttachService.formatCapacity(fileSize);
        }
    }, {
        key: "sendMessage",
        value: function sendMessage() {
            if (this.newMsg.trim() != "") {
                var chat = {
                    icon: "http://placehold.it/16x16",
                    username: this._AuthService.profile.username,
                    type: "text",
                    text: this.newMsg,
                    origDt: new Date() //$filter('date')(new Date(), 'HH:mm:ss')
                };

                //this.socket.emit('send:message', chat);
                this.socket.emit('send:message', {
                    room: this.room,
                    params: chat
                });

                // add the message to our model locally
                this.messages[this.room].push(chat);

                // clear message box
                this.newMsg = "";
            }
        }
    }, {
        key: "sendFile",
        value: function sendFile(arrfiles) {
            var _this2 = this;

            arrfiles.forEach(function (file) {
                if (/^image/.test(file.type)) {
                    var reader = new FileReader();
                    reader.onload = function (evt) {
                        var fContent = evt.target.result;

                        //                    if (checkSize(size) && isTypeValid(type)) {
                        //                        return scope.$apply(function () {
                        //                            scope.file = evt.target.result;
                        //                            if (angular.isString(scope.fileName)) {
                        //                                return scope.fileName = name;
                        //                            }
                        //                        });
                        //                    }

                        var chat = {
                            icon: "http://placehold.it/16x16",
                            username: _this2._AuthService.profile.username,
                            type: "image",
                            content: fContent,
                            origDt: new Date() //$filter('date')(new Date(), 'HH:mm:ss')
                        };

                        _this2.socket.emit('send:image', {
                            room: _this2.room,
                            params: chat
                        });

                        _this2._$scope.$apply(function () {
                            _this2.messages[_this2.room].push(chat);
                        });
                    };
                    reader.readAsDataURL(file);
                } else {
                    (function () {
                        var chat = {
                            icon: "http://placehold.it/16x16",
                            username: _this2._AuthService.profile.username,
                            type: "file",
                            fileName: file.name,
                            fileType: file.type,
                            fileSize: file.size,
                            origDt: new Date() //$filter('date')(new Date(), 'HH:mm:ss')
                        };

                        _this2.socket.emit('send:file', {
                            room: _this2.room,
                            params: chat
                        });

                        _this2._$scope.$apply(function () {
                            _this2.messages[_this2.room].push(chat);
                        });
                    })();
                }
            });
        }
    }, {
        key: "currentMessages",
        get: function get() {
            return this.messages[this.room];
        }
    }, {
        key: "currentName",
        get: function get() {
            return this.name[this.room];
        }
    }, {
        key: "currentIcon",
        get: function get() {
            return this.icon[this.room];
        }
    }]);

    return ChatController;
}();

},{}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChatDataModel = ChatDataModel;
function ChatDataModel() {
    "ngInject";

    var Service = {};
    return Service;
}

},{}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChatRun = ChatRun;
function ChatRun($rootScope, $state, AuthService) {}

},{}],53:[function(require,module,exports){
"use strict";

ChatSocketService.$inject = ["$rootScope", "MainAppConstant"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChatSocketService = ChatSocketService;
function ChatSocketService($rootScope, MainAppConstant) {
    "ngInject";

    var socket = io.connect(MainAppConstant.apiPath);
    //var socket = io.connect("http://localhost:8000");

    return {
        on: function on(eventName, callback) {
            socket.on(eventName, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    callback.apply(socket, args);
                });
            });
        },
        emit: function emit(eventName, data, callback) {
            socket.emit(eventName, data, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    if (callback) {
                        callback.apply(socket, args);
                    }
                });
            });
        }
    };
}

},{}],54:[function(require,module,exports){
"use strict";

var _chat = require("./chat.config");

var _chatSocket = require("./chat.socket.service");

var _chatDatamodel = require("./chat.datamodel.service");

var _chat2 = require("./chat.controller");

var _chatModule = require("./chat-module.directive");

var _chatRid = require("./chat-rid.directive");

var _chatConversationClose = require("./chat-conversation-close.directive");

var _chatConversationDroppable = require("./chat-conversation-droppable.directive");

var _chatConversationImageContent = require("./chat-conversation-image-content.directive");

var _chatConversationTool = require("./chat-conversation-tool.directive");

var _chatConversationInput = require("./chat-conversation-input.directive");

var _chatConversationTakephoto = require("./chat-conversation-takephoto.directive");

var _chat3 = require("./chat.run");

angular.module("Chat").config(_chat.ChatConfig).factory('ChatSocketService', _chatSocket.ChatSocketService).factory("ChatDataModel", _chatDatamodel.ChatDataModel).controller("ChatController", _chat2.ChatController).directive("chatModule", _chatModule.chatModule).directive("chatRid", _chatRid.chatRid).directive("chatConversationClose", _chatConversationClose.chatConversationClose).directive("chatConversationDroppable", _chatConversationDroppable.chatConversationDroppable).directive("chatConversationImageContent", _chatConversationImageContent.chatConversationImageContent).directive("chatConversationTool", _chatConversationTool.chatConversationTool).directive("chatConversationInput", _chatConversationInput.chatConversationInput).directive("chatConversationTakephoto", _chatConversationTakephoto.chatConversationTakephoto).run(_chat3.ChatRun);

},{"./chat-conversation-close.directive":41,"./chat-conversation-droppable.directive":42,"./chat-conversation-image-content.directive":43,"./chat-conversation-input.directive":44,"./chat-conversation-takephoto.directive":45,"./chat-conversation-tool.directive":46,"./chat-module.directive":47,"./chat-rid.directive":48,"./chat.config":49,"./chat.controller":50,"./chat.datamodel.service":51,"./chat.run":52,"./chat.socket.service":53}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommunityCenterController = exports.CommunityCenterController = function CommunityCenterController() {
    "ngInject";

    _classCallCheck(this, CommunityCenterController);
};

},{}],56:[function(require,module,exports){
"use strict";

CommunityConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommunityConfig = CommunityConfig;
function CommunityConfig($stateProvider) {
  "ngInject";

  $stateProvider.state("main.community", {
    url: "/community",
    title: "Community",
    data: {
      css: "/css/community/community.css",
      authenticate: true,
      permissions: ["restricted"]
    },
    views: {
      "top": {
        templateUrl: "modules/community/community-top.html",
        controller: "CommunityTopController",
        controllerAs: "community"

      },
      "left": {
        templateUrl: "modules/community/community-left.html",
        controller: "CommunityLeftController",
        controllerAs: "community"

      },
      "center": {
        templateUrl: "modules/community/community-center.html",
        controller: "CommunityCenterController",
        controllerAs: "community"

      },
      //                "right" :{
      //                        templateUrl: "modules/community/community-right.html",
      //                        controller: "CommunityRightController",
      //                        controllerAs: "community",
      //
      //
      //                 }
      "right": {
        templateUrl: "modules/chat/chat.html",
        controller: "ChatController",
        controllerAs: "chat"
      }

    }

  });
};

},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommunityLeftController = exports.CommunityLeftController = function CommunityLeftController() {
    "ngInject";

    _classCallCheck(this, CommunityLeftController);
};

},{}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommunityRightController = exports.CommunityRightController = function CommunityRightController() {
    "ngInject";

    _classCallCheck(this, CommunityRightController);
};

},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommunityTopController = exports.CommunityTopController = function CommunityTopController() {
    "ngInject";

    _classCallCheck(this, CommunityTopController);
};

},{}],60:[function(require,module,exports){
"use strict";

var _community = require("./community.config");

var _communityTop = require("./community.top.controller");

var _communityLeft = require("./community.left.controller");

var _communityCenter = require("./community.center.controller");

var _communityRight = require("./community.right.controller");

angular.module("Community").config(_community.CommunityConfig).controller("CommunityTopController", _communityTop.CommunityTopController).controller("CommunityLeftController", _communityLeft.CommunityLeftController).controller("CommunityCenterController", _communityCenter.CommunityCenterController);
//    .controller("CommunityRightController", CommunityRightController);

},{"./community.center.controller":55,"./community.config":56,"./community.left.controller":57,"./community.right.controller":58,"./community.top.controller":59}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ContactsCenterController = exports.ContactsCenterController = function ContactsCenterController() {
    "ngInject";

    _classCallCheck(this, ContactsCenterController);
};

},{}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ContactsLeftController = exports.ContactsLeftController = function ContactsLeftController() {
    "ngInject";

    _classCallCheck(this, ContactsLeftController);
};

},{}],63:[function(require,module,exports){
"use strict";

var _contactsLeft = require("./contacts.left.controller");

var _contactsCenter = require("./contacts.center.controller");

angular.module("Contacts").controller("ContactsLeftController", _contactsLeft.ContactsLeftController).controller("ContactsCenterController", _contactsCenter.ContactsCenterController);

},{"./contacts.center.controller":61,"./contacts.left.controller":62}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownCenterBankController = exports.DowntownCenterBankController = function DowntownCenterBankController() {
    "ngInject";

    _classCallCheck(this, DowntownCenterBankController);
};

},{}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownCenterCatalogController = exports.DowntownCenterCatalogController = function DowntownCenterCatalogController() {
    "ngInject";

    _classCallCheck(this, DowntownCenterCatalogController);
};

},{}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownCenterController = exports.DowntownCenterController = function DowntownCenterController() {
    "ngInject";

    _classCallCheck(this, DowntownCenterController);
};

},{}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownCenterItemController = exports.DowntownCenterItemController = function DowntownCenterItemController() {
    "ngInject";

    _classCallCheck(this, DowntownCenterItemController);
};

},{}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownCenterShopController = exports.DowntownCenterShopController = function DowntownCenterShopController() {
    "ngInject";

    _classCallCheck(this, DowntownCenterShopController);
};

},{}],69:[function(require,module,exports){
"use strict";

DowntownConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DowntownConfig = DowntownConfig;
function DowntownConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.downtown", {
        url: "/downtown",
        title: "Downtown",
        data: {
            css: "/css/downtown/downtown.css",
            authenticate: false
        },
        views: {
            "top": {
                templateUrl: "modules/downtown/downtown-top.html",
                controller: "DowntownTopController",
                controllerAs: "downtown"

            },
            "left": {
                templateUrl: "modules/downtown/downtown-left.html",
                controller: "DowntownLeftController",
                controllerAs: "downtown"

            },
            "center": {
                templateUrl: "modules/downtown/downtown-center.html",
                controller: "DowntownCenterController",
                controllerAs: "downtown"
            },
            //                "right":{
            //                    templateUrl: "modules/downtown/downtown-right.html",
            //                    controller: "DowntownRightController",
            //                    controllerAs: "downtown",
            //                }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }
        }

    }).state("main.downtown.bank", {
        url: "/bank",
        views: {
            "center@main": {
                templateUrl: "modules/downtown/downtown-center-bank.html",
                controller: "DowntownCenterBankController",
                controllerAs: "downtown"
            }
        }
    }).state("main.downtown.shop", {
        url: "/shop",
        views: {
            "center@main": {
                templateUrl: "modules/downtown/downtown-center-shop.html",
                controller: "DowntownCenterShopController",
                controllerAs: "downtown"
            }
        }
    }).state("main.downtown.catalog", {
        url: "/catalog",
        views: {
            "center@main": {
                templateUrl: "modules/downtown/downtown-center-catalog.html",
                controller: "DowntownCenterCatalogController",
                controllerAs: "downtown"
            }
        }
    }).state("main.downtown.item", {
        url: "/item",
        views: {
            "center@main": {
                templateUrl: "modules/downtown/downtown-center-item.html",
                controller: "DowntownCenterItemController",
                controllerAs: "downtown"
            }
        }
    });
};

},{}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownLeftController = exports.DowntownLeftController = function DowntownLeftController() {
    "ngInject";

    _classCallCheck(this, DowntownLeftController);
};

},{}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownRightController = exports.DowntownRightController = function DowntownRightController() {
    "ngInject";

    _classCallCheck(this, DowntownRightController);
};

},{}],72:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DowntownTopController = exports.DowntownTopController = function DowntownTopController() {
    "ngInject";

    _classCallCheck(this, DowntownTopController);
};

},{}],73:[function(require,module,exports){
"use strict";

var _downtown = require("./downtown.config");

var _downtownTop = require("./downtown.top.controller");

var _downtownLeft = require("./downtown.left.controller");

var _downtownCenter = require("./downtown.center.controller");

var _downtownRight = require("./downtown.right.controller");

var _downtownCenterBank = require("./downtown.center.bank.controller");

var _downtownCenterItem = require("./downtown.center.item.controller");

var _downtownCenterShop = require("./downtown.center.shop.controller");

var _downtownCenterCatalog = require("./downtown.center.catalog.controller");

angular.module("Downtown").config(_downtown.DowntownConfig).controller("DowntownTopController", _downtownTop.DowntownTopController).controller("DowntownLeftController", _downtownLeft.DowntownLeftController).controller("DowntownCenterController", _downtownCenter.DowntownCenterController).controller("DowntownRightController", _downtownRight.DowntownRightController).controller("DowntownCenterBankController", _downtownCenterBank.DowntownCenterBankController).controller("DowntownCenterItemController", _downtownCenterItem.DowntownCenterItemController).controller("DowntownCenterShopController", _downtownCenterShop.DowntownCenterShopController).controller("DowntownCenterCatalogController", _downtownCenterCatalog.DowntownCenterCatalogController);

function openCity(evt, cityName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(cityName).style.display = "block";
    evt.currentTarget.className += " active";
}

},{"./downtown.center.bank.controller":64,"./downtown.center.catalog.controller":65,"./downtown.center.controller":66,"./downtown.center.item.controller":67,"./downtown.center.shop.controller":68,"./downtown.config":69,"./downtown.left.controller":70,"./downtown.right.controller":71,"./downtown.top.controller":72}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelpCenterController = exports.HelpCenterController = function HelpCenterController() {
    "ngInject";

    _classCallCheck(this, HelpCenterController);
};

},{}],75:[function(require,module,exports){
"use strict";

HelpConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HelpConfig = HelpConfig;
function HelpConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.help", {
        url: "/help",
        title: "Help",
        data: {
            css: "/css/help/help.css",
            authenticate: false
        },
        views: {

            "top": {
                templateUrl: "modules/help/help-top.html",
                controller: "HelpTopController",
                controllerAs: "help"
            },
            "left": {
                templateUrl: "modules/help/help-left.html",
                controller: "HelpLeftController",
                controllerAs: "help"
            },
            "center": {
                templateUrl: "modules/help/help-center.html",
                controller: "HelpCenterController",
                controllerAs: "help"

            },
            //                "right":{
            //                    templateUrl: "modules/help/help-right.html",
            //                    controller: "HelpRightController",
            //                    controllerAs: "help",
            //
            //                }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }

        }

    });
};

},{}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelpLeftController = exports.HelpLeftController = function HelpLeftController() {
    "ngInject";

    _classCallCheck(this, HelpLeftController);
};

},{}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelpRightController = exports.HelpRightController = function HelpRightController() {
    "ngInject";

    _classCallCheck(this, HelpRightController);
};

},{}],78:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelpTopController = exports.HelpTopController = function HelpTopController() {
    "ngInject";

    _classCallCheck(this, HelpTopController);
};

},{}],79:[function(require,module,exports){
"use strict";

var _help = require("./help.config");

var _helpTop = require("./help.top.controller");

var _helpLeft = require("./help.left.controller");

var _helpCenter = require("./help.center.controller");

var _helpRight = require("./help.right.controller");

angular.module("Help").config(_help.HelpConfig).controller("HelpTopController", _helpTop.HelpTopController).controller("HelpLeftController", _helpLeft.HelpLeftController).controller("HelpCenterController", _helpCenter.HelpCenterController);
//    .controller("HelpRightController", HelpRightController);

},{"./help.center.controller":74,"./help.config":75,"./help.left.controller":76,"./help.right.controller":77,"./help.top.controller":78}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HomeCenterController = exports.HomeCenterController = function HomeCenterController() {
    "ngInject";

    _classCallCheck(this, HomeCenterController);
};

},{}],81:[function(require,module,exports){
"use strict";

HomeConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HomeConfig = HomeConfig;
function HomeConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.home", {
        url: "/home",
        title: "Home",
        data: {
            css: "/css/home/home.css",
            authenticate: true
        },
        views: {
            "top": {
                templateUrl: "modules/home/home-top.html",
                controller: "HomeTopController",
                controllerAs: "home"

            },
            //                "left":{
            //                    templateUrl: "modules/home/home-left.html",
            //                    controller: "HomeLeftController",
            //                    controllerAs: "home",
            //
            //                },
            //                "center":{
            //                    templateUrl: "modules/home/home-center.html",
            //                    controller: "HomeCenterController",
            //                    controllerAs: "home",
            //
            //                },
            //                "right":{
            //                    templateUrl: "modules/home/home-right.html",
            //                    controller: "HomeRightController",
            //                    controllerAs: "home",
            //
            //                }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }
        }
    }).state("main.home.timeline", {
        url: "/timeline",
        title: "Timeline",
        views: {
            "left@main": {
                templateUrl: "modules/timeline/timeline-left.html",
                controller: "TimelineLeftController",
                controllerAs: "timeline"
            },
            "center@main": {
                templateUrl: "modules/timeline/timeline-center.html",
                controller: "TimelineCenterController",
                controllerAs: "timeline"
            }
        }
    }).state("main.home.mail", {
        url: "/mail",
        title: "Mail",
        views: {
            "left@main": {
                templateUrl: "modules/mail/mail-left.html",
                controller: "MailLeftController",
                controllerAs: "mail"
            },
            "center@main": {
                templateUrl: "modules/mail/mail-center.html",
                controller: "MailCenterController",
                controllerAs: "mail"
            }
        },
        data: {
            css: "/css/mail/mail.css"
        }
    }).state("main.home.contacts", {
        url: "/contacts",
        title: "Contacts",
        views: {
            "left@main": {
                templateUrl: "modules/contacts/contacts-left.html",
                controller: "ContactsLeftController",
                controllerAs: "contacts"
            },
            "center@main": {
                templateUrl: "modules/contacts/contacts-center.html",
                controller: "ContactsCenterController",
                controllerAs: "contacts"
            }
        }
    }).state("main.home.notes", {
        url: "/notes",
        title: "Notes",
        views: {
            "left@main": {
                templateUrl: "modules/notes/notes-left.html",
                controller: "NotesLeftController",
                controllerAs: "notes"
            },
            "center@main": {
                templateUrl: "modules/notes/notes-center.html",
                controller: "NotesCenterController",
                controllerAs: "notes"
            }
        }
    }).state("main.home.calendar", {
        url: "/calendar",
        title: "Calendar",
        views: {
            "left@main": {
                templateUrl: "modules/calendar/calendar-left.html",
                controller: "CalendarLeftController",
                controllerAs: "calendar"
            },
            "center@main": {
                templateUrl: "modules/calendar/calendar-center.html",
                controller: "CalendarCenterController",
                controllerAs: "calendar"
            }
        }
    });
};

},{}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HomeLeftController = exports.HomeLeftController = function HomeLeftController() {
    "ngInject";

    _classCallCheck(this, HomeLeftController);
};

},{}],83:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HomeRightController = exports.HomeRightController = function HomeRightController() {
    "ngInject";

    _classCallCheck(this, HomeRightController);
};

},{}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HomeTopController = exports.HomeTopController = function HomeTopController() {
    "ngInject";

    _classCallCheck(this, HomeTopController);
};

},{}],85:[function(require,module,exports){
"use strict";

var _home = require("./home.config");

var _homeTop = require("./home.top.controller");

var _homeLeft = require("./home.left.controller");

var _homeCenter = require("./home.center.controller");

var _homeRight = require("./home.right.controller");

angular.module("Home").config(_home.HomeConfig).controller("HomeTopController", _homeTop.HomeTopController).controller("HomeLeftController", _homeLeft.HomeLeftController).controller("HomeCenterController", _homeCenter.HomeCenterController);

//    .controller("HomeRightController", HomeRightController);

//(function(){
//
//  var chat = {
//    messageToSend: '',
//    messageResponses: [
//      'Why did the web developer leave the restaurant? Because of the table layout.',
//      'How do you comfort a JavaScript bug? You console it.',
//      'An SQL query enters a bar, approaches two tables and asks: "May I join you?"',
//      'What is the most used language in programming? Profanity.',
//      'What is the object-oriented way to become wealthy? Inheritance.',
//      'An SEO expert walks into a bar, bars, pub, tavern, public house, Irish pub, drinks, beer, alcohol'
//    ],
//    init: function() {
//      this.cacheDOM();
//      this.bindEvents();
//      this.render();
//    },
//    cacheDOM: function() {
//      this.$chatHistory = $('.chat-history');
//      this.$button = $('button');
//      this.$textarea = $('#message-to-send');
//      this.$chatHistoryList =  this.$chatHistory.find('ul');
//    },
//    bindEvents: function() {
//      this.$button.on('click', this.addMessage.bind(this));
//      this.$textarea.on('keyup', this.addMessageEnter.bind(this));
//    },
//    render: function() {
//      this.scrollToBottom();
//      if (this.messageToSend.trim() !== '') {
//        var template = Handlebars.compile( $("#message-template").html());
//        var context = {
//          messageOutput: this.messageToSend,
//          time: this.getCurrentTime()
//        };
//
//        this.$chatHistoryList.append(template(context));
//        this.scrollToBottom();
//        this.$textarea.val('');
//
//        // responses
//        var templateResponse = Handlebars.compile( $("#message-response-template").html());
//        var contextResponse = {
//          response: this.getRandomItem(this.messageResponses),
//          time: this.getCurrentTime()
//        };
//
//        setTimeout(function() {
//          this.$chatHistoryList.append(templateResponse(contextResponse));
//          this.scrollToBottom();
//        }.bind(this), 1500);
//
//      }
//
//    },
//
//    addMessage: function() {
//      this.messageToSend = this.$textarea.val()
//      this.render();
//    },
//    addMessageEnter: function(event) {
//        // enter was pressed
//        if (event.keyCode === 13) {
//          this.addMessage();
//        }
//    },
//    scrollToBottom: function() {
//       this.$chatHistory.scrollTop(this.$chatHistory[0].scrollHeight);
//    },
//    getCurrentTime: function() {
//      return new Date().toLocaleTimeString().
//              replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, "$1$3");
//    },
//    getRandomItem: function(arr) {
//      return arr[Math.floor(Math.random()*arr.length)];
//    }
//
//  };
//
//  chat.init();
//
//  var searchFilter = {
//    options: { valueNames: ['name'] },
//    init: function() {
//      var userList = new List('people-list', this.options);
//      var noItems = $('<li id="no-items-found">No items found</li>');
//
//      userList.on('updated', function(list) {
//        if (list.matchingItems.length === 0) {
//          $(list.list).append(noItems);
//        } else {
//          noItems.detach();
//        }
//      });
//    }
//  };
//
//  searchFilter.init();
//
//})();

},{"./home.center.controller":80,"./home.config":81,"./home.left.controller":82,"./home.right.controller":83,"./home.top.controller":84}],86:[function(require,module,exports){
"use strict";

var _item = require("./item.config");

var _itemTop = require("./item.top.controller");

var _itemLeft = require("./item.left.controller");

var _itemCenter = require("./item.center.controller");

var _itemRight = require("./item.right.controller");

angular.module("Item").config(_item.ItemConfig).controller("HelTopController", _itemTop.ItemTopController).controller("ItemLeftController", _itemLeft.ItemLeftController).controller("ItemCenterController", _itemCenter.ItemCenterController).controller("ItemRightController", _itemRight.ItemRightController);

},{"./item.center.controller":87,"./item.config":88,"./item.left.controller":89,"./item.right.controller":90,"./item.top.controller":91}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ItemCenterController = exports.ItemCenterController = function ItemCenterController() {
    "ngInject";

    _classCallCheck(this, ItemCenterController);
};

$(document).ready(function () {

    // Dock the header to the top of the window when scrolled past the banner. This is the default behaviour.

    $('.header-two').scrollToFixed();
    // previous summary up the page.

    var summaries = $('.summary');
    summaries.each(function (i) {
        var summary = $(summaries[i]);
        var next = summaries[i + 1];

        summary.scrollToFixed({
            marginTop: $('.header-two').outerHeight(true) + 10,
            zIndex: 999
        });
    });
});

jQuery(document).ready(function ($) {
    $(".scroll").click(function (event) {
        event.preventDefault();
        $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
    });
});

$(document).ready(function () {

    var defaults = {
        containerID: 'toTop', // fading element id
        containerHoverID: 'toTopHover', // fading element hover id
        scrollSpeed: 1200,
        easingType: 'linear'
    };

    $().UItoTop({ easingType: 'easeOutQuart' });
});

},{}],88:[function(require,module,exports){
"use strict";

ItemConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ItemConfig = ItemConfig;
function ItemConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.item", {
        url: "/item",
        title: "Item",
        data: {
            css: "/css/item/item.css",
            authenticate: true,
            permissions: ["restricted"]
        },
        views: {
            "top": {
                templateUrl: "modules/item/item-top.html",
                controller: "ItemTopController",
                controllerAs: "item"

            },
            "left": {
                templateUrl: "modules/item/item-left.html",
                controller: "ItemLeftController",
                controllerAs: "item"

            },
            "center": {
                templateUrl: "modules/item/item-center.html",
                controller: "ItemCenterController",
                controllerAs: "item"

            },
            "right": {
                templateUrl: "modules/item/item-right.html",
                controller: "ItemRightController",
                controllerAs: "item"

            }
        }

    });
};

},{}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ItemLeftController = exports.ItemLeftController = function ItemLeftController() {
    "ngInject";

    _classCallCheck(this, ItemLeftController);
};

},{}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ItemRightController = exports.ItemRightController = function ItemRightController() {
    "ngInject";

    _classCallCheck(this, ItemRightController);
};

},{}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ItemTopController = exports.ItemTopController = function ItemTopController() {
    "ngInject";

    _classCallCheck(this, ItemTopController);
};

},{}],92:[function(require,module,exports){
"use strict";

var _mailLeft = require("./mail.left.controller");

var _mailCenter = require("./mail.center.controller");

angular.module("Mail").controller("MailLeftController", _mailLeft.MailLeftController).controller("MailCenterController", _mailCenter.MailCenterController);

},{"./mail.center.controller":93,"./mail.left.controller":94}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MailCenterController = exports.MailCenterController = function MailCenterController() {
    "ngInject";

    _classCallCheck(this, MailCenterController);
};

},{}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MailLeftController = exports.MailLeftController = function MailLeftController() {
    "ngInject";

    _classCallCheck(this, MailLeftController);
};

},{}],95:[function(require,module,exports){
"use strict";

angular.module("MainApp", ["ngAnimate", "ngIdle", "uiRouterStyles",
//"stateFiles",
//"oc.lazyLoad",
"ui.bootstrap", "angular-jwt",
//"filearts.dragDrop",
"templates",
//"calendee.valOnTimeout",
"Directives", "Services", "Home", "Cart", "Community", "Downtown", "Help", "Search", "Setting", "Signin", "Auth", "Signout", "User", "Shop", "Item", "Chat", "Timeline", "Mail", "Contacts", "Notes", "Calendar"]);

angular.module("Directives", []);
angular.module("Services", []);

angular.module("Home", []);
angular.module("Cart", []);
angular.module("Community", []);
angular.module("Downtown", []);
angular.module("Help", []);
angular.module("Search", []);
angular.module("Setting", []);
angular.module("Signin", []);

angular.module("Auth", []);

angular.module("Signout", []);
angular.module("User", []);
angular.module("Shop", []);
angular.module("Item", []);
angular.module("Chat", []);
angular.module("Timeline", []);
angular.module("Mail", []);
angular.module("Contacts", []);
angular.module("Notes", []);
angular.module("Calendar", []);

},{}],96:[function(require,module,exports){
"use strict";

var _notesLeft = require("./notes.left.controller");

var _notesCenter = require("./notes.center.controller");

angular.module("Notes").controller("NotesLeftController", _notesLeft.NotesLeftController).controller("NotesCenterController", _notesCenter.NotesCenterController);

},{"./notes.center.controller":97,"./notes.left.controller":98}],97:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotesCenterController = exports.NotesCenterController = function NotesCenterController() {
    "ngInject";

    _classCallCheck(this, NotesCenterController);
};

},{}],98:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotesLeftController = exports.NotesLeftController = function NotesLeftController() {
    "ngInject";

    _classCallCheck(this, NotesLeftController);
};

},{}],99:[function(require,module,exports){
"use strict";

var _search = require("./search.config");

var _search2 = require("./search.controller");

angular.module("Search").config(_search.SearchConfig).controller("SearchController", _search2.SearchController);

//$(document).ready(function() {
//
//  var $searchc = $(".searchc"),
//      $input = $(".searchc-input"),
//      $close = $(".searchc-close"),
//      $svg = $(".searchc-svg"),
//      $path = $(".searchc-svg__path")[0],
//      initD = $svg.data("init"),
//      midD = $svg.data("mid"),
//      finalD = $svg.data("active"),
//      backDelay = 400,
//      midAnim = 200,
//      bigAnim = 400,
//      animating = false;
//
//  $(document).on("click", ".searchc:not(.active)", function() {
//    if (animating) return;
//    animating = true;
//    $searchc.addClass("active");
//
//    Snap($path).animate({"path": midD}, midAnim, mina.backin, function() {
//      Snap($path).animate({"path": finalD}, bigAnim, mina.easeinout, function() {
//        $input.addClass("visible");
//        $input.focus();
//        $close.addClass("visible");
//        animating = false;
//      });
//    });
//
//  });
//
//  $(document).on("click", ".searchc-close", function() {
//    if (animating) return;
//    animating = true;
//    $input.removeClass("visible");
//    $close.removeClass("visible");
//    $searchc.removeClass("active");
//
//    setTimeout(function() {
//      Snap($path).animate({"path": midD}, bigAnim, mina.easeinout, function() {
//        Snap($path).animate({"path": initD}, midAnim, mina.easeinout, function() {
//          animating = false;
//        });
//      });
//    }, backDelay);
//  });
//
//});
//

},{"./search.config":100,"./search.controller":101}],100:[function(require,module,exports){
"use strict";

SearchConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchConfig = SearchConfig;
function SearchConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.search", {
        url: "/search",
        title: "Search",
        data: {
            css: "/css/search/search.css",
            authenticate: false,
            permissions: ["restricted"]
        },
        views: {

            "top": {
                templateUrl: "modules/search/search-top.html",
                controller: "SearchTopController",
                controllerAs: "search"

            },
            "left": {
                templateUrl: "modules/search/search-left.html",
                controller: "SearchLeftController",
                controllerAs: "search"

            },
            "center": {
                templateUrl: "modules/search/search-center.html",
                controller: "SearchCenterController",
                controllerAs: "search"

            },
            "right": {
                templateUrl: "modules/search/search-right.html",
                controller: "SearchRightController",
                controllerAs: "search"

            }
        }

    });
};

},{}],101:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc controller
 * @name Search.controller:SearchController
 * @description Controller for Search module.
 */
var SearchTopController = exports.SearchTopController = function SearchTopController() {
    "ngInject";

    _classCallCheck(this, SearchTopController);
};

var SearchLeftController = exports.SearchLeftController = function SearchLeftController() {
    "ngInject";

    _classCallCheck(this, SearchLeftController);
};

var SearchCenterController = exports.SearchCenterController = function SearchCenterController() {
    "ngInject";

    _classCallCheck(this, SearchCenterController);
};

var SearchRightController = exports.SearchRightController = function SearchRightController() {
    "ngInject";

    _classCallCheck(this, SearchRightController);
};

},{}],102:[function(require,module,exports){
"use strict";

var _setting = require("./setting.config");

var _settingTop = require("./setting.top.controller");

var _settingLeft = require("./setting.left.controller");

var _settingCenter = require("./setting.center.controller");

var _settingRight = require("./setting.right.controller");

angular.module("Setting").config(_setting.SettingConfig).controller("SettingTopController", _settingTop.SettingTopController).controller("SettingLeftController", _settingLeft.SettingLeftController).controller("SettingCenterController", _settingCenter.SettingCenterController);
//    .controller("SettingRightController", SettingRightController);

},{"./setting.center.controller":103,"./setting.config":104,"./setting.left.controller":105,"./setting.right.controller":106,"./setting.top.controller":107}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SettingCenterController = exports.SettingCenterController = function SettingCenterController() {
    "ngInject";

    _classCallCheck(this, SettingCenterController);
};

},{}],104:[function(require,module,exports){
"use strict";

SettingConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SettingConfig = SettingConfig;
function SettingConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.setting", {
        url: "/setting",
        title: "Setting",
        data: {
            css: "/css/setting/setting.css",
            authenticate: true,
            permissions: ["restricted"]
        },
        views: {

            "top": {
                templateUrl: "modules/setting/setting-top.html",
                controller: "SettingTopController",
                controllerAs: "setting"

            },
            "left": {
                templateUrl: "modules/setting/setting-left.html",
                controller: "SettingLeftController",
                controllerAs: "setting"

            },
            "center": {
                templateUrl: "modules/setting/setting-center.html",
                controller: "SettingCenterController",
                controllerAs: "setting"

            },
            //                "right" :{
            //                        templateUrl: "modules/setting/setting-right.html",
            //                        controller: "SettingRightController",
            //                        controllerAs: "setting",
            //
            //                }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }
        }

    });
};

},{}],105:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SettingLeftController = exports.SettingLeftController = function SettingLeftController() {
    "ngInject";

    _classCallCheck(this, SettingLeftController);
};

},{}],106:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SettingRightController = exports.SettingRightController = function SettingRightController() {
    "ngInject";

    _classCallCheck(this, SettingRightController);
};

},{}],107:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SettingTopController = exports.SettingTopController = function SettingTopController() {
    "ngInject";

    _classCallCheck(this, SettingTopController);
};

},{}],108:[function(require,module,exports){
"use strict";

var _shop = require("./shop.config");

var _shopTop = require("./shop.top.controller");

var _shopLeft = require("./shop.left.controller");

var _shopCenter = require("./shop.center.controller");

var _shopRight = require("./shop.right.controller");

angular.module("Shop").config(_shop.ShopConfig).controller("ShopTopController", _shopTop.ShopTopController).controller("ShopLeftController", _shopLeft.ShopLeftController).controller("ShopCenterController", _shopCenter.ShopCenterController);
//    .controller("ShopRightController", ShopRightController);

},{"./shop.center.controller":109,"./shop.config":110,"./shop.left.controller":111,"./shop.right.controller":112,"./shop.top.controller":113}],109:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShopCenterController = exports.ShopCenterController = function ShopCenterController() {
    "ngInject";

    _classCallCheck(this, ShopCenterController);
};

},{}],110:[function(require,module,exports){
"use strict";

ShopConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ShopConfig = ShopConfig;
function ShopConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("main.shop", {
        url: "/shop",
        title: "Shop",
        data: {
            css: "/css/shop/shop.css",
            authenticate: true
        },
        views: {
            "top": {
                templateUrl: "modules/shop/shop-top.html",
                controller: "ShopTopController",
                controllerAs: "shop"

            },
            "left": {
                templateUrl: "modules/shop/shop-left.html",
                controller: "ShopLeftController",
                controllerAs: "shop"

            },
            "center": {
                templateUrl: "modules/shop/shop-center.html",
                controller: "ShopCenterController",
                controllerAs: "shop"

            },
            //                "right" :{
            //                        templateUrl: "modules/shop/shop-right.html",
            //                        controller: "ShopRightController",
            //                        controllerAs: "shop",
            //
            //
            //                 }
            "right": {
                templateUrl: "modules/chat/chat.html",
                controller: "ChatController",
                controllerAs: "chat"
            }

        }

    });
};

},{}],111:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShopLeftController = exports.ShopLeftController = function ShopLeftController() {
    "ngInject";

    _classCallCheck(this, ShopLeftController);
};

},{}],112:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShopRightController = exports.ShopRightController = function ShopRightController() {
    "ngInject";

    _classCallCheck(this, ShopRightController);
};

},{}],113:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShopTopController = exports.ShopTopController = function ShopTopController() {
    "ngInject";

    _classCallCheck(this, ShopTopController);
};

},{}],114:[function(require,module,exports){
"use strict";

var _signin = require("./signin.config");

var _signin2 = require("./signin.controller");

angular.module("Signin").config(_signin.SigninConfig).controller("SigninController", _signin2.SigninController);

},{"./signin.config":115,"./signin.controller":116}],115:[function(require,module,exports){
"use strict";

SigninConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninConfig = SigninConfig;
function SigninConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("signin", {
        url: "/signin",
        templateUrl: "modules/auth/auth.html",
        controller: "AuthController",
        controllerAs: "auth",
        title: "Signin",
        data: {
            //css: "/css/signin/signin.css",
            authenticate: false
        }
    });
};

},{}],116:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @ngdoc controller
 * @name Signin.controller:SigninController
 * @description Controller for Singin module.
 */

var SigninController = exports.SigninController = function () {
    SigninController.$inject = ["AuthService"];
    function SigninController(AuthService) {
        "ngInject";

        _classCallCheck(this, SigninController);

        this._AuthService = AuthService;
        this.user = {
            username: 'praewrung',
            password: 'prawrung'
        };
        // alert("a");


        //this.isAuthenticated = false;
        //this.welcome = '';
        //this.message = '';
    }

    _createClass(SigninController, [{
        key: 'submit',
        value: function submit() {
            //        this._AuthService.signin(this.user.username, this.user.password).then(
            //            () => {
            //                this.isAuthenticated = true;
            //
            //                let profile = this._AuthService.profile;
            //                this.welcome = 'Welcome ' + profile.first_name + ' ' + profile.last_name;
            //            },
            //            (data) => {
            //                // Erase the token if the user fails to log in
            //                this.isAuthenticated = false;
            //
            //                // Handle login errors here
            //                this.error = 'Error: '+data;
            //                this.welcome = '';
            //            }
            //        );


            if (this.user.username == "praewrung") {
                if (this.user.password == "prawrung") {
                    window.location.href = "/home";
                } else {
                    alert("Invalid Password");
                }
            } else {
                alert("Invalid UserID");
            }
        }
    }]);

    return SigninController;
}();

//alert("a");
//function passuser() {
//    alert("b");
//    if (this.username.value=="praewrung")
//    {
//        if (form.password.value=="prawrung")
//        {
//            location="main.home"
//        }
//        else
//        {
//            alert("Invalid Password")
//        }
//    }
//    else
//    {  alert("Invalid UserID")
//    }
//}

},{}],117:[function(require,module,exports){
"use strict";

var _signout = require("./signout.config");

var _signout2 = require("./signout.controller");

angular.module("Signout").config(_signout.SignoutConfig).controller("SignoutController", _signout2.SignoutController);

},{"./signout.config":118,"./signout.controller":119}],118:[function(require,module,exports){
"use strict";

SignoutConfig.$inject = ["$stateProvider"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignoutConfig = SignoutConfig;
function SignoutConfig($stateProvider) {
    "ngInject";

    $stateProvider.state("signout", {
        url: "/signout",
        templateUrl: "modules/signout/signout.html",
        controller: "SignoutController",
        controllerAs: "signout",
        title: "Signin",
        data: {
            css: "/css/signout/signout.css",
            authenticate: true
        }
    });
};

},{}],119:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SignoutController = exports.SignoutController = ["$window", "$location", function SignoutController($window, $location) {
    "ngInject";

    _classCallCheck(this, SignoutController);

    delete $window.localStorage.token;

    $location.path("/downtown");
}];

},{}],120:[function(require,module,exports){
'use strict';angular.module('templates',[]).run(['$templateCache',function($templateCache){$templateCache.put('modules/(main-app)/main.html','<div style="position:relative; height: 100%;overflow-x:hidden;">\n    <div id="leftside" class="main-leftside col-sm-9 col-md-9">\n        <div ui-view="top" class="pagetop">\n        </div>\n        <div class="pagebottom">\n            <div ui-view="left" class="pageleft col-xs-12 col-sm-4 col-md-4">\n            </div>\n            <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-8">\n            </div>\n        </div>\n    </div>\n    <div id="rightside" class="main-rightside col-xs-12 col-sm-3 col-md-3">\n\n<!--    <div class="pageright col-xs-12 col-sm-4 col-md-3" >-->\n<!--\n        <div ui-view="right" class="pageright col-xs-9 col-sm-12 col-md-12">\n\n        </div>\n-->\n        <div ui-view="right" class="pageright">\n\n        </div>\n    </div>\n</div>');$templateCache.put('modules/auth/activate.html','<div>\n\n    <div class="top-content">\n        \t\n            <div class="inner-bg">\n                <div class="container">\n                \t\n                    <div class="row">\n                        <div class="col-sm-8 col-sm-offset-2 text">\n\n                                <span>\u0E04\u0E38\u0E13\u0E44\u0E14\u0E49\u0E25\u0E07\u0E17\u0E30\u0E40\u0E1A\u0E35\u0E22\u0E19\u0E40\u0E23\u0E35\u0E22\u0E1A\u0E41\u0E25\u0E49\u0E27 \u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E40\u0E02\u0E49\u0E32\u0E23\u0E30\u0E1A\u0E1A\u0E44\u0E14\u0E49\u0E17\u0E31\u0E19\u0E17\u0E35</span>\n                                <button>Sign in</button>\n                        </div>\n                    </div>\n                    \n                    \n                    \n                </div>\n            </div>\n            \n        </div>\n\n</div>\n');$templateCache.put('modules/auth/auth - Copy (2).html','<div align="center" class="auth visible-sm visible-xs hidden-md hidden-lg">\r\n    <div class="container">\r\n        <div class="auth-header">\r\n            <div class="panel panel-login">\r\n                <div class="panel-heading">\r\n                    <div class="row">\r\n                        <div class="col-xs-6">\r\n                            <a href="#" class="active" id="login-form-link">Sign In!</a>\r\n                        </div>\r\n                        <div class="col-xs-6">\r\n                            <a href="#" id="register-form-link">Sign Up!</a>\r\n                        </div>\r\n                    </div>\r\n                </div>      \r\n            </div>\r\n        </div>\r\n        <div class="auth-body">\r\n            <div id="login-form" style="display: block; position:relative; height: 100%; min-height: 314px;">\r\n                <div class="signin">\r\n                    <div class="card">\r\n                        <div class="passport">\r\n                            <div class="background"></div>\r\n                            <span class="text">PASSPORT</span>\r\n                        </div>\r\n                        <form name="signinForm1" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                            <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                            <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                                <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                            </div>\r\n                            <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                            <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                            <button type="submit" formsubmit class="submit" ng-disabled="signinForm1.$invalid">SIGN IN</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id="register-form" style="display: none; position:relative; height: 100%; min-height: 479px;">\r\n                <div class="signup">\r\n                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                        <div align="left" style="color:slategray">\r\n<!--                                <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>-->\r\n                            <form name="signupForm1" role="form" method="post" ng-submit="auth.signup()" novalidate ng-model-options="{ debounce: 500 }">\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                        <input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" required />\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                        <input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                        <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                        <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                        <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.byear.$dirty && signupForm1.byear.$invalid) || (signupForm2.byear.$dirty && signupForm2.byear.$invalid) }">\r\n                                        <select forminput field="byear" group-field="birthday" class="init" name="byear" ng-model="auth.user.byear" required>\r\n                                            <option value="" selected>Year</option>\r\n                                            <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bmonth.$dirty && signupForm1.bmonth.$invalid) || (signupForm2.bmonth.$dirty && signupForm2.bmonth.$invalid) }">\r\n                                         <select forminput field="bmonth" group-field="birthday" class="init" name="bmonth" ng-model="auth.user.bmonth" required>\r\n                                            <option value="" selected>Month</option>\r\n                                            <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bday.$dirty && (signupForm1.bday.$invalid || auth.isInvalidBirthday())) || (signupForm2.bday.$dirty && (signupForm2.bday.$invalid || auth.isInvalidBirthday())) }">\r\n                                        <select forminput field="bday" group-field="birthday" class="init" name="bday" ng-model="auth.user.bday" required>\r\n                                            <option value="" selected>Day</option>\r\n                                            <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                        <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" required>\r\n                                            <option value="" selected>Gender</option>\r\n                                            <option value="M">Male</option>\r\n                                            <option value="F">Female</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div align="center" class="signup-agreement">\r\n                                    <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                    <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                                </div>\r\n                                <div class="signup-submit">\r\n                                    <button type="submit" formsubmit ng-disabled="signupForm1.$invalid || auth.error.duplicateUsername || auth.error.notEmail || auth.error.lessLengthPassword1 || auth.error.lessLengthPassword2 || auth.error.passwordNotMatch || auth.error.invalidBirthday">SIGN UP</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div align="center" class="auth hidden-xs hidden-sm">\r\n    <div class="container">\r\n<!--\r\n        <div class="col-md-1 fullheight"></div>\r\n        <div class="col-md-10 fullheight">\r\n-->\r\n        \r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signin">\r\n                <div class="card">\r\n                    <div class="passport">\r\n                        <div class="background"></div>\r\n                        <span class="text">PASSPORT</span>\r\n                    </div>\r\n                    <form name="signinForm2" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                        <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                        <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                            <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                        </div>\r\n                        <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                        <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                        <button type="submit" formsubmit class="submit" ng-disabled="signinForm2.$invalid">SIGN IN</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--        <div class="col-md-2 fullheight"></div>-->\r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signup">\r\n                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                    <div align="left" style="color:slategray">\r\n                        <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>\r\n                        {{ auth.isFirstErrorInput(\'firstname\') }} {{ auth.isFirstErrorInput(\'lastname\') }}\r\n                        \r\n                        <div ng-show="auth.isFirstErrorInput(\'firstname\')">\r\n                            <p ng-show="signupForm2.firstname.$dirty && signupForm2.firstname.$error.required" class="help-block">FName Required.</p>\r\n                        </div>\r\n                        <div ng-show="auth.isFirstErrorInput(\'lastname\')">\r\n                            <p ng-show="signupForm2.lastname.$dirty && signupForm2.lastname.$error.required" class="help-block">LName Required.</p>\r\n                        </div>\r\n                        \r\n                        \r\n                        \r\n                        \r\n                            \r\n                        \r\n                        \r\n                            \r\n                        \r\n                        \r\n                        \r\n                        <form name="signupForm2" role="form" method="post" ng-submit="auth.signup()" novalidate ng-model-options="{ debounce: 500 }" style="margin: 0 2%">\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                    <input auth-signup-input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" required />\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                    <input auth-signup-input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                    <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                    <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                    <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.byear.$dirty && signupForm1.byear.$invalid) || (signupForm2.byear.$dirty && signupForm2.byear.$invalid) }">\r\n                                    <select auth-signup-input forminput field="byear" group-field="birthday" class="init" name="byear" ng-model="auth.user.byear" required>\r\n                                        <option value="" selected>Year</option>\r\n                                        <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bmonth.$dirty && signupForm1.bmonth.$invalid) || (signupForm2.bmonth.$dirty && signupForm2.bmonth.$invalid) }">\r\n                                     <select forminput field="bmonth" group-field="birthday" class="init" name="bmonth" ng-model="auth.user.bmonth" required>\r\n                                        <option value="" selected>Month</option>\r\n                                        <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bday.$dirty && (signupForm1.bday.$invalid || auth.isInvalidBirthday())) || (signupForm2.bday.$dirty && (signupForm2.bday.$invalid || auth.isInvalidBirthday())) }">\r\n                                    <select forminput field="bday" group-field="birthday" class="init" name="bday" ng-model="auth.user.bday" required>\r\n                                        <option value="" selected>Day</option>\r\n                                        <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                    <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" required>\r\n                                        <option value="" selected>Gender</option>\r\n                                        <option value="M">Male</option>\r\n                                        <option value="F">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div align="center" class="signup-agreement">\r\n                                <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                            </div>\r\n                            <div class="signup-submit">\r\n                                <button type="submit" formsubmit ng-disabled="signupForm2.$invalid || auth.error.duplicateUsername || auth.error.notEmail || auth.error.lessLengthPassword1 || auth.error.lessLengthPassword2 || auth.error.passwordNotMatch || auth.error.invalidBirthday">SIGN UP</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--\r\n            \r\n        </div>\r\n        <div class="col-md-1 fullheight"></div>\r\n-->\r\n    </div>\r\n</div>');$templateCache.put('modules/auth/auth - Copy.html','<div align="center" class="auth visible-sm visible-xs hidden-md hidden-lg">\r\n    <div class="container">\r\n        <div class="auth-header">\r\n            <div class="panel panel-login">\r\n                <div class="panel-heading">\r\n                    <div class="row">\r\n                        <div class="col-xs-6">\r\n                            <a href="#" class="active" id="login-form-link">Sign In!</a>\r\n                        </div>\r\n                        <div class="col-xs-6">\r\n                            <a href="#" id="register-form-link">Sign Up!</a>\r\n                        </div>\r\n                    </div>\r\n                </div>      \r\n            </div>\r\n        </div>\r\n        <div class="auth-body">\r\n            <div id="login-form" style="display: block; position:relative; height: 100%; min-height: 314px;">\r\n                <div class="signin">\r\n                    <div class="card">\r\n                        <div class="passport">\r\n                            <div class="background"></div>\r\n                            <span class="text">PASSPORT</span>\r\n                        </div>\r\n                        <form name="signinForm1" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                            <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                            <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                                <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                            </div>\r\n                            <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                            <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                            <button type="submit" formsubmit class="submit" ng-disabled="signinForm1.$invalid">SIGN IN</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id="register-form" style="display: none; position:relative; height: 100%; min-height: 479px;">\r\n                <div class="signup">\r\n                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                        <div align="left" style="color:slategray">\r\n<!--                                <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>-->\r\n                            <form name="signupForm1" role="form" method="post" ng-submit="auth.signup()" novalidate>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                        <input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                        <input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                        <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                        <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                        <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                        <select forminput field="byear" group-field="birthday" class="init" ng-model="auth.user.byear" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Year</option>\r\n                                            <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                         <select forminput field="bmonth" group-field="birthday" class="init" ng-model="auth.user.bmonth" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Month</option>\r\n                                            <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                        <select forminput field="bday" group-field="birthday" class="init" ng-model="auth.user.bday" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Day</option>\r\n                                            <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                        <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                            <option value="" selected>Gender</option>\r\n                                            <option value="M">Male</option>\r\n                                            <option value="F">Female</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div align="center" class="signup-agreement">\r\n                                    <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                    <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                                </div>\r\n                                <div class="signup-submit">\r\n                                    <button type="submit" formsubmit ng-disabled="signupForm1.$invalid">SIGN UP</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div align="center" class="auth hidden-xs hidden-sm">\r\n    <div class="container">\r\n<!--\r\n        <div class="col-md-1 fullheight"></div>\r\n        <div class="col-md-10 fullheight">\r\n-->\r\n        \r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signin">\r\n                <div class="card">\r\n                    <div class="passport">\r\n                        <div class="background"></div>\r\n                        <span class="text">PASSPORT</span>\r\n                    </div>\r\n                    <form name="signinForm2" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                        <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                        <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                            <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                        </div>\r\n                        <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                        <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                        <button type="submit" formsubmit class="submit" ng-disabled="signinForm2.$invalid">SIGN IN</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--        <div class="col-md-2 fullheight"></div>-->\r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signup">\r\n                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                    <div align="left" style="color:slategray">\r\n                        <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>\r\n                        <form name="signupForm2" role="form" method="post" ng-submit="auth.signup()" novalidate style="margin: 0 2%">\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                    <input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                    <input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                    <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                    <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                    <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                    <select forminput field="byear" group-field="birthday" class="init" ng-model="auth.user.byear" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Year</option>\r\n                                        <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                     <select forminput field="bmonth" group-field="birthday" class="init" ng-model="auth.user.bmonth" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Month</option>\r\n                                        <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                    <select forminput field="bday" group-field="birthday" class="init" ng-model="auth.user.bday" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Day</option>\r\n                                        <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                    <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                        <option value="" selected>Gender</option>\r\n                                        <option value="M">Male</option>\r\n                                        <option value="F">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div align="center" class="signup-agreement">\r\n                                <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                            </div>\r\n                            <div class="signup-submit">\r\n                                <button type="submit" formsubmit ng-disabled="signupForm2.$invalid">SIGN UP</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--\r\n            \r\n        </div>\r\n        <div class="col-md-1 fullheight"></div>\r\n-->\r\n    </div>\r\n</div>');$templateCache.put('modules/auth/auth.bak.2.html','<div align="center" class="auth visible-sm visible-xs hidden-md hidden-lg">\r\n    <div class="container">\r\n        <div class="auth-header">\r\n            <div class="panel panel-login">\r\n                <div class="panel-heading">\r\n                    <div class="row">\r\n                        <div class="col-xs-6">\r\n                            <a href="#" class="active" id="login-form-link">Sign In!</a>\r\n                        </div>\r\n                        <div class="col-xs-6">\r\n                            <a href="#" id="register-form-link">Sign Up!</a>\r\n                        </div>\r\n                    </div>\r\n                </div>      \r\n            </div>\r\n        </div>\r\n        <div class="auth-body">\r\n            <div id="login-form" style="display: block; position:relative; height: 100%; min-height: 314px;">\r\n                <div class="signin">\r\n                    <div class="card">\r\n                        <div class="passport">\r\n                            <div class="background"></div>\r\n                            <span class="text">PASSPORT</span>\r\n                        </div>\r\n                        <form name="signinForm1" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                            <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                            <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                                <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                            </div>\r\n                            <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                            <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                            <button type="submit" formsubmit class="submit" ng-disabled="signinForm1.$invalid">SIGN IN</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id="register-form" style="display: none; position:relative; height: 100%; min-height: 479px;">\r\n                <div class="signup">\r\n                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                        <div align="left" style="color:slategray">\r\n<!--                                <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>-->\r\n                            <form name="signupForm1" role="form" method="post" ng-submit="auth.signup()" novalidate>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                        <input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                        <input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n<!--\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                        <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n-->\r\n                                    \r\n                                    \r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$timedout && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$timedout && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n                                        <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required val-on-timeout typing-limit="2000" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                        <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                        <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                        <select forminput field="byear" group-field="birthday" class="init" ng-model="auth.user.byear" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Year</option>\r\n                                            <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                         <select forminput field="bmonth" group-field="birthday" class="init" ng-model="auth.user.bmonth" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Month</option>\r\n                                            <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;">\r\n                                        <select forminput field="bday" group-field="birthday" class="init" ng-model="auth.user.bday" ng-model-options="{ updateOn: \'blur\' }">\r\n                                            <option value="" selected>Day</option>\r\n                                            <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                        <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                            <option value="" selected>Gender</option>\r\n                                            <option value="M">Male</option>\r\n                                            <option value="F">Female</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div align="center" class="signup-agreement">\r\n                                    <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                    <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                                </div>\r\n                                <div class="signup-submit">\r\n                                    <button type="submit" formsubmit ng-disabled="signupForm1.$invalid">SIGN UP</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div align="center" class="auth hidden-xs hidden-sm">\r\n    <div class="container">\r\n<!--\r\n        <div class="col-md-1 fullheight"></div>\r\n        <div class="col-md-10 fullheight">\r\n-->\r\n        \r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signin">\r\n                <div class="card">\r\n                    <div class="passport">\r\n                        <div class="background"></div>\r\n                        <span class="text">PASSPORT</span>\r\n                    </div>\r\n                    <form name="signinForm2" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                        <input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                        <div ng-class="{ \'notifyerr\': auth.error.signin }">\r\n                            <span ng-show="auth.error.signin">USER OR PASSWORD INCORRECT</span>\r\n                        </div>\r\n                        <input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                        <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                        <button type="submit" formsubmit class="submit" ng-disabled="signinForm2.$invalid">SIGN IN</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--        <div class="col-md-2 fullheight"></div>-->\r\n<!--        <div class="col-md-4 fullheight">-->\r\n            <div class="signup">\r\n                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100%;">\r\n                    <div align="left" style="color:slategray">\r\n                        <div style="font-size:20pt; font-weight:bold; text-align:center;">SIGN UP</div>\r\n                        <form name="signupForm2" role="form" method="post" ng-submit="auth.signup()" novalidate style="margin: 0 2%">\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty && signupForm1.firstname.$invalid) || (signupForm2.firstname.$dirty && signupForm2.firstname.$invalid) }">\r\n                                    <input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty && signupForm1.lastname.$invalid) || (signupForm2.lastname.$dirty && signupForm2.lastname.$invalid) }">\r\n                                    <input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$timedout && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) || (signupForm2.email.$timedout && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">\r\n<!--                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm2.email.$timedout && signupForm2.email.$dirty && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername()))) }">-->\r\n                                    <input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required val-on-timeout typing-limit="2000" />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty && (signupForm1.password1.$invalid || auth.isLessLengthPassword1())) || (signupForm2.password1.$dirty && (signupForm2.password1.$invalid || auth.isLessLengthPassword1())) }">\r\n                                    <input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) || (signupForm2.password2.$dirty && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordNotMatch()))) }">\r\n                                    <input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                    <select forminput field="byear" group-field="birthday" class="init" ng-model="auth.user.byear" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Year</option>\r\n                                        <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                     <select forminput field="bmonth" group-field="birthday" class="init" ng-model="auth.user.bmonth" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Month</option>\r\n                                        <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;">\r\n                                    <select forminput field="bday" group-field="birthday" class="init" ng-model="auth.user.bday" ng-model-options="{ updateOn: \'blur\' }">\r\n                                        <option value="" selected>Day</option>\r\n                                        <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty && signupForm1.gender.$invalid) || (signupForm2.gender.$dirty && signupForm2.gender.$invalid) }">\r\n                                    <select forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                        <option value="" selected>Gender</option>\r\n                                        <option value="M">Male</option>\r\n                                        <option value="F">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div align="center" class="signup-agreement">\r\n                                <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                            </div>\r\n                            <div class="signup-submit">\r\n                                <button type="submit" formsubmit ng-disabled="signupForm2.$invalid">SIGN UP</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n<!--        </div>-->\r\n<!--\r\n            \r\n        </div>\r\n        <div class="col-md-1 fullheight"></div>\r\n-->\r\n    </div>\r\n</div>');$templateCache.put('modules/auth/auth.bak.html','<!--\r\n<div class="jumbotron text-center">\r\n    <span ng-show="auth.isAuthenticated">{{auth.welcome}}</span>\r\n    <form ng-show="!auth.isAuthenticated" ng-submit="auth.submit()">\r\n        <input ng-model="auth.user.username" type="text" name="user" placeholder="Username" />\r\n        <input ng-model="auth.user.password" type="password" name="pass" placeholder="Password" />\r\n        <input type="submit" value="Login" />\r\n    </form>\r\n    <div>{{auth.error}}</div>\r\n    <div ng-show="auth.isAuthenticated">\r\n        <a ng-click="auth.callRestricted()" href="">Shh, this is private!</a>\r\n        <br>\r\n        <div>{{auth.message}}</div>\r\n        <a ng-click="auth.logout()" href="">Logout</a>\r\n    </div>\r\n</div>\r\n-->\r\n\r\n\r\n\r\n\r\n<div>\r\n\r\n    <div class="top-content">\r\n        \t\r\n            <div class="inner-bg">\r\n                <div class="container">\r\n                \r\n<!--        show on mobile and tablet        \t-->\r\n                    <div class="row bodypadding visible-sm visible-xs hidden-md hidden-lg">\r\n                        <div class="col-md-6 col-md-offset-3">\r\n                            <div class="panel panel-login">\r\n                                <div class="panel-heading">\r\n                                    <div class="row">\r\n                                        <div class="col-xs-6">\r\n                                            <a href="#" class="active" id="login-form-link">Sign In!</a>\r\n                                        </div>\r\n                                        <div class="col-xs-6">\r\n                                            <a href="#" id="register-form-link">Sign Up!</a>\r\n                                        </div>\r\n                                    </div>\r\n                                    <hr>\r\n                                </div>\r\n                                <div class="panel-body">\r\n                                    <div class="row">\r\n                                        <div class="col-lg-12">\r\n<!--\r\n                                            <form name="signinForm" role="form" method="post" class="login-form" ng-submit="auth.signin()" novalidate id="login-form" style="display: block;">\r\n                                                <div class="form-group">\r\n                                                    <input type="text" name="username" id="username" tabindex="1" class="form-control" placeholder="Username" value="">\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <input type="password" name="password" id="password" tabindex="2" class="form-control" placeholder="Password">\r\n                                                </div>\r\n                                                <div class="form-group text-center">\r\n                                                    <input type="checkbox" tabindex="3" class="" name="remember" id="remember">\r\n                                                    <label for="remember"> Remember Me</label>\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <div class="row">-\r\n                                                        <div class="col-sm-6 col-sm-offset-3">\r\n                                                            <button type="submit" name="login-submit" id="login-submit" tabindex="4" class="btn btn-login" value="Login" ng-disabled="signinForm.$invalid">Sign in!</button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <div class="row">\r\n                                                        <div class="col-lg-12">\r\n                                                            <div class="text-center">\r\n                                                                <a href="http://phpoll.com/recover" tabindex="5" class="forgot-password">Forgot Password?</a>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </form>\r\n-->\r\n                                            <div id="login-form" style="display: block;">\r\n<!--\r\n                                                <div class="form-top">  \r\n                                                    <div class="form-top-left">\r\n\r\n                                                    </div>\r\n                                                    <div class="form-top-right">\r\n                                                        <i class="fa fa-key"></i>\r\n                                                    </div>\r\n                                                </div>\r\n-->\r\n                                                <div class="form-bottom ">\r\n                                                    <form name="signinForm" role="form" method="post" class="login-form" ng-submit="auth.signin()" novalidate>\r\n                                                        <div class="form-group">\r\n                                                            <label class="sr-only" for="form-username">E-mail</label>\r\n                                                            <input type="text" name="username" placeholder="E-mail..." class="form-username form-control" id="username" ng-model="auth.user.username" required>\r\n                                                        </div>\r\n                                                        <div ng-class="{ \'has-error\': auth.error.signin }">\r\n                                                            <p ng-show="auth.error.signin" class="help-block" style="text-align: center;">User or Password is invalid.</p>\r\n                                                        </div>\r\n                                                        <div class="form-group">\r\n                                                            <label class="sr-only" for="form-password">Password</label>\r\n                                                            <input type="password" name="password" placeholder="Password..." class="form-password form-control" id="password" ng-model="auth.user.password" required>\r\n                                                        </div>\r\n                                                        <button type="submit" class="btn" value="Login" ng-disabled="signinForm.$invalid">Sign in!</button>\r\n                                                    </form>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                                \r\n                                            \r\n                                            \r\n                                            \r\n                                                \r\n                                            \r\n                                            \r\n                                            \r\n<!--\r\n                                            <form id="register-form" action="http://phpoll.com/register/process" method="post" role="form" style="display: none;">\r\n                                                <div class="form-group">\r\n                                                    <input type="text" name="username" id="username" tabindex="1" class="form-control" placeholder="Username" value="">\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <input type="email" name="email" id="email" tabindex="1" class="form-control" placeholder="Email Address" value="">\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <input type="password" name="password" id="password" tabindex="2" class="form-control" placeholder="Password">\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <input type="password" name="confirm-password" id="confirm-password" tabindex="2" class="form-control" placeholder="Confirm Password">\r\n                                                </div>\r\n                                                <div class="form-group">\r\n                                                    <div class="row">\r\n                                                        <div class="col-sm-6 col-sm-offset-3">\r\n                                                            <input type="submit" name="register-submit" id="register-submit" tabindex="4" class="form-control btn btn-register" value="Register Now">\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </form>\r\n-->\r\n                                            \r\n                                            \r\n                                            \r\n                                            <form id="register-form" name="signupForm" method="post" ng-submit="auth.signup()" style="display: none;" novalidate>\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.firstname.$dirty && signupForm.firstname.$invalid }">\r\n                                                    <label class="sr-only" for="form-first-name">First name</label>\r\n                                                    <input type="text" name="firstname" placeholder="First name..." class="form-first-name form-control" id="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                                    <p ng-show="signupForm.firstname.$dirty && signupForm.firstname.$error.required" class="help-block">Required.</p>\r\n                                                </div>\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.lastname.$dirty && signupForm.lastname.$invalid }">\r\n                                                    <label class="sr-only" for="form-last-name">Last name</label>\r\n                                                    <input type="text" name="lastname" placeholder="Last name..." class="form-last-name form-control" id="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                                    <p ng-show="signupForm.lastname.$dirty && signupForm.lastname.$error.required" class="help-block">Required.</p>\r\n                                                </div>\r\n        <!--\t\t\t\t                        <div class="form-group" ng-class="{ \'has-error\': signupForm.email.$dirty && (signupForm.email.$invalid || (auth.user.email && auth.isDuplicateUsername())) }">-->\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.email.$dirty && (signupForm.email.$invalid || (auth.user.email && auth.isDuplicateUsername())) }">\r\n                                                    <label class="sr-only" for="form-email">Email</label>\r\n                                                    <input type="email" name="email" placeholder="Email..." class="form-email form-control" id="email" ng-model="auth.user.email" ng-model-options="{ updateOn: \'blur\' }" required>\r\n        <!--\t\t\t\t                        \t<span>@muime.com</span>-->\r\n                                                    <p ng-show="signupForm.email.$valid && auth.error.duplicateUsername" class="help-block">Already in used.</p>\r\n                                                    <p ng-show="signupForm.email.$dirty && signupForm.email.$error.required" class="help-block">Required.</p>\r\n                                                    <p ng-show="signupForm.email.$error.email" class="help-block">Not valid.</p>\r\n\r\n                                                </div>\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.password1.$dirty && signupForm.password1.$invalid }">\r\n                                                    <label class="sr-only" for="form-password">Password</label>\r\n                                                    <input type="password" name="password1" placeholder="Password at least 6 characters..." class="form-password form-control" id="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required ng-minlength="6">\r\n                                                    <p ng-show="signupForm.password1.$dirty && signupForm.password1.$error.required" class="help-block">Required.</p>\r\n                                                    <p ng-show="signupForm.password1.$error.minlength" class="help-block">Must no less than 6 characters.</p>\r\n                                                </div>\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.password2.$dirty && (signupForm.password2.$invalid || (auth.user.password1 && auth.isPasswordNotMatch())) }">\r\n                                                    <label class="sr-only" for="form-password">Password</label>\r\n                                                    <input type="password" name="password2" placeholder="Confirm Password..." class="form-password form-control" id="password2" ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required ng-minlength="6">\r\n                                                    <p ng-show="signupForm.password2.$valid && auth.error.passwordNotMatch" class="help-block">Re-password again.</p>\r\n                                                    <p ng-show="signupForm.password2.$dirty && signupForm.password2.$error.required" class="help-block">Required.</p>\r\n                                                    <p ng-show="signupForm.password2.$error.minlength" class="help-block">Must no less than 6 characters.</p>\r\n                                                </div>\r\n                                                <div class="form-group" ng-class="{ \'has-error\': signupForm.gender.$dirty && signupForm.gender.$invalid }">\r\n                                                    <label class="sr-only" for="form-gender">Gender</label>\r\n                                                    <select name="gender" class="form-gender form-control" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                                        <option value="">Gender...</option>\r\n                                                        <option value="M">Male</option>\r\n                                                        <option value="F">Female</option>\r\n                                                        <option value="O">Others</option>\r\n                                                    </select>\r\n                                                    <p ng-show="signupForm.gender.$dirty && signupForm.gender.$error.required" class="help-block">Required.</p>\r\n                                                </div>\r\n                                                <button type="submit" name="register-submit" id="register-submit" tabindex="4" ng-disabled="signupForm.$invalid" class="btn btn-register">Sign me up!</button>\r\n\t\t\t\t                            </form>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n<!--        hidden on mobile and tablet            -->\r\n                    <div class="hidden-xs hidden-sm">\r\n                        <div class="col-sm-5 ">\r\n                        \t\r\n                        \t<div class="col-sm-12 card ">\r\n\t                        \t<div class="form-top">  \r\n\t                        \t\t<div class="form-top-left">\r\n\r\n\t                        \t\t</div>\r\n\t                        \t\t<div class="form-top-right">\r\n\t                        \t\t\t<i class="fa fa-key"></i>\r\n\t                        \t\t</div>\r\n\t                            </div>\r\n\t                            <div class="form-bottom ">\r\n\t\t\t\t                    <form name="signinForm" role="form" method="post" class="login-form" ng-submit="auth.signin()" novalidate>\r\n\t\t\t\t                    \t<div class="form-group">\r\n\t\t\t\t                    \t\t<label class="sr-only" for="form-username">E-mail</label>\r\n\t\t\t\t                        \t<input type="text" name="username" placeholder="E-mail..." class="form-username form-control" id="username" ng-model="auth.user.username" required>\r\n\t\t\t\t                        </div>\r\n                                        <div ng-class="{ \'has-error\': auth.error.signin }">\r\n                                            <p ng-show="auth.error.signin" class="help-block" style="text-align: center;">User or Password is invalid.</p>\r\n                                        </div>\r\n\t\t\t\t                        <div class="form-group">\r\n\t\t\t\t                        \t<label class="sr-only" for="form-password">Password</label>\r\n\t\t\t\t                        \t<input type="password" name="password" placeholder="Password..." class="form-password form-control" id="password" ng-model="auth.user.password" required>\r\n\t\t\t\t                        </div>\r\n\t\t\t\t                        <button type="submit" class="btn" value="Login" ng-disabled="signinForm.$invalid">Sign in!</button>\r\n\t\t\t\t                    </form>\r\n\t\t\t\t                    \r\n\t\t\t                    </div>\r\n\t\t                    </div>\r\n\t\t                \r\n\r\n\t                        \r\n                        </div>\r\n                        \r\n                        <div class="col-sm-1 middle-border"></div>\r\n                        <div class="col-sm-1"></div>\r\n                        \t\r\n                        <div class="col-sm-5">\r\n                        \t\r\n                        \t<div class="form-box">\r\n                        \t\t<div class="form-top">\r\n\t                        \t\t<div class="form-top-left">\r\n<!--\t                        \t\t\t<h3>Sign up </h3>-->\r\n<!--\t                            \t\t<p>Fill in the form below to get instant access:</p>-->\r\n\t                        \t\t</div>\r\n\t                        \t\t<div class="form-top-right">\r\n\t                        \t\t\t<i class="fa fa-pencil"></i>\r\n\t                        \t\t</div>\r\n\t                            </div>\r\n\t                            <div class="form-bottom">\r\n\t\t\t\t                    <form name="signupForm" method="post" class="registration-form" ng-submit="auth.signup()" novalidate>\r\n                                        <div class="form-group" ng-class="{ \'has-error\': signupForm.firstname.$dirty && signupForm.firstname.$invalid }">\r\n\t\t\t\t                    \t\t<label class="sr-only" for="form-first-name">First name</label>\r\n\t\t\t\t                        \t<input type="text" name="firstname" placeholder="First name..." class="form-first-name form-control" id="firstname" ng-model="auth.user.firstname" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                            <p ng-show="signupForm.firstname.$dirty && signupForm.firstname.$error.required" class="help-block">Required.</p>\r\n\t\t\t\t                        </div>\r\n\t\t\t\t                        <div class="form-group" ng-class="{ \'has-error\': signupForm.lastname.$dirty && signupForm.lastname.$invalid }">\r\n\t\t\t\t                        \t<label class="sr-only" for="form-last-name">Last name</label>\r\n\t\t\t\t                        \t<input type="text" name="lastname" placeholder="Last name..." class="form-last-name form-control" id="lastname" ng-model="auth.user.lastname" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                            <p ng-show="signupForm.lastname.$dirty && signupForm.lastname.$error.required" class="help-block">Required.</p>\r\n\t\t\t\t                        </div>\r\n<!--\t\t\t\t                        <div class="form-group" ng-class="{ \'has-error\': signupForm.email.$dirty && (signupForm.email.$invalid || (auth.user.email && auth.isDuplicateUsername())) }">-->\r\n                                        <div class="form-group" ng-class="{ \'has-error\': signupForm.email.$dirty && (signupForm.email.$invalid || (auth.user.email && auth.isDuplicateUsername())) }">\r\n\t\t\t\t                        \t<label class="sr-only" for="form-email">Email</label>\r\n\t\t\t\t                        \t<input type="email" name="email" placeholder="Email..." class="form-email form-control" id="email" ng-model="auth.user.email" ng-model-options="{ updateOn: \'blur\' }" required>\r\n<!--\t\t\t\t                        \t<span>@muime.com</span>-->\r\n                                            <p ng-show="signupForm.email.$valid && auth.error.duplicateUsername" class="help-block">Already in used.</p>\r\n                                            <p ng-show="signupForm.email.$dirty && signupForm.email.$error.required" class="help-block">Required.</p>\r\n                                            <p ng-show="signupForm.email.$error.email" class="help-block">Not valid.</p>\r\n                                            \r\n\t\t\t\t                        </div>\r\n                                        <div class="form-group" ng-class="{ \'has-error\': signupForm.password1.$dirty && signupForm.password1.$invalid }">\r\n\t\t\t\t                        \t<label class="sr-only" for="form-password">Password</label>\r\n\t\t\t\t                        \t<input type="password" name="password1" placeholder="Password at least 6 characters..." class="form-password form-control" id="password1" ng-model="auth.user.password1" ng-model-options="{ updateOn: \'blur\' }" required ng-minlength="6">\r\n                                            <p ng-show="signupForm.password1.$dirty && signupForm.password1.$error.required" class="help-block">Required.</p>\r\n                                            <p ng-show="signupForm.password1.$error.minlength" class="help-block">Must no less than 6 characters.</p>\r\n\t\t\t\t                        </div>\r\n\t\t\t\t                        <div class="form-group" ng-class="{ \'has-error\': signupForm.password2.$dirty && (signupForm.password2.$invalid || (auth.user.password1 && auth.isPasswordNotMatch())) }">\r\n\t\t\t\t                        \t<label class="sr-only" for="form-password">Password</label>\r\n\t\t\t\t                        \t<input type="password" name="password2" placeholder="Confirm Password..." class="form-password form-control" id="password2" ng-model="auth.user.password2" ng-model-options="{ updateOn: \'blur\' }" required ng-minlength="6">\r\n                                            <p ng-show="signupForm.password2.$valid && auth.error.passwordNotMatch" class="help-block">Re-password again.</p>\r\n                                            <p ng-show="signupForm.password2.$dirty && signupForm.password2.$error.required" class="help-block">Required.</p>\r\n                                            <p ng-show="signupForm.password2.$error.minlength" class="help-block">Must no less than 6 characters.</p>\r\n\t\t\t\t                        </div>\r\n\t\t\t\t                        <div class="form-group" ng-class="{ \'has-error\': signupForm.gender.$dirty && signupForm.gender.$invalid }">\r\n                                            <label class="sr-only" for="form-gender">Gender</label>\r\n                                            <select name="gender" class="form-gender form-control" ng-model="auth.user.gender" ng-model-options="{ updateOn: \'blur\' }" required>\r\n                                                <option value="">Gender...</option>\r\n                                                <option value="M">Male</option>\r\n                                                <option value="F">Female</option>\r\n                                                <option value="O">Others</option>\r\n                                            </select>\r\n                                            <p ng-show="signupForm.gender.$dirty && signupForm.gender.$error.required" class="help-block">Required.</p>\r\n                                        </div>\r\n\t\t\t\t                        <button type="submit" ng-disabled="signupForm.$invalid" class="btn">Sign me up!</button>\r\n\t\t\t\t                    </form>\r\n\t\t\t                    </div>\r\n                        \t</div>\r\n                        \t\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n</div>\r\n\r\n\r\n');$templateCache.put('modules/auth/auth.html','<div id="auth1" align="center" class="auth visible-sm visible-xs hidden-md hidden-lg">\r\n    <div class="container">\r\n<!--        <div id="login-form" style="display: block; position:relative; height: 100%; min-height: 486px;">-->\r\n        <div id="login-form" style="display: flex; flex-direction: column; justify-content: center; position:relative; height: 100%; min-height: 446px;">\r\n            <div class="signin">\r\n<!--                <div class="vcenter-block" style="margin-top:-223px;">-->\r\n                    <div style="position:relative; margin-top: 4px; padding: 100px 40px 20px 40px; background-color: white; -webkit-box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2); -moz-box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2); box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2); border-radius: 8px;">\r\n                        <div class="passport">\r\n                            <div class="background"></div>\r\n                            <span class="text">PASSPORT</span>\r\n                        </div>\r\n                        <form name="signinForm1" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                            <div class="signin-input-group">\r\n                                <div class="signin-input-block" style="width: 100%;">\r\n                                    <input auth-signin-input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signin-notifyerr">\r\n                                <span ng-show="auth.error.signin">USER or PASSWORD incorrect</span>\r\n                            </div>\r\n                            <div class="signin-input-group">\r\n                                <div class="signin-input-block" style="width: 100%;">\r\n                                    <input auth-signin-input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signin-submit">\r\n                                <button type="submit" formsubmit ng-disabled="signinForm1.$invalid">SIGN IN</button>\r\n                            </div>\r\n                            <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                        </form>\r\n                    </div>\r\n                    <div style="margin-top: 20px; color:slategray;">Don\'t have an account? <a auth-scroll href="#register-form" style="color:darkturquoise; text-decoration: none;">Sign up</a></div>\r\n<!--                </div>-->\r\n            </div>\r\n        </div>\r\n<!--        <div id="register-form" style="display: block; position:relative; height: 100%; min-height: 472px; margin-top: 90px; margin-bottom: 20px;">-->\r\n        <div id="register-form" style="display: flex; flex-direction: column; justify-content: center; position:relative; height: 100%; min-height: 494px; margin-top: 70px; margin-bottom: 20px;">    \r\n            <div class="signup">\r\n<!--                <div class="vcenter-block" style="margin-top:-236px;">-->\r\n                    <div align="left" style="color:slategray">\r\n                        <div class="signup-header">\r\n                            <div class="signup-title" ng-show="!auth.hasFirstInputError()">SIGN UP</div>\r\n                            <div class="signup-notifyerr" ng-show="auth.hasFirstInputError()">\r\n                                <div ng-show="auth.isFirstInputError(\'firstname\')">\r\n                                    <p ng-show="(signupForm1.firstname.$dirty || signupForm2.firstname.$dirty) && signupForm1.firstname.$error.required">First name is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'lastname\')">\r\n                                    <p ng-show="(signupForm1.lastname.$dirty || signupForm2.lastname.$dirty) && signupForm1.lastname.$error.required">Last name is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'email\')">\r\n                                    <p ng-show="signupForm1.email.$valid && auth.error.notEmail">Email is invalid.</p>\r\n                                    <p ng-show="signupForm1.email.$valid && auth.error.duplicateUsername">Email is already in used.</p>\r\n                                    <p ng-show="(signupForm1.email.$dirty || signupForm2.email.$dirty) && signupForm1.email.$error.required">Email is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'password1\')">\r\n                                    <p ng-show="signupForm1.password1.$valid && auth.error.lessLengthPassword1">Password must no less than 6 characters.</p>\r\n                                    <p ng-show="(signupForm1.password1.$dirty || signupForm2.password1.$dirty) && signupForm1.password1.$error.required">Password is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'password2\')">\r\n                                    <p ng-show="signupForm1.password2.$valid && auth.error.lessLengthPassword2">Re-password must no less than 6 characters.</p>\r\n                                    <p ng-show="signupForm1.password2.$valid && auth.error.passwordsNotMatch">Passwords do not match.</p>\r\n                                    <p ng-show="(signupForm1.password2.$dirty || signupForm2.password2.$dirty) && signupForm1.password2.$error.required">Re-password is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'byear\')">\r\n                                    <p ng-show="(signupForm1.byear.$dirty || signupForm2.byear.$dirty) && signupForm1.byear.$error.required">Year of birthday is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'bmonth\')">\r\n                                    <p ng-show="(signupForm1.bmonth.$dirty || signupForm2.bmonth.$dirty) && signupForm1.bmonth.$error.required">Month of birthday is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'bday\')">\r\n                                    <p ng-show="signupForm1.bday.$valid && auth.error.invalidBirthday">Birthday is invalid.</p>\r\n                                    <p ng-show="(signupForm1.bday.$dirty || signupForm2.bday.$dirty) && signupForm1.bday.$error.required">Day of birthday is required.</p>\r\n                                </div>\r\n                                <div ng-show="auth.isFirstInputError(\'gender\')">\r\n                                    <p ng-show="(signupForm1.gender.$dirty || signupForm2.gender.$dirty) && signupForm1.gender.$error.required">Gender is required.</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class="signup-body">\r\n                            <form name="signupForm1" role="form" method="post" ng-submit="auth.signup()" novalidate ng-model-options="{ debounce: 500 }">\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty || signupForm2.firstname.$dirty) && signupForm1.firstname.$invalid }">\r\n                                        <input auth-signup-input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" required />\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty || signupForm2.lastname.$dirty) && signupForm1.lastname.$invalid }">\r\n                                        <input auth-signup-input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty || signupForm2.email.$dirty) && (signupForm1.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername())) }">\r\n                                        <input auth-signup-input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty || signupForm2.password1.$dirty) && (signupForm1.password1.$invalid || auth.isLessLengthPassword1()) }">\r\n                                        <input auth-signup-input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty || signupForm2.password2.$dirty) && (signupForm1.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordsNotMatch())) }">\r\n                                        <input auth-signup-input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" required />\r\n                                    </div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                                </div>\r\n                                <div class="signup-input-group">\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.byear.$dirty || signupForm2.byear.$dirty) && signupForm1.byear.$invalid }">\r\n                                        <select auth-signup-input forminput field="byear" group-field="birthday" class="init" name="byear" ng-model="auth.user.byear" required>\r\n                                            <option value="" selected>Year</option>\r\n                                            <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bmonth.$dirty || signupForm2.bmonth.$dirty) && signupForm1.bmonth.$invalid }">\r\n                                         <select auth-signup-input forminput field="bmonth" group-field="birthday" class="init" name="bmonth" ng-model="auth.user.bmonth" required>\r\n                                            <option value="" selected>Month</option>\r\n                                            <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bday.$dirty || signupForm2.bday.$dirty) && (signupForm1.bday.$invalid || auth.isInvalidBirthday()) }">\r\n                                        <select auth-signup-input forminput field="bday" group-field="birthday" class="init" name="bday" ng-model="auth.user.bday" required>\r\n                                            <option value="" selected>Day</option>\r\n                                            <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty || signupForm2.gender.$dirty) && signupForm1.gender.$invalid }">\r\n                                        <select auth-signup-input forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" required>\r\n                                            <option value="" selected>Gender</option>\r\n                                            <option value="M">Male</option>\r\n                                            <option value="F">Female</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div align="center" class="signup-agreement">\r\n                                    <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                    <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                                </div>\r\n                                <div class="signup-submit">\r\n                                    <button type="submit" formsubmit ng-disabled="signupForm1.$invalid || auth.error.duplicateUsername || auth.error.notEmail || auth.error.lessLengthPassword1 || auth.error.lessLengthPassword2 || auth.error.passwordsNotMatch || auth.error.invalidBirthday">SIGN UP</button>\r\n                                </div>\r\n                            </form>\r\n                        </div> \r\n                    </div>\r\n<!--                </div>-->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div id="auth2" align="center" class="auth hidden-xs hidden-sm">\r\n    <div class="container">\r\n        <div class="signin">\r\n            <div class="card">\r\n                <div class="passport">\r\n                    <div class="background"></div>\r\n                    <span class="text">PASSPORT</span>\r\n                </div>\r\n                <form name="signinForm2" role="form" method="post" ng-submit="auth.signin()" novalidate>\r\n                    <input auth-signin-input formuser class="user" type="text" placeholder="name@example.com" ng-model="auth.user.username" required />\r\n                    <div class="notifyerr">\r\n                        <span ng-show="auth.error.signin">USER or PASSWORD incorrect</span>\r\n                    </div>\r\n                    <input auth-signin-input formpasswd class="passwd" type="password" placeholder="password" ng-model="auth.user.password" required />\r\n                    <a href="#" class="forgotpw">FORGOT PASSWORD</a>\r\n                    <button type="submit" formsubmit class="submit" ng-disabled="signinForm2.$invalid">SIGN IN</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <div class="signup">\r\n            <div class="vcenter-block" style="margin-top:-239px;">\r\n                <div align="left" style="color:slategray">\r\n                    <div class="signup-header">\r\n                        <div class="signup-title" ng-show="!auth.hasFirstInputError()">SIGN UP</div>\r\n                        <div class="signup-notifyerr" ng-show="auth.hasFirstInputError()">\r\n                            <div ng-show="auth.isFirstInputError(\'firstname\')">\r\n                                <p ng-show="(signupForm1.firstname.$dirty || signupForm2.firstname.$dirty) && signupForm2.firstname.$error.required">First name is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'lastname\')">\r\n                                <p ng-show="(signupForm1.lastname.$dirty || signupForm2.lastname.$dirty) && signupForm2.lastname.$error.required">Last name is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'email\')">\r\n                                <p ng-show="signupForm2.email.$valid && auth.error.notEmail">Email is invalid.</p>\r\n                                <p ng-show="signupForm2.email.$valid && auth.error.duplicateUsername">Email is already in used.</p>\r\n                                <p ng-show="(signupForm1.email.$dirty || signupForm2.email.$dirty) && signupForm2.email.$error.required">Email is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'password1\')">\r\n                                <p ng-show="signupForm2.password1.$valid && auth.error.lessLengthPassword1">Password must no less than 6 characters.</p>\r\n                                <p ng-show="(signupForm1.password1.$dirty || signupForm2.password1.$dirty) && signupForm2.password1.$error.required">Password is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'password2\')">\r\n                                <p ng-show="signupForm2.password2.$valid && auth.error.lessLengthPassword2">Re-password must no less than 6 characters.</p>\r\n                                <p ng-show="signupForm2.password2.$valid && auth.error.passwordsNotMatch">Passwords do not match.</p>\r\n                                <p ng-show="(signupForm1.password2.$dirty || signupForm2.password2.$dirty) && signupForm2.password2.$error.required">Re-password is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'byear\')">\r\n                                <p ng-show="(signupForm1.byear.$dirty || signupForm2.byear.$dirty) && signupForm2.byear.$error.required">Year of birthday is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'bmonth\')">\r\n                                <p ng-show="(signupForm1.bmonth.$dirty || signupForm2.bmonth.$dirty) && signupForm2.bmonth.$error.required">Month of birthday is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'bday\')">\r\n                                <p ng-show="signupForm2.bday.$valid && auth.error.invalidBirthday">Birthday is invalid.</p>\r\n                                <p ng-show="(signupForm1.bday.$dirty || signupForm2.bday.$dirty) && signupForm2.bday.$error.required">Day of birthday is required.</p>\r\n                            </div>\r\n                            <div ng-show="auth.isFirstInputError(\'gender\')">\r\n                                <p ng-show="(signupForm1.gender.$dirty || signupForm2.gender.$dirty) && signupForm2.gender.$error.required">Gender is required.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="signup-body">\r\n                        <form name="signupForm2" role="form" method="post" ng-submit="auth.signup()" novalidate ng-model-options="{ debounce: 500 }" style="margin: 0 2%">\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.firstname.$dirty || signupForm2.firstname.$dirty) && signupForm2.firstname.$invalid }">\r\n                                    <input auth-signup-input forminput field="fname" group-field="name" type="text" placeholder="First Name" name="firstname" ng-model="auth.user.firstname" required />\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 50%;" ng-class="{ \'err\': (signupForm1.lastname.$dirty || signupForm2.lastname.$dirty) && signupForm2.lastname.$invalid }">\r\n                                    <input auth-signup-input forminput field="lname" group-field="name" type="text" placeholder="Last Name" name="lastname" ng-model="auth.user.lastname" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.email.$dirty || signupForm2.email.$dirty) && (signupForm2.email.$invalid || auth.isNotEmail() || (auth.user.email && auth.isDuplicateUsername())) }">\r\n                                    <input auth-signup-input forminput field="email" type="text" placeholder="name@example.com" name="email" ng-model="auth.user.email" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password1.$dirty || signupForm2.password1.$dirty) && (signupForm2.password1.$invalid || auth.isLessLengthPassword1()) }">\r\n                                    <input auth-signup-input forminput field="passwd" type="password" placeholder="password at least 6 characters" name="password1" ng-model="auth.user.password1" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;" ng-class="{ \'err\': (signupForm1.password2.$dirty || signupForm2.password2.$dirty) && (signupForm2.password2.$invalid || auth.isLessLengthPassword2() || (auth.user.password1 && auth.isPasswordsNotMatch())) }">\r\n                                    <input auth-signup-input forminput field="repasswd" type="password" placeholder="re-password" name="password2"  ng-model="auth.user.password2" required />\r\n                                </div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 100%;"><span>Birthday</span></div>\r\n                            </div>\r\n                            <div class="signup-input-group">\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.byear.$dirty || signupForm2.byear.$dirty) && signupForm2.byear.$invalid }">\r\n                                    <select auth-signup-input forminput field="byear" group-field="birthday" class="init" name="byear" ng-model="auth.user.byear" required>\r\n                                        <option value="" selected>Year</option>\r\n                                        <option ng-repeat="byear in auth.arrByears" value="{{ byear }}">{{ byear }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bmonth.$dirty || signupForm2.bmonth.$dirty) && signupForm2.bmonth.$invalid }">\r\n                                     <select auth-signup-input forminput field="bmonth" group-field="birthday" class="init" name="bmonth" ng-model="auth.user.bmonth" required>\r\n                                        <option value="" selected>Month</option>\r\n                                        <option ng-repeat="bmonth in auth.arrBmonths" value="{{ bmonth.value }}">{{ bmonth.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.bday.$dirty || signupForm2.bday.$dirty) && (signupForm2.bday.$invalid || auth.isInvalidBirthday()) }">\r\n                                    <select auth-signup-input forminput field="bday" group-field="birthday" class="init" name="bday" ng-model="auth.user.bday" required>\r\n                                        <option value="" selected>Day</option>\r\n                                        <option ng-repeat="bday in auth.arrBdays" value="{{ bday.value }}">{{ bday.text }}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class="signup-input-block" style="width: 25%;" ng-class="{ \'err\': (signupForm1.gender.$dirty || signupForm2.gender.$dirty) && signupForm2.gender.$invalid }">\r\n                                    <select auth-signup-input forminput field="gender" class="init" name="gender" ng-model="auth.user.gender" required>\r\n                                        <option value="" selected>Gender</option>\r\n                                        <option value="M">Male</option>\r\n                                        <option value="F">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div align="center" class="signup-agreement">\r\n                                <div>By Clicking "SIGN UP" below, you are agreeing to the</div>\r\n                                <div><a href="terms.html">Terms and Conditions</a> and <a href="privacy.html">Privacy Policy</a></div>\r\n                            </div>\r\n                            <div class="signup-submit">\r\n                                <button type="submit" formsubmit ng-disabled="signupForm2.$invalid || auth.error.duplicateUsername || auth.error.notEmail || auth.error.lessLengthPassword1 || auth.error.lessLengthPassword2 || auth.error.passwordsNotMatch || auth.error.invalidBirthday">SIGN UP</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n');$templateCache.put('modules/auth/forbidden.html','<h1>Forbidden</h1>');$templateCache.put('modules/auth/logout.html','<div align="center" class="auth">\r\n    <div class="logout">\r\n        <div class="card">\r\n            <div class="passport">\r\n                <div class="background"></div>\r\n                <span class="text">PASSPORT</span>\r\n            </div>\r\n            <form name="logoutForm" role="form" method="post" ng-submit="auth.logout()" novalidate>\r\n                <div class="user ellipsis">{{ userLogout() }}</div>\r\n                <div class="notifyerr">\r\n                    <span ng-show="auth.error.logout">\r\n                        <span ng-show="auth.logoutFailed.current == auth.logoutFailed.SIGNOUT">SIGN OUT automatically</span>\r\n                        <span ng-show="auth.logoutFailed.current > 0 && auth.logoutFailed.current < auth.logoutFailed.SIGNOUT">LOG OUT {{auth.logoutFailed.current}} failed</span>\r\n                    </span>\r\n                </div>\r\n                <input auth-logout-input formpasswd name="passwordLogout" class="passwd" type="password" placeholder="password" ng-model="auth.passwordLogout" required />\r\n                <a href="#" class="forgotpw" ng-show="auth.logoutFailed.current >= auth.logoutFailed.FORGOTPW">FORGOT PASSWORD</a>\r\n                <button type="button" class="signout" ng-click="auth.signout()">SIGN OUT</button>\r\n                <button type="submit" class="submit" ng-hide="logoutForm.passwordLogout.$error.required">SIGN IN</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>');$templateCache.put('modules/auth/signupcomplete.html','');$templateCache.put('modules/auth/window-logout.html','<div uib-modal-transclude></div>');$templateCache.put('modules/calendar/calendar-center.html','<img src="/images/calendar/calendar-center.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/calendar/calendar-left.html','<img src="/images/calendar/calendar-left.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/calendar-bak/calendar-center.html','<div>\n    calendar\n    \n</div>');$templateCache.put('modules/calendar-bak/calendar-left.html','');$templateCache.put('modules/calendar-bak/calendar-right.html','');$templateCache.put('modules/calendar-bak/calendar-top.html','<div class="highttop">\n    \n    \n</div>');$templateCache.put('modules/cart/cart-center-cart.html','<div>\n    \n</div>');$templateCache.put('modules/cart/cart-center-order.html','');$templateCache.put('modules/cart/cart-center-return.html','<div>\n    \n</div>');$templateCache.put('modules/cart/cart-center-trackorder.html','<div>\n    \n</div>');$templateCache.put('modules/cart/cart-center-wishlist.html','<div>\n    \n</div>');$templateCache.put('modules/cart/cart-center.html','<div>\n    <div class="matop">\n            <div class="col-md-8 col-sm-12 col-xs-12">\n            <h3>My Shopping Bag (2)</h3>\n    <!--\n            <script>$(document).ready(function(c) {\n                $(\'.close1\').on(\'click\', function(c){\n                    $(\'.cart-header\').fadeOut(\'slow\', function(c){\n                        $(\'.cart-header\').remove();\n                    });\n                    });\t  \n                });\n            </script>\n    -->\n            <div class="cart-header">\n             <div class="close1"> </div>\n             <div class="cart-sec simpleCart_shelfItem">\n                    <div class="cart-item cyc">\n                         <img src="/images/8.jpg" class="img-responsive" alt=""/>\n                    </div>\n                   <div class="cart-item-info">\n                    <h3><a href="#">Mountain Hopper(XS R034)</a><span>Model No: 3578</span></h3>\n                    <ul class="qty">\n                        <li><p>Size : 5</p></li>\n                        <li><p>Qty : 1</p></li>\n                    </ul>\n\n                         <div class="delivery">\n                         <p>Service Charges : Rs.100.00</p>\n                         <span>Delivered in 2-3 bussiness days</span>\n                         <div class="clearfix"></div>\n                    </div>\t\n                   </div>\n                   <div class="clearfix"></div>\n\n              </div>\n            </div>\n    <!--\n            <script>$(document).ready(function(c) {\n                $(\'.close2\').on(\'click\', function(c){\n                        $(\'.cart-header2\').fadeOut(\'slow\', function(c){\n                    $(\'.cart-header2\').remove();\n                });\n                });\t  \n                });\n            </script>\n    -->\n            <div class="cart-header2">\n             <div class="close2"> </div>\n              <div class="cart-sec simpleCart_shelfItem">\n                    <div class="cart-item cyc">\n                         <img src="/images/11.jpg" class="img-responsive" alt=""/>\n                    </div>\n                   <div class="cart-item-info">\n                    <h3><a href="#">Mountain Hopper(XS R034)</a><span>Model No: 3578</span></h3>\n                    <ul class="qty">\n                        <li><p>Size : 5</p></li>\n                        <li><p>Qty : 1</p></li>\n                    </ul>\n                         <div class="delivery">\n                         <p>Service Charges : Rs.100.00</p>\n                         <span>Delivered in 2-3 bussiness days</span>\n                         <div class="clearfix"></div>\n                    </div>\t\n                   </div>\n                   <div class="clearfix"></div>\n\n              </div>\n            </div>\n        </div>\n\n        <div class="col-md-4 col-sm-12 col-xs-12">\n            <a class="continue" href="#">Continue to basket</a>\n\n            <div class="price-details">\n                 <h3>Price Details</h3>\n                 <span>Total</span>\n                 <span class="total1">6200.00</span>\n                 <span>Discount</span>\n                 <span class="total1">---</span>\n                 <span>Delivery Charges</span>\n                 <span class="total1">150.00</span>\n                 <div class="clearfix"></div>\t\t\t\t \n            </div>\t\n            <ul class="total_price">\n                <li class="last_price"> <h4>TOTAL</h4></li>\t\n                <li class="last_price"><span>6350.00</span></li>\n                <div class="clearfix"> </div>\n            </ul>\n\n\n            <div class="clearfix"></div>\n                <a class="order" href="#">Place Order</a>\n                <div class="total-item">\n                 <h3>OPTIONS</h3>\n                 <h4>COUPONS</h4>\n                 <a class="cpns" href="#">Apply Coupons</a>\n                 <p><a href="#">Log In</a> to use accounts - linked coupons</p>\n            </div> \n        </div>\n    </div>\n    \n       \n</div>');$templateCache.put('modules/cart/cart-left.html','<div>\n<!--\n    <a class="continue" href="#">Continue to basket</a>\n\n    <div class="price-details">\n         <h3>Price Details</h3>\n         <span>Total</span>\n         <span class="total1">6200.00</span>\n         <span>Discount</span>\n         <span class="total1">---</span>\n         <span>Delivery Charges</span>\n         <span class="total1">150.00</span>\n         <div class="clearfix"></div>\t\t\t\t \n    </div>\t\n    <ul class="total_price">\n        <li class="last_price"> <h4>TOTAL</h4></li>\t\n        <li class="last_price"><span>6350.00</span></li>\n        <div class="clearfix"> </div>\n    </ul>\n\n\n    <div class="clearfix"></div>\n        <a class="order" href="#">Place Order</a>\n        <div class="total-item">\n         <h3>OPTIONS</h3>\n         <h4>COUPONS</h4>\n         <a class="cpns" href="#">Apply Coupons</a>\n         <p><a href="#">Log In</a> to use accounts - linked coupons</p>\n    </div>    \n-->\n    <div class="matop">\n        <ul>\n            <li><a ui-sref="#">Cart</a></li>\n            <li><a ui-sref="#">My order</a></li>\n            <li><a ui-sref="#">Track my Order</a></li>\n            <li><a ui-sref="#">My returns and cancellation</a></li>\n            <li><a ui-sref="#">My Favorite</a></li>\n\n        </ul>\n    </div>\n       \n</div>');$templateCache.put('modules/cart/cart-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/cart/cart-top.html','<div class="highttop">\n    <span class="spantop">\n        Order\n    </span>\n</div>');$templateCache.put('modules/cart/cart.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12">\n           \n            \n        </div>\n        <div ui-view="left"  class="pageleft col-xs-9 col-sm-2 col-md-3 cart-total check">\n            <a class="continue" href="#">Continue to basket</a>\n\t\t\t <div class="price-details">\n\t\t\t\t <h3>Price Details</h3>\n\t\t\t\t <span>Total</span>\n\t\t\t\t <span class="total1">6200.00</span>\n\t\t\t\t <span>Discount</span>\n\t\t\t\t <span class="total1">---</span>\n\t\t\t\t <span>Delivery Charges</span>\n\t\t\t\t <span class="total1">150.00</span>\n\t\t\t\t <div class="clearfix"></div>\t\t\t\t \n\t\t\t </div>\t\n\t\t\t <ul class="total_price">\n\t\t\t   <li class="last_price"> <h4>TOTAL</h4></li>\t\n\t\t\t   <li class="last_price"><span>6350.00</span></li>\n\t\t\t   <div class="clearfix"> </div>\n\t\t\t </ul>\n\t\t\t\n\t\t\t \n\t\t\t <div class="clearfix"></div>\n\t\t\t <a class="order" href="#">Place Order</a>\n\t\t\t <div class="total-item">\n\t\t\t\t <h3>OPTIONS</h3>\n\t\t\t\t <h4>COUPONS</h4>\n\t\t\t\t <a class="cpns" href="#">Apply Coupons</a>\n\t\t\t\t <p><a href="#">Log In</a> to use accounts - linked coupons</p>\n\t\t\t </div>\n        </div>\n        \n        \n        <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-9 cart-items check">\n            <h1>My Shopping Bag (2)</h1>\n\t\t\t\t<script>$(document).ready(function(c) {\n\t\t\t\t\t$(\'.close1\').on(\'click\', function(c){\n\t\t\t\t\t\t$(\'.cart-header\').fadeOut(\'slow\', function(c){\n\t\t\t\t\t\t\t$(\'.cart-header\').remove();\n\t\t\t\t\t\t});\n\t\t\t\t\t\t});\t  \n\t\t\t\t\t});\n\t\t\t   </script>\n\t\t\t <div class="cart-header">\n\t\t\t\t <div class="close1"> </div>\n\t\t\t\t <div class="cart-sec simpleCart_shelfItem">\n\t\t\t\t\t\t<div class="cart-item cyc">\n\t\t\t\t\t\t\t <img src="/images/8.jpg" class="img-responsive" alt=""/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t   <div class="cart-item-info">\n\t\t\t\t\t\t<h3><a href="#">Mountain Hopper(XS R034)</a><span>Model No: 3578</span></h3>\n\t\t\t\t\t\t<ul class="qty">\n\t\t\t\t\t\t\t<li><p>Size : 5</p></li>\n\t\t\t\t\t\t\t<li><p>Qty : 1</p></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t <div class="delivery">\n\t\t\t\t\t\t\t <p>Service Charges : Rs.100.00</p>\n\t\t\t\t\t\t\t <span>Delivered in 2-3 bussiness days</span>\n\t\t\t\t\t\t\t <div class="clearfix"></div>\n\t\t\t\t        </div>\t\n\t\t\t\t\t   </div>\n\t\t\t\t\t   <div class="clearfix"></div>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t  </div>\n\t\t\t </div>\n\t\t\t <script>$(document).ready(function(c) {\n\t\t\t\t\t$(\'.close2\').on(\'click\', function(c){\n\t\t\t\t\t\t\t$(\'.cart-header2\').fadeOut(\'slow\', function(c){\n\t\t\t\t\t\t$(\'.cart-header2\').remove();\n\t\t\t\t\t});\n\t\t\t\t\t});\t  \n\t\t\t\t\t});\n\t\t\t </script>\n\t\t\t <div class="cart-header2">\n\t\t\t\t <div class="close2"> </div>\n\t\t\t\t  <div class="cart-sec simpleCart_shelfItem">\n\t\t\t\t\t\t<div class="cart-item cyc">\n\t\t\t\t\t\t\t <img src="/images/11.jpg" class="img-responsive" alt=""/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t   <div class="cart-item-info">\n\t\t\t\t\t\t<h3><a href="#">Mountain Hopper(XS R034)</a><span>Model No: 3578</span></h3>\n\t\t\t\t\t\t<ul class="qty">\n\t\t\t\t\t\t\t<li><p>Size : 5</p></li>\n\t\t\t\t\t\t\t<li><p>Qty : 1</p></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t <div class="delivery">\n\t\t\t\t\t\t\t <p>Service Charges : Rs.100.00</p>\n\t\t\t\t\t\t\t <span>Delivered in 2-3 bussiness days</span>\n\t\t\t\t\t\t\t <div class="clearfix"></div>\n\t\t\t\t        </div>\t\n\t\t\t\t\t   </div>\n\t\t\t\t\t   <div class="clearfix"></div>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t  </div>\n\t\t\t  </div>\n            \n        </div>\n    </div>\n\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n    \n    \n</div>\n\n\n\n');$templateCache.put('modules/chat/chat.html','<div class="demo" chat-module>\n<!--\n  <div class="static">\n    <div class="static__text">Pull white sidebar to the right</div>\n  </div>\n-->\n  <div class="sidebar-content">\n    <div class="searchfrn">\n      <img src="http://i.imgur.com/t8TeL1S.png" alt="" class="searchfrn__img" />\n      <input type="text" class="searchfrn__input" placeholder="Search Friends" />\n    </div>\n\t  \n\t  <div class="contact-group">\n\t  \n\t\t\t<div class="contact" chat-rid="r1">\n\t\t\t  <img src="http://i.imgur.com/ae5r9VA.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Kevin Spacey</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r1\')" ng-hide="chat.getNumNotify(\'r1\') == 0"></span>\n\t\t\t</div>\n\t\t\t<div class="contact" chat-rid="r2">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Rosamund Pike</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r2\')" ng-hide="chat.getNumNotify(\'r2\') == 0"></span>\n\t\t\t</div>\n\t\t\t<div class="contact" chat-rid="r3">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Eva Green</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r3\')" ng-hide="chat.getNumNotify(\'r3\') == 0"></span>\n\t\t\t</div>\n\t\t\t<div class="contact" chat-rid="r4">\n\t\t\t  <img src="http://i.imgur.com/ae5r9VA.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Paul Newman</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r4\')" ng-hide="chat.getNumNotify(\'r4\') == 0"></span>\n\t\t\t</div>\n\t\t\t<div class="contact" chat-rid="r5">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r5\')" ng-hide="chat.getNumNotify(\'r5\') == 0"></span>\n\t\t\t</div>\n<!--\n\t\t\t  <div class="contact" chat-rid="r6">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r6\')" ng-hide="chat.getNumNotify(\'r6\') == 0"></span>\n\t\t\t</div>\n\t\t\t  <div class="contact" chat-rid="r7">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r7\')" ng-hide="chat.getNumNotify(\'r7\') == 0"></span>\n\t\t\t</div>\n\t\t\t  <div class="contact" chat-rid="r8">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r8\')" ng-hide="chat.getNumNotify(\'r8\') == 0"></span>\n\t\t\t</div>\n\t\t\t  <div class="contact" chat-rid="r9">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r9\')" ng-hide="chat.getNumNotify(\'r9\') == 0"></span>\n\t\t\t</div>\n\t\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n\t\t  <div class="contact" chat-rid="r10">\n\t\t\t  <img src="http://i.imgur.com/tnMJGyT.png" alt="" class="contact__photo online" />\n\t\t\t  <span class="contact__name">Thomas Break</span>\n\t\t\t  <span class="contact__status"></span>\n\t\t\t  <span class="contact__notify" ng-bind="chat.getNumNotify(\'r10\')" ng-hide="chat.getNumNotify(\'r10\') == 0"></span>\n\t\t\t</div>\n-->\n\t\t  \n\t  </div>\n\t  <div class="shadow-a"></div>\n    \n\t  \n\t <div class="history">\n\t\t <img src="/images/history.png" class="history__photo" />\n\t </div>\n<!--\n\t  <div class="historyNotify">\n\t  </div>\n-->\n  </div>\n \n    \n  <div class="conversation" ng-if="chat.convState">\n    <div align="center" class="conversation__icon">\n\t\t<img ng-src="{{chat.currentIcon}}" alt="" class="online" />\n\t</div>\n    <img src="/images/cancel.png" class="conversation__close" chat-conversation-close/>\n\t<img src="/images/mute.png" class="conversation__mute" chat-conversation-mute/>\n    <div align="center" class="conversation__person">\n<!--      <span class="conversation__online active"></span>-->\n      <span class="conversation__name" ng-bind="chat.currentName"></span>\n\t\t\t  \n\n    </div>\n\t  \n    <div id="chatConvMsgs" class="conversation__messages">\n<!--\n      <div class="conversation__msgRow">\n        <div class="conversation__message notMine">Such SVG, much Javascript, very CSS!</div>\n      </div>\n      <div class="conversation__msgRow">\n        <div class="conversation__message mine">Wow!</div>\n      </div>\n      <div class="conversation__msgRow">\n        <div class="conversation__message mine">Very elastic! Such easings!</div>\n      </div>\n      <div class="conversation__msgRow">\n        <div class="conversation__message notMine">\n          Check out my other <a href="http://codepen.io/suez/public/" target="_blank">pens</a>\n        </div>\n      </div>\n-->\n      <div class="conversation__msgRow" ng-repeat="cm in chat.currentMessages | orderBy:origDt">\n        <div ng-if="cm.type == \'text\'" class="conversation__message {{chat.isSender(cm.username)? \'mine\': \'notMine\'}}">{{cm.text}}</div>\n        <div ng-if="cm.type == \'image\'" class="conversation__image {{chat.isSender(cm.username)? \'mine\': \'notMine\'}}"><img ng-src="{{cm.content}}" chat-conversation-image-content /></div>\n        <div ng-if="cm.type == \'file\'" class="conversation__file {{chat.isSender(cm.username)? \'mine\': \'notMine\'}}" >\n            <a class="file-content">\n                <div class="file-icon"><img ng-src="{{chat.getIconFile(cm.fileName)}}"></div>\n                <div class="file-name">{{cm.fileName}}</div>\n                <div class="file-size">{{chat.formatCapacityFile(cm.fileSize)}}</div>\n            </a>\n        </div>\n      </div>\n    </div>\n\t<div class="shadow-b"></div>\n\n    <div class="conversation__dropZone" ng-show="chat.isConvDropZoneShow">\n        <div class="conversation__dropContainer">\n            <div class="conversation__droppable" ng-class="{hover: chat.isConvDroppableHover}" chat-conversation-droppable></div>\n        </div>\n    </div>\n\n\t  <div class="shadow-c"></div>\n\t  <div class="conversation__inbox">\n\t\t  <textarea type="text" id="chatConvInput" class="conversation__input" placeholder="Your message" ng-model="chat.newMsg" chat-conversation-input></textarea> \n\n\t\t  <div class="conversation__tool">\n\t\t\t  <div class="conversation__table">\n\t\t\t\t  <div class="conversation__row">\n\t\t\t\t\t  <div class="conversation__cell1">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t<img class="conversation__pic" src="/images/smiling.png" chat-conversation-tool="emo"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Emotion</span>\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell2">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t  <img class="conversation__pic" src="/images/attachment.png" chat-conversation-tool="sendfile"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Send File</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell2">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t  <img class="conversation__pic" src="/images/photo-camera.png" chat-conversation-tool="takephoto" /><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Take Photo</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell2">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/mobile-phone.png" chat-conversation-tool="call"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Call</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell2">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/video-camera.png" chat-conversation-tool="videocall"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Video Call</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t\t  <div class="conversation__row">\n\t\t\t\t\t  <div class="conversation__cell3">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/joinchat.png" chat-conversation-tool="joinchat"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Join Chat</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell4">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/map-location.png" chat-conversation-tool="location"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Location</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell4">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/newpage.png" chat-conversation-tool="newpage"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">MutiChat</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell4">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/settings.png" chat-conversation-tool="setting"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Settings</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div class="conversation__cell4">\n\t\t\t\t\t\t  <div align="center" class="conversation__padpic">\n\t\t\t\t\t\t\t   <img class="conversation__pic" src="/images/block.png" chat-conversation-tool="block"/><br>\n\t\t\t\t\t\t\t  <span class="conversation__spanmenu" aling="center">Block</span>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t\t  \n\t\t\t\t  \n\t\t\t  </div>\n\t\t\t  \n\t\t\t  \n\t\t  </div>\n          <div id="chatConvBrowseFiles" class="conversation__browsefiles"></div>\n<!--\t  \t<input type="text" class="conversation__input" placeholder="Your message" ng-model="newChatMsg" chat-conversation-input />-->\n\t  </div>\n   \n      \n\n\n      \n  </div>\n</div>\n\n\n\n\n\n');$templateCache.put('modules/chat/takephoto.html','<div chat-conversation-takephoto>\r\n    <video id="video" width="640" height="480" autoplay></video>\r\n    <button id="snap">Snap Photo</button>\r\n    <canvas id="canvas" width="640" height="480"></canvas>\r\n</div>');$templateCache.put('modules/chat/window-takephoto.html','<div uib-modal-transclude></div>');$templateCache.put('modules/community/community-center.html','<div class="col-md-12 col-sm-12 col-xs-12">\n\n    <div class="twt-wrapper">\n        <div class="panel panel-info">\n\n            <div class="panel-body">\n                <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                <br />\n                <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                <div class="clearfix"></div>\n                <hr />\n                <ul class="media-list">\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ Rexona Kumi</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                            </p>\n                        </div>\n                    </li>\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ John Doe</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                            </p>\n                        </div>\n                    </li>\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ Madonae Jonisyi</strong>\n                            <p>\n                                Lorem ipsum dolor <a href="#"># sit amet</a> sit amet, consectetur adipiscing elit.\n                            </p>\n                        </div>\n                    </li>\n                </ul>\n                <span class="text-danger">237K users active</span>\n            </div>\n        </div>\n    </div>\n</div>');$templateCache.put('modules/community/community-left.html','<div align="center">\n    <img src="/images/img_avatar.png" class="img-circle img-responsive">\n</div>');$templateCache.put('modules/community/community-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/community/community-top.html','<div class="highttop">\n    <span class="spantop">\n        Community\n    </span>\n</div>');$templateCache.put('modules/community/community.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12 col-sm-12 col-xs-12">\n            <h2>Header</h2>\n        </div>\n        <div ui-view="left" class="pageleft col-md-3 col-sm-2 col-xs-9 ">\n            \n            <div align="center">\n                <img src="/images/img_avatar.png" class="img-circle img-responsive">\n            </div>\n            \n        </div>\n        <div ui-view="center" class="pagecenter  col-md-9 col-sm-8  col-xs-12">\n            <div class="col-md-12 col-sm-12 col-xs-12">\n                 \n                <div class="twt-wrapper">\n                    <div class="panel panel-info">\n                        \n                        <div class="panel-body">\n                            <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                            <br />\n                            <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                            <div class="clearfix"></div>\n                            <hr />\n                            <ul class="media-list">\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ Rexona Kumi</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                                        </p>\n                                    </div>\n                                </li>\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ John Doe</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                                        </p>\n                                    </div>\n                                </li>\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ Madonae Jonisyi</strong>\n                                        <p>\n                                            Lorem ipsum dolor <a href="#"># sit amet</a> sit amet, consectetur adipiscing elit.\n                                        </p>\n                                    </div>\n                                </li>\n                            </ul>\n                            <span class="text-danger">237K users active</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n    \n    \n\n</div>\n\n\n\n\n\n<!--\n<div>\n    <div>This is Community page.</div>\n    <br>\n   \n\n\n\n    <div class="container">\n        \n\n        <div class="row">\n            <div class="col-lg-4 col-lg-offset-4 col-md-4 col-md-offset-4 col-sm-4 col-sm-offset-4">\n                 TWEET WRAPPER START \n                <div class="twt-wrapper">\n                    <div class="panel panel-info">\n                        <div class="panel-heading">\n                            Time line \n                        </div>\n                        <div class="panel-body">\n                            <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                            <br />\n                            <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                            <div class="clearfix"></div>\n                            <hr />\n                            <ul class="media-list">\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ Rexona Kumi</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                                        </p>\n                                    </div>\n                                </li>\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ John Doe</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                                        </p>\n                                    </div>\n                                </li>\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ Madonae Jonisyi</strong>\n                                        <p>\n                                            Lorem ipsum dolor <a href="#"># sit amet</a> sit amet, consectetur adipiscing elit.\n                                        </p>\n                                    </div>\n                                </li>\n                            </ul>\n                            <span class="text-danger">237K users active</span>\n                        </div>\n                    </div>\n                </div>\n               \n            </div>\n        </div>\n    </div>\n\n\n\n \n\n\n   \n\n</div>\n-->\n');$templateCache.put('modules/contacts/contacts-center.html','<img src="/images/contacts/contacts-center.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/contacts/contacts-left.html','<img src="/images/contacts/contacts-left.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/downtown/downtown-center-bank.html','<div class="col-md-12" >\n   \n    <div id="menu-top" class="col-md-12 topmenu" >\n        <div class="col-md-2" >\n            <ul class="nav nav-bar">\n                <li>Bank</li>\n            </ul>\n        </div>\n        <div class="col-md-8">\n            <ul class="nav nav-bar">\n\n                \n                <li  class="col-md-2"><a href="services.html">Services</a></li>\n                <li class="col-md-2"><a href="clients.html">Clients</a></li>\n                <li class="col-md-2"><a href="about.html">About</a></li>\n                <li class="col-md-2"><a href="#">Contact</a></li>\n\n\n            </ul>\n        </div>\n        <div class="col-md-2">\n            <a>Internet banking</a>\n        </div>\n    </div>\n    <div id="menu-med" class="col-md-12">\n       <div class="col-md-9">\n           <header id="homeheader">\n           </header>\n       </div>\n       <div class="col-md-3">\n           \n       </div>\n        \n    </div>\n    <div id="menu-bottom" class="col-md-12">\n        <section id="introcol">\n            <div class="leftcol col-md-4">\n\n                <iframe marginwidth=0 marginheight=0 src="http://www.bangkokbank.com/fxbanner/banner1.htm" frameborder=0 width=173 scrolling=no height=165></iframe>\n            </div>\n\n            <div class="rightcol col-md-4">\n                <iframe id="ifrmBanner" scrolling="no" src="http://www.bangkokbank.com/MajorRates/MainBannerThai.htm" width="170" height="155" frameborder="0"></iframe>\n\n            </div>\n\n            <div class="midcol ">\n                <iframe src="http://namchiang.com/ncgp2-1.swf" width="172" height="165" frameborder="0" marginheight=0 marginwidth=0 scrolling="no"></iframe>\n\n            </div>\n            <div class="clear"></div>\n        </section>\n    </div>\n    <di v id="menu-banner" class="col-md-12">\n       \n        \n    </div>\n    \n    \n</div>\n');$templateCache.put('modules/downtown/downtown-center-catalog.html','<div>\n    <div class="women_main">\n\t\n\t<!-- start content -->\n\t<div class="col-md-12 w_content">\n\t\t<div class="women">\n\t\t\t<a href="#"><h4>Enthecwear - <span>4449 itemms</span> </h4></a>\n\t\t\t<ul class="w_nav">\n\t\t\t\t\t\t<li>Sort : </li>\n\t\t     \t\t\t<li><a class="active" href="#">popular</a></li> |\n\t\t     \t\t\t<li><a href="#">new </a></li> |\n\t\t     \t\t\t<li><a href="#">discount</a></li> |\n\t\t     \t\t\t<li><a href="#">price: Low High </a></li> \n\t\t     \t\t\t<div class="clear"></div>\t\n\t\t     </ul>\n\t\t     <div class="clearfix"></div>\t\n\t\t</div>\n\t\t<!-- grids_of_4 -->\n\t\t<div class="grids_of_4">\n\t\t  <div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w1.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $99.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w2.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $76.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w3.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $58.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w4.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $112.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"></div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class="grids_of_4">\n\t\t <div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w5.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $109.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w6.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $95.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w7.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $68.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w8.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $74.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"></div>\n\t\t</div>\n\t\t<div class="grids_of_4">\n\t\t  <div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w9.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $80.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w10.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $65.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w11.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $90.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="grid1_of_4">\n\t\t\t\t<div class="content_box"><a href="details.html">\n\t\t\t   \t   \t <img src="images/w12.jpg" class="img-responsive" alt=""/>\n\t\t\t\t   \t  </a>\n\t\t\t\t    <h4><a href="details.html"> Duis autem</a></h4>\n\t\t\t\t     <p>It is a long established fact that</p>\n\t\t\t\t\t <div class="grid_1 simpleCart_shelfItem">\n\t\t\t\t    \n\t\t\t\t\t <div class="item_add"><span class="item_price"><h6>ONLY $75.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t\t </div>\n\t\t\t   \t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"></div>\n\t\t</div>\n\t\t<!-- end grids_of_4 -->\n\t\t\n\t\t\n\t</div>\n\t<div class="clearfix"></div>\n\t\n\t<!-- end content -->\n</div>\n</div>');$templateCache.put('modules/downtown/downtown-center-item.html','<div>\n    <div class="col-md-12 det">\n\t\t\t\t  <div class="single_left">\n\t\t\t\t\t<div class="grid images_3_of_2">\n\t\t\t\t\t\t<ul id="etalage">\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href="optionallink.html">\n\t\t\t\t\t\t\t\t\t<img class="etalage_thumb_image" src="images/d1.jpg" class="img-responsive" />\n\t\t\t\t\t\t\t\t\t<img class="etalage_source_image" src="images/d1.jpg" class="img-responsive" title="" />\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<img class="etalage_thumb_image" src="images/d2.jpg" class="img-responsive" />\n\t\t\t\t\t\t\t\t<img class="etalage_source_image" src="images/d2.jpg" class="img-responsive" title="" />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<img class="etalage_thumb_image" src="images/d3.jpg" class="img-responsive"  />\n\t\t\t\t\t\t\t\t<img class="etalage_source_image" src="images/d3.jpg"class="img-responsive"  />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t    <li>\n\t\t\t\t\t\t\t\t<img class="etalage_thumb_image" src="images/d4.jpg" class="img-responsive"  />\n\t\t\t\t\t\t\t\t<img class="etalage_source_image" src="images/d4.jpg"class="img-responsive"  />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t <div class="clearfix"></div>\t\t\n\t\t\t\t  </div>\n\t\t\t\t  <div class="desc1 span_3_of_2">\n\t\t\t\t\t<h3>soluta nobis eleifend option</h3>\n\t\t\t\t\t<span class="brand">Brand: <a href="#">Sed do eiusmod </a></span>\n\t\t\t\t\t<br>\n\t\t\t\t\t<span class="code">Product Code: Product 11</span>\n\t\t\t\t\t<p>when an unknown printer took a galley of type and scrambled it to make</p>\n\t\t\t\t\t\t<div class="price">\n\t\t\t\t\t\t\t<span class="text">Price:</span>\n\t\t\t\t\t\t\t<span class="price-new">$110.00</span><span class="price-old">$100.00</span> \n\t\t\t\t\t\t\t<span class="price-tax">Ex Tax: $90.00</span><br>\n\t\t\t\t\t\t\t<span class="points"><small>Price in reward points: 400</small></span><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t<div class="det_nav1">\n\t\t\t\t\t\t<h4>Select a size :</h4>\n\t\t\t\t\t\t\t<div class=" sky-form col col-4">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t<li><label class="checkbox"><input type="checkbox" name="checkbox"><i></i>L</label></li>\n\t\t\t\t\t\t\t\t\t<li><label class="checkbox"><input type="checkbox" name="checkbox"><i></i>S</label></li>\n\t\t\t\t\t\t\t\t\t<li><label class="checkbox"><input type="checkbox" name="checkbox"><i></i>M</label></li>\n\t\t\t\t\t\t\t\t\t<li><label class="checkbox"><input type="checkbox" name="checkbox"><i></i>XL</label></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="btn_form">\n\t\t\t\t\t\t<a href="checkout.html">buy</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<a href="#"><span>login to save in wishlist </span></a>\n\t\t\t\t\t\n\t\t\t   \t </div>\n          \t    <div class="clearfix"></div>\n          \t   </div>\n          \t    <div class="single-bottom1">\n\t\t\t\t\t<h6>Details</h6>\n\t\t\t\t\t<p class="prod-desc">Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option</p>\n\t\t\t\t</div>\n\t\t\t\t<div class="single-bottom2">\n\t\t\t\t\t<h6>Related Products</h6>\n\t\t\t\t\t\t<div class="product">\n\t\t\t\t\t\t   <div class="product-desc">\n\t\t\t\t\t\t\t\t<div class="product-img">\n\t\t                           <img src="images/w8.jpg" class="img-responsive " alt=""/>\n\t\t                       </div>\n\t\t                       <div class="prod1-desc">\n\t\t                           <h5><a class="product_link" href="#">Excepteur sint</a></h5>\n\t\t                           <p class="product_descr"> Vivamus ante lorem, eleifend nec interdum non, ullamcorper et arcu. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. </p>\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t   </div>\n\t\t\t\t\t\t\t  <div class="clearfix"></div>\n\t\t\t\t\t      </div>\n\t\t\t\t\t\t  <div class="product_price">\n\t\t\t\t\t\t\t\t<span class="price-access">$597.51</span>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<button class="button1"><span>Add to cart</span></button>\n\t\t                  </div>\n\t\t\t\t\t\t <div class="clearfix"></div>\n\t\t\t\t     </div>\n\t\t\t\t     <div class="product">\n\t\t\t\t\t\t   <div class="product-desc">\n\t\t\t\t\t\t\t\t<div class="product-img">\n\t\t                           <img src="images/w10.jpg" class="img-responsive " alt=""/>\n\t\t                       </div>\n\t\t                       <div class="prod1-desc">\n\t\t                           <h5><a class="product_link" href="#">Excepteur sint</a></h5>\n\t\t                           <p class="product_descr"> Vivamus ante lorem, eleifend nec interdum non, ullamcorper et arcu. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. </p>\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t   </div>\n\t\t\t\t\t\t\t   <div class="clearfix"></div>\n\t\t\t\t\t      </div>\n\t\t\t\t\t\t  <div class="product_price">\n\t\t\t\t\t\t\t\t<span class="price-access">$597.51</span>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<button class="button1"><span>Add to cart</span></button>\n\t\t                  </div>\n\t\t\t\t\t\t <div class="clearfix"></div>\n\t\t\t\t     </div>\n\t\t   \t  </div>\n\t       </div>\n</div>');$templateCache.put('modules/downtown/downtown-center-shop.html','<div>\n    \n  <div class="arriv">\n\t\n\t\t<div class="arriv-top">\n\t\t\t<div class="col-md-6 arriv-left">\n\t\t\t\t<img src="images/1.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info">\n\t\t\t\t\t<h3>NEW ARRIVALS</h3>\n\t\t\t\t\t<p>REVIVE YOUR WARDROBE WITH CHIC KNITS</p>\n\t\t\t\t\t<div class="crt-btn">\n\t\t\t\t\t\t<a href="details.html">TAKE A LOOK</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="col-md-6 arriv-right">\n\t\t\t\t<img src="images/2.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info">\n\t\t\t\t\t<h3>TUXEDO</h3>\n\t\t\t\t\t<p>REVIVE YOUR WARDROBE WITH CHIC KNITS</p>\n\t\t\t\t\t<div class="crt-btn">\n\t\t\t\t\t\t<a href="details.html">SHOP NOW</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"> </div>\n\t\t</div>\n\t\t<div class="arriv-bottm">\n\t\t\t<div class="col-md-8 arriv-left1">\n\t\t\t\t<img src="images/3.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info1">\n\t\t\t\t\t<h3>SWEATER</h3>\n\t\t\t\t\t<p>REVIVE YOUR WARDROBE WITH CHIC KNITS</p>\n\t\t\t\t\t<div class="crt-btn">\n\t\t\t\t\t\t<a href="details.html">SHOP NOW</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="col-md-4 arriv-right1">\n\t\t\t\t<img src="images/4.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info2">\n\t\t\t\t\t<a href="details.html"><h3>Trekking Shoes<i class="ars"></i></h3></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"> </div>\n\t\t</div>\n\t\t<div class="arriv-las">\n\t\t\t<div class="col-md-4 arriv-left2">\n\t\t\t\t<img src="images/5.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info2">\n\t\t\t\t\t<a href="details.html"><h3>Casual Glasses<i class="ars"></i></h3></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="col-md-4 arriv-middle">\n\t\t\t\t<img src="images/6.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info3">\n\t\t\t\t\t<h3>FRESH LOOK T-SHIRT</h3>\n\t\t\t\t\t<div class="crt-btn">\n\t\t\t\t\t\t<a href="details.html">SHOP NOW</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="col-md-4 arriv-right2">\n\t\t\t\t<img src="images/7.jpg" class="img-responsive" alt="">\n\t\t\t\t<div class="arriv-info2">\n\t\t\t\t\t<a href="details.html"><h3>Elegant Watches<i class="ars"></i></h3></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="clearfix"> </div>\n\t\t</div>\n\n</div>\n<div class="special">\n\t\n\t\t<h3>Special Offers</h3>\n\t\t<div class="specia-top">\n\t\t\t<ul class="grid_2">\n\t\t<li>\n\t\t\t\t<a href="details.html"><img src="images/8.jpg" class="img-responsive" alt=""></a>\n\t\t\t\t<div class="special-info grid_1 simpleCart_shelfItem">\n\t\t\t\t\t<h5>Lorem ipsum dolor</h5>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><h6>ONLY $40.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t</div>\n\t\t</li>\n\t\t<li>\n\t\t\t\t<a href="details.html"><img src="images/9.jpg" class="img-responsive" alt=""></a>\n\t\t\t\t<div class="special-info grid_1 simpleCart_shelfItem">\n\t\t\t\t\t<h5>Consectetur adipis</h5>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><h6>ONLY $60.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t</div>\n\t\t</li>\n\t\t<li>\n\t\t\t\t<a href="details.html"><img src="images/10.jpg" class="img-responsive" alt=""></a>\n\t\t\t\t<div class="special-info grid_1 simpleCart_shelfItem">\n\t\t\t\t\t<h5>Commodo consequat</h5>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><h6>ONLY $14.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t</div>\n\t\t</li>\n\t\t<li>\n\t\t\t\t<a href="details.html"><img src="images/11.jpg" class="img-responsive" alt=""></a>\n\t\t\t\t<div class="special-info grid_1 simpleCart_shelfItem">\n\t\t\t\t\t<h5>Voluptate velit</h5>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><h6>ONLY $37.00</h6></span></div>\n\t\t\t\t\t<div class="item_add"><span class="item_price"><a href="#">add to cart</a></span></div>\n\t\t\t\t</div>\n\t\t</li>\n\t\t<div class="clearfix"> </div>\n\t</ul>\n\t\t</div>\n\t\n</div>\n\n</div>');$templateCache.put('modules/downtown/downtown-center.html','<div>\n    <img src="/images/mall.png" class="img-responsive">\n</div>');$templateCache.put('modules/downtown/downtown-left.html','<div>\n    <h2>Shop</h2>\n    <img src="/images/0.jpg" class="img-responsive">\n</div>\n           ');$templateCache.put('modules/downtown/downtown-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/downtown/downtown-top.html','<div class="highttop">\n    <span class="spantop"> \n        Downtown\n    </span>\n<!--\n   <div class="collapse navbar-collapse col-md-9" id="bs-example">\n        <ul class="nav navbar-nav navbar-right">\n            <li>\n                <a ui-sref="#">Track my order</a>\n            </li>\n\n            <li>\n                <a  ui-sref="#">My Favorites</a>\n            </li>\n\n\n\n        </ul>\n    </div>\n-->\n</div>');$templateCache.put('modules/downtown/downtown.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12">\n            <h2>Top</h2>\n        </div>\n        <div ui-view="left" class="pageleft col-xs-9 col-sm-2 col-md-3">\n            <h2>Shop</h2>\n            <img src="/images/0.jpg" class="img-responsive">\n        </div>\n        <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-9">\n            <img src="/images/mall.png" class="img-responsive">\n        </div>\n    </div>\n\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n    \n    \n</div>\n\n\n');$templateCache.put('modules/help/help-center.html','<div style="margin-top:30px;">\n    <h4>\u0E04\u0E38\u0E13\u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E40\u0E23\u0E32 \u0E17\u0E35\u0E21\u0E07\u0E32\u0E19 Sector5 \u0E44\u0E14\u0E49\u0E14\u0E31\u0E07\u0E15\u0E48\u0E2D\u0E44\u0E1B\u0E19\u0E35\u0E49</h4><br>\n    <span>Hot Line : \u0E42\u0E17\u0E23. 02-999-9999</span><br>\n    <span>E-mail : info@muime.com</span><br>\n    <span>\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E2A\u0E33\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19 : 455 \u0E0B\u0E2D\u0E22 \u0E1E\u0E36\u0E48\u0E07\u0E21\u0E3523 \u0E16.\u0E2A\u0E38\u0E02\u0E38\u0E21\u0E27\u0E34\u0E1793 \u0E41\u0E02\u0E27\u0E07\u0E1A\u0E32\u0E07\u0E08\u0E32\u0E01 \u0E40\u0E02\u0E15\u0E1E\u0E23\u0E30\u0E42\u0E02\u0E19\u0E07 \u0E01\u0E17\u0E21 10260</span><br>\n    <form class="form-horizontal" method="post">\n        <fieldset>\n            <legend class="text-center header">Contact us</legend>\n\n            <div class="form-group">\n                <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-user bigicon"></i></span>\n                <div class="col-md-8">\n                    <input id="fname" name="name" type="text" placeholder="First Name" class="form-control">\n                </div>\n            </div>\n            <div class="form-group">\n                <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-user bigicon"></i></span>\n                <div class="col-md-8">\n                    <input id="lname" name="name" type="text" placeholder="Last Name" class="form-control">\n                </div>\n            </div>\n\n            <div class="form-group">\n                <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-envelope-o bigicon"></i></span>\n                <div class="col-md-8">\n                    <input id="email" name="email" type="text" placeholder="Email Address" class="form-control">\n                </div>\n            </div>\n\n            <div class="form-group">\n                <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-phone-square bigicon"></i></span>\n                <div class="col-md-8">\n                    <input id="phone" name="phone" type="text" placeholder="Phone" class="form-control">\n                </div>\n            </div>\n\n            <div class="form-group">\n                <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-pencil-square-o bigicon"></i></span>\n                <div class="col-md-8">\n                    <textarea class="form-control" id="message" name="message" placeholder="Enter your massage for us here. We will get back to you within 2 business days." rows="7"></textarea>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="col-md-12 text-center">\n                    <button type="submit" class="btn btn-primary btn-lg">Submit</button>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>');$templateCache.put('modules/help/help-left.html','<div>\n    <li style="margin-top:30px;">\n        <a href="#" style="text-decoration: none;"><h4>\u0E08\u0E30\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E40\u0E23\u0E32\u0E44\u0E14\u0E49\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E44\u0E23?</h4></a>\n        <a href="#" style="text-decoration: none;"><h4>\u0E09\u0E31\u0E19\u0E44\u0E21\u0E48\u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E40\u0E02\u0E49\u0E32\u0E2A\u0E39\u0E48\u0E23\u0E30\u0E1A\u0E1A\u0E44\u0E14\u0E49 ?</h4></a>\n        <a href="#" style="text-decoration: none;"><h4>\u0E19\u0E42\u0E22\u0E1A\u0E32\u0E22\u0E04\u0E27\u0E32\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E2A\u0E48\u0E27\u0E19\u0E15\u0E31\u0E27</h4></a>\n    </li>\n</div>');$templateCache.put('modules/help/help-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/help/help-top.html','<div class="highttop">\n    <span class="spantop">Help</span>\n</div>');$templateCache.put('modules/help/help.html','<div id="homepage " class="row  ">\n     <div class="col-md-9 col-sm-9 col-xs-12 ">\n        <div ui-view="top" class="pagetop col-md-12 col-sm-12 col-xs-12">\n           <div style="display:inline-block;width:100%;">\n               <h2>Help</h2>\n<!--\n               <p class="pull-right visible-xs">\n                <button type="button" class="btn btn-primary btn-xs" data-toggle="offcanvas">Toggle Chat</button>\n              </p>\n-->\n              \n           </div>\n            \n        </div>\n        <div ui-view="left" class="pageleft col-md-3 col-sm-3 col-xs-12 ">\n            <li style="margin-top:30px;">\n                <a href="#" style="text-decoration: none;"><h4>\u0E08\u0E30\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E40\u0E23\u0E32\u0E44\u0E14\u0E49\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E44\u0E23?</h4></a>\n                <a href="#" style="text-decoration: none;"><h4>\u0E09\u0E31\u0E19\u0E44\u0E21\u0E48\u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E40\u0E02\u0E49\u0E32\u0E2A\u0E39\u0E48\u0E23\u0E30\u0E1A\u0E1A\u0E44\u0E14\u0E49 ?</h4></a>\n                <a href="#" style="text-decoration: none;"><h4>\u0E19\u0E42\u0E22\u0E1A\u0E32\u0E22\u0E04\u0E27\u0E32\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E2A\u0E48\u0E27\u0E19\u0E15\u0E31\u0E27</h4></a>\n            </li>\n        </div>\n        <div ui-view="center" class="pagecenter col-md-9 col-sm-9 col-xs=12 ">\n           <div style="margin-top:30px;">\n               <h4>\u0E04\u0E38\u0E13\u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E40\u0E23\u0E32 \u0E17\u0E35\u0E21\u0E07\u0E32\u0E19 Sector5 \u0E44\u0E14\u0E49\u0E14\u0E31\u0E07\u0E15\u0E48\u0E2D\u0E44\u0E1B\u0E19\u0E35\u0E49</h4><br>\n                <span>Hot Line : \u0E42\u0E17\u0E23. 02-999-9999</span><br>\n                <span>E-mail : info@muime.com</span><br>\n                <span>\u0E15\u0E34\u0E14\u0E15\u0E48\u0E2D\u0E2A\u0E33\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19 : 455 \u0E0B\u0E2D\u0E22 \u0E1E\u0E36\u0E48\u0E07\u0E21\u0E3523 \u0E16.\u0E2A\u0E38\u0E02\u0E38\u0E21\u0E27\u0E34\u0E1793 \u0E41\u0E02\u0E27\u0E07\u0E1A\u0E32\u0E07\u0E08\u0E32\u0E01 \u0E40\u0E02\u0E15\u0E1E\u0E23\u0E30\u0E42\u0E02\u0E19\u0E07 \u0E01\u0E17\u0E21 10260</span><br>\n                <form class="form-horizontal" method="post">\n                    <fieldset>\n                        <legend class="text-center header">Contact us</legend>\n\n                        <div class="form-group">\n                            <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-user bigicon"></i></span>\n                            <div class="col-md-8">\n                                <input id="fname" name="name" type="text" placeholder="First Name" class="form-control">\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-user bigicon"></i></span>\n                            <div class="col-md-8">\n                                <input id="lname" name="name" type="text" placeholder="Last Name" class="form-control">\n                            </div>\n                        </div>\n\n                        <div class="form-group">\n                            <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-envelope-o bigicon"></i></span>\n                            <div class="col-md-8">\n                                <input id="email" name="email" type="text" placeholder="Email Address" class="form-control">\n                            </div>\n                        </div>\n\n                        <div class="form-group">\n                            <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-phone-square bigicon"></i></span>\n                            <div class="col-md-8">\n                                <input id="phone" name="phone" type="text" placeholder="Phone" class="form-control">\n                            </div>\n                        </div>\n\n                        <div class="form-group">\n                            <span class="col-md-1 col-md-offset-2 text-center"><i class="fa fa-pencil-square-o bigicon"></i></span>\n                            <div class="col-md-8">\n                                <textarea class="form-control" id="message" name="message" placeholder="Enter your massage for us here. We will get back to you within 2 business days." rows="7"></textarea>\n                            </div>\n                        </div>\n\n                        <div class="form-group">\n                            <div class="col-md-12 text-center">\n                                <button type="submit" class="btn btn-primary btn-lg">Submit</button>\n                            </div>\n                        </div>\n                    </fieldset>\n                </form>\n           </div>\n            \n        </div>\n      \n    </div>\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list" >\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<!--\n<div>\n    <div>This is Help page.</div>\n    <br>\n    <h2>Contact</h2>\n\n    <div class="card" >\n      <img align="center" src="/images/img_avatar.png" alt="Avatar" style="width:100%">\n      <div class="containerg" >\n        <h4><b>John Doe</b></h4>\n        <p>Architect & Engineer</p>\n      </div>\n    </div>\n\n\n</div>\n-->\n');$templateCache.put('modules/home/home-center.html','<div class="col-md-12 col-sm-12 col-xs-12">\n                 \n    <div class="twt-wrapper">\n        <div class="panel panel-info">\n\n            <div class="panel-body">\n                <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                <br />\n                <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                <div class="clearfix"></div>\n                <hr />\n                <ul class="media-list">\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ Rexona Kumi</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                            </p>\n                        </div>\n                    </li>\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ John Doe</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                            </p>\n                        </div>\n                    </li>\n\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>\n<div class="col-md-12 col-sm-12 col-xs-12">\n\n    <div class="twt-wrapper">\n        <div class="panel panel-info">\n\n            <div class="panel-body">\n                <div class="clearfix"></div>\n                <hr />\n                <ul class="media-list">\n                    <li class="media">\n\n                        <div class="media-body">\n\n                            <p>\n                               Enter your message here...\n                                To be or not to be,\n                                that is the question...\n                                maybe, I think,\n                                I\'m not sure\n                                wait, you\'re still reading this?\n                                Type a good message already!\n                            </p>\n                        </div>\n                    </li>\n\n\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>');$templateCache.put('modules/home/home-left.html','\n<div align="center">\n    <img src="/images/img_avatar.png" class="img-circle img-responsive">\n</div>\n ');$templateCache.put('modules/home/home-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/home/home-top.html','<div class="highttop">\n   \n<!--        <span class="spantop">Rainny</span>-->\n    \n    \n    \n    <ul class="submenu_list" >\n        <li ui-sref-active="active" class="submenu_listitem content" item="timeline" style="width:30%;">\n            <div class="ellipsis"><a ui-sref="main.home.timeline">Ratthasapa Vatthanaautsahapong</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li class="submenu_listitem module" item="notification">\n            <div class="ellipsis"><a href="#home/notification">Notification</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n\t\t<li ui-sref-active="active" class="submenu_listitem content" item="favourites">\n            <div class="ellipsis"><a ui-sref="main.home.favourites">Favourites</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li ui-sref-active="active" class="submenu_listitem content" item="mail">\n            <div class="ellipsis"><a ui-sref="main.home.mail">Mail</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li ui-sref-active="active" class="submenu_listitem content" item="contacts">\n            <div class="ellipsis"><a ui-sref="main.home.contacts">Contacts</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li ui-sref-active="active" class="submenu_listitem content" item="calendar">\n            <div class="ellipsis"><a ui-sref="main.home.calendar">Calendar</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li ui-sref-active="active" class="submenu_listitem content" item="notes">\n            <div class="ellipsis"><a ui-sref="main.home.notes">Notes</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        <li ui-sref-active="active" class="submenu_listitem content" item="photos">\n            <div class="ellipsis"><a ui-sref="main.home.photos">Photos</a></div>\n            <div align="center" class="notify"><span class="number">0</span></div>\n        \n    </ul>\n   \n\n<!--\n    <div class="navbar-header">\n        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example">\n            <span class="sr-only">Toggle navigation</span> Menu <i class="fa fa-bars"></i>\n        </button>\n                \n    </div>\n\n           \n    <div class="collapse navbar-collapse col-md-9" id="bs-example">\n        <ul class="nav navbar-nav navbar-right">\n            <li>\n                <a ui-sref="#">Notification</a>\n            </li>\n            <li>\n                <a  ui-sref="#">Mail</a>\n            </li>\n            <li>\n                <a ui-sref="#">Contacts</a>\n            </li>\n            <li>\n                <a href="#">Calendar</a>\n            </li>\n            <li>\n                <a ui-sref="#">Notes</a>\n            </li>\n            <li>\n                <a ui-sref="#">Photos</a>\n            </li>\n\n        </ul>\n    </div>\n-->\n</div>');$templateCache.put('modules/home/home.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12 col-sm-12 col-xs-12">\n        \n            \n           \n        </div>\n        <div ui-view="left" class="pageleft col-md-3 col-sm-2 ">\n            <div align="center">\n                <img src="/images/img_avatar.png" class="img-circle img-responsive">\n            </div>\n        </div>\n        <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-9">\n            <div class="col-md-12 col-sm-12 col-xs-12">\n                 \n                <div class="twt-wrapper">\n                    <div class="panel panel-info">\n                        \n                        <div class="panel-body">\n                            <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                            <br />\n                            <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                            <div class="clearfix"></div>\n                            <hr />\n                            <ul class="media-list">\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ Rexona Kumi</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                                        </p>\n                                    </div>\n                                </li>\n                                <li class="media">\n                                    <a href="#" class="pull-left">\n                                        <img src="/images/2.png" alt="" class="img-circle">\n                                    </a>\n                                    <div class="media-body">\n                                        <span class="text-muted pull-right">\n                                            <small class="text-muted">30 min ago</small>\n                                        </span>\n                                        <strong class="text-success">@ John Doe</strong>\n                                        <p>\n                                            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                            Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                                        </p>\n                                    </div>\n                                </li>\n                               \n                            </ul>\n                        \n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-12 col-sm-12 col-xs-12">\n                 \n                <div class="twt-wrapper">\n                    <div class="panel panel-info">\n                        \n                        <div class="panel-body">\n                            <div class="clearfix"></div>\n                            <hr />\n                            <ul class="media-list">\n                                <li class="media">\n                                    \n                                    <div class="media-body">\n                                        \n                                        <p>\n                                           Enter your message here...\n                                            To be or not to be,\n                                            that is the question...\n                                            maybe, I think,\n                                            I\'m not sure\n                                            wait, you\'re still reading this?\n                                            Type a good message already!\n                                        </p>\n                                    </div>\n                                </li>\n                                \n                               \n                            </ul>\n                        \n                        </div>\n                    </div>\n                </div>\n            </div>\n        ` </div>\n        </div>\n    \n         \n    \n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n         \n    \n</div>\n');$templateCache.put('modules/item/item-center.html','<div>\n      <div class="products">\t \n\t\t\t<div class="single-page">\n\t\t\t\t<div class="single-page-row" id="detail-21">\n\t\t\t\t\t<div class="col-md-3 single-top-left">\t\n\t\t\t\t\t\t<div class="flexslider">\n\t\t\t\t\t\t\t<ul class="slides">\n\t\t\t\t\t\t\t\t<li data-thumb="images/s1.jpg">\n\t\t\t\t\t\t\t\t\t<div class="thumb-image detail_images"> <img src="/images/item/s1.jpg" data-imagezoom="true" class="img-responsive" alt=""> </div>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li data-thumb="images/s2.jpg">\n\t\t\t\t\t\t\t\t\t <div class="thumb-image"> <img src="/images/item/s2.jpg" data-imagezoom="true" class="img-responsive" alt=""> </div>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li data-thumb="images/s3.jpg">\n\t\t\t\t\t\t\t\t   <div class="thumb-image"> <img src="/images/item/s3.jpg" data-imagezoom="true" class="img-responsive" alt=""> </div>\n\t\t\t\t\t\t\t\t</li> \n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="col-md-6 single-top-right">\n\t\t\t\t\t\t<h3 class="item_name">Electric Snow Blower</h3>\n\t\t\t\t\t\t<p>Processing Time: Item will be shipped out within 2-3 working days. </p>\n\t\t\t\t\t\t<div class="single-rating">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li><i class="fa fa-star-o" aria-hidden="true"></i></li>\n\t\t\t\t\t\t\t\t<li><i class="fa fa-star-o" aria-hidden="true"></i></li>\n\t\t\t\t\t\t\t\t<li><i class="fa fa-star-o" aria-hidden="true"></i></li>\n\t\t\t\t\t\t\t\t<li><i class="fa fa-star-o" aria-hidden="true"></i></li>\n\t\t\t\t\t\t\t\t<li><i class="fa fa-star-o" aria-hidden="true"></i></li>\n\t\t\t\t\t\t\t\t<li class="rating">20 reviews</li>\n\t\t\t\t\t\t\t\t<li><a href="#">Add your review</a></li>\n\t\t\t\t\t\t\t</ul> \n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="single-price">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>$540</li>  \n\t\t\t\t\t\t\t\t<li><del>$600</del></li> \n\t\t\t\t\t\t\t\t<li><span class="w3off">10% OFF</span></li> \n\t\t\t\t\t\t\t\t<li>Ends on: June,5th</li>\n\t\t\t\t\t\t\t\t<li><a href="#"><i class="fa fa-gift" aria-hidden="true"></i> Coupon</a></li>\n\t\t\t\t\t\t\t</ul>\t\n\t\t\t\t\t\t</div> \n\t\t\t\t\t\t<p class="single-price-text">Fusce a egestas nibh, eget ornare erat. Proin placerat, urna et consequat efficitur, sem odio blandit enim, sit amet euismod turpis est mattis lectus. Vestibulum maximus quam et quam egestas imperdiet. In dignissim auctor viverra. </p>\n\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Snow Blower" /> \n\t\t\t\t\t\t\t<input type="hidden" name="amount" value="540.00" /> \n\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<button class="w3ls-cart w3ls-cart-like"><i class="fa fa-heart-o" aria-hidden="true"></i> Add to Wishlist</button>\n\t\t\t\t\t</div>\n\t\t\t\t   <div class="clearfix"> </div>  \n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div> \n\t\t\t<!-- recommendations -->\n\t\t\t<div class="recommend">\n\t\t\t\t<h3 class="w3ls-title">Our Recommendations </h3> \n\t\t\t\t<script>\n\t\t\t\t\t$(document).ready(function() { \n\t\t\t\t\t\t$("#owl-demo5").owlCarousel({\n\t\t\t\t\t \n\t\t\t\t\t\t  autoPlay: 3000, //Set AutoPlay to 3 seconds\n\t\t\t\t\t \n\t\t\t\t\t\t  items :4,\n\t\t\t\t\t\t  itemsDesktop : [640,5],\n\t\t\t\t\t\t  itemsDesktopSmall : [414,4],\n\t\t\t\t\t\t  navigation : true\n\t\t\t\t\t \n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}); \n\t\t\t\t</script>\n\t\t\t\t<div id="owl-demo5" class="owl-carousel">\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits">\n\t\t\t\t\t\t\t<div class="new-tag"><h6>20% <br> Off</h6></div>\n\t\t\t\t\t\t\t<a href="products1.html"><img src="/images/item/f2.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products1.html">Women Sandal</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$20</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Women Sandal" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="20.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>        \n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<a href="products.html"><img src="/images/item/e4.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products.html">Digital Camera</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$80</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Digital Camera"/> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="100.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>         \n\t\t\t\t\t\t</div>  \n\t\t\t\t\t</div>  \n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<div class="new-tag"><h6>New</h6></div>\n\t\t\t\t\t\t\t<a href="products4.html"><img src="/images/item/s1.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products4.html">Roller Skates</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$180</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Roller Skates"/> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="180.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>         \n\t\t\t\t\t\t</div>  \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<a href="products1.html"><img src="/images/item/f1.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products1.html">T Shirt</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$10</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="T Shirt" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="10.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>        \n\t\t\t\t\t\t</div>    \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<div class="new-tag"><h6>New</h6></div>\n\t\t\t\t\t\t\t<a href="products6.html"><img src="/images/item/p1.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products6.html">Coffee Mug</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$14</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Coffee Mug" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="14.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>         \n\t\t\t\t\t\t</div>  \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<div class="new-tag"><h6>20% <br> Off</h6></div>\n\t\t\t\t\t\t\t<a href="products6.html"><img src="/images/item/p2.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products6.html">Teddy bear</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$20</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Teddy bear" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="20.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>        \n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<a href="products4.html"><img src="/images/item/s2.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products4.html">Football</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$70</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Football"/> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="70.00"/>\n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>        \n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div> \n\t\t\t\t\t<div class="item">\n\t\t\t\t\t\t<div class="glry-w3agile-grids agileits"> \n\t\t\t\t\t\t\t<div class="new-tag"><h6>Sale</h6></div>\n\t\t\t\t\t\t\t<a href="products3.html"><img src="/images/item/h1.png" alt="img"></a>\n\t\t\t\t\t\t\t<div class="view-caption agileits-w3layouts">           \n\t\t\t\t\t\t\t\t<h4><a href="products3.html">Wall Clock</a></h4>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur</p>\n\t\t\t\t\t\t\t\t<h5>$80</h5>\n\t\t\t\t\t\t\t\t<form action="#" method="post">\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="cmd" value="_cart" />\n\t\t\t\t\t\t\t\t\t<input type="hidden" name="add" value="1" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="w3ls_item" value="Wall Clock" /> \n\t\t\t\t\t\t\t\t\t<input type="hidden" name="amount" value="80.00" /> \n\t\t\t\t\t\t\t\t\t<button type="submit" class="w3ls-cart" ><i class="fa fa-cart-plus" aria-hidden="true"></i> Add to cart</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>         \n\t\t\t\t\t\t</div>  \n\t\t\t\t\t</div> \n\t\t\t\t</div>    \n\t\t\t</div>\n\t\t\t<!-- //recommendations --> \n\t\t\t<!-- collapse-tabs -->\n\t\t\t<div class="collpse tabs">\n\t\t\t\t<h3 class="w3ls-title">About this item</h3> \n\t\t\t\t<div class="panel-group collpse" id="accordion" role="tablist" aria-multiselectable="true">\n\t\t\t\t\t<div class="panel panel-default">\n\t\t\t\t\t\t<div class="panel-heading" role="tab" id="headingOne">\n\t\t\t\t\t\t\t<h4 class="panel-title">\n\t\t\t\t\t\t\t\t<a class="pa_italic" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-file-text-o fa-icon" aria-hidden="true"></i> Description <span class="fa fa-angle-down fa-arrow" aria-hidden="true"></span> <i class="fa fa-angle-up fa-arrow" aria-hidden="true"></i>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">\n\t\t\t\t\t\t\t<div class="panel-body">\n\t\t\t\t\t\t\t\tAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="panel panel-default">\n\t\t\t\t\t\t<div class="panel-heading" role="tab" id="headingTwo">\n\t\t\t\t\t\t\t<h4 class="panel-title">\n\t\t\t\t\t\t\t\t<a class="collapsed pa_italic" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-info-circle fa-icon" aria-hidden="true"></i> additional information <span class="fa fa-angle-down fa-arrow" aria-hidden="true"></span> <i class="fa fa-angle-up fa-arrow" aria-hidden="true"></i>\n\t\t\t\t\t\t\t\t</a> \n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">\n\t\t\t\t\t\t\t<div class="panel-body">\n\t\t\t\t\t\t\t\tAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="panel panel-default">\n\t\t\t\t\t\t<div class="panel-heading" role="tab" id="headingThree">\n\t\t\t\t\t\t\t<h4 class="panel-title">\n\t\t\t\t\t\t\t\t<a class="collapsed pa_italic" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-check-square-o fa-icon" aria-hidden="true"></i> reviews (5) <span class="fa fa-angle-down fa-arrow" aria-hidden="true"></span> <i class="fa fa-angle-up fa-arrow" aria-hidden="true"></i>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">\n\t\t\t\t\t\t\t<div class="panel-body">\n\t\t\t\t\t\t\t\tAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="panel panel-default">\n\t\t\t\t\t\t<div class="panel-heading" role="tab" id="headingFour">\n\t\t\t\t\t\t\t<h4 class="panel-title">\n\t\t\t\t\t\t\t\t<a class="collapsed pa_italic" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseFour" aria-expanded="false" aria-controls="collapseFour">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-question-circle fa-icon" aria-hidden="true"></i> help <span class="fa fa-angle-down fa-arrow" aria-hidden="true"></span> <i class="fa fa-angle-up fa-arrow" aria-hidden="true"></i>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id="collapseFour" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingFour">\n\t\t\t\t\t\t\t<div class="panel-body">\n\t\t\t\t\t\t\t\tAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- //collapse --> \n\t\t\t<!-- offers-cards --> \n\t\t\t<div class="w3single-offers offer-bottom"> \n\t\t\t\t<div class="col-md-6 offer-bottom-grids">\n\t\t\t\t\t<div class="offer-bottom-grids-info2">\n\t\t\t\t\t\t<h4>Special Gift Cards</h4> \n\t\t\t\t\t\t<h6>More brands, more ways to shop. <br> Check out these ideal gifts!</h6>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="col-md-6 offer-bottom-grids">\n\t\t\t\t\t<div class="offer-bottom-grids-info">\n\t\t\t\t\t\t<h4>Flat $10 Discount</h4> \n\t\t\t\t\t\t<h6>The best Shopping Offer <br> On Fashion Store</h6>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="clearfix"> </div>\n\t\t\t</div>\n\t\t\t<!-- //offers-cards -->\n\t\t\n\t</div>\n</div>');$templateCache.put('modules/item/item-left.html','<div>\n    <div class="list-group">\n        <a href="#" class="list-group-item">Category 1</a>\n        <a href="#" class="list-group-item">Category 2</a>\n        <a href="#" class="list-group-item">Category 3</a>\n    </div>\n</div>');$templateCache.put('modules/item/item-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/item/item-top.html','<div class="highttop">\n    <span class="spantop">\n        Kookkukkoo Shop\n    </span>\n</div>');$templateCache.put('modules/mail/mail-center.html','<ul class="writemsg-tool-list">\r\n    <li class="writemsg-tool-listitem">\r\n        <a style="color:lightseagreen;">+ Write</a>\r\n    </li>\r\n    <li class="writemsg-tool-listitem disabled">\r\n        <a>Reply</a> | <a>Reply All</a> | <a>Forward</a> \r\n    </li>\r\n    <li class="writemsg-tool-listitem disabled">\r\n        <a>Mark</a> | <a>Move</a>\r\n    </li>\r\n    <li class="writemsg-tool-listitem disabled"><a>Print</a></li>\r\n    <li class="writemsg-tool-listitem disabled"><a style="color: red;">Trash</a></li>\r\n</ul>');$templateCache.put('modules/mail/mail-left.html','');$templateCache.put('modules/notes/notes-center.html','<img src="/images/notes/notes-center.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/notes/notes-left.html','<img src="/images/notes/notes-left.png" style="position:absolute; top: 0px; left: 0px; width: 100%; height: 100%;" />');$templateCache.put('modules/search/search.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12">\n            <h2>Top</h2>\n<!--\n            <div class="searchc">\n              <svg class="searchc-svg" viewBox="0 0 320 70"\n                   data-init="M160,3 L160,3 a27,27 0 0,1 0,54 L160,57 a27,27 0 0,1 0,-54 M197,67 181.21,51.21"\n                   data-mid="M160,3 L160,3 a27,27 0 0,1 0,54 L160,57 a27,27 0 0,1 0,-54 M179.5,49.5 179.5,49.5"\n                   data-active="M27,3 L293,3 a27,27 0 0,1 0,54 L27,57 a27,27 0 0,1 0,-54 M179.5,49.5 179.5,49.5">\n                <path class="searchc-svg__path" d="M160,3 L160,3 a27,27 0 0,1 0,54 L160,57 a27,27 0 0,1 0,-54 M197,67 181.21,51.21" />\n              </svg>\n              <input type="text" class="searchc-input" />\n              <div class="searchc-close"></div>\n            </div>\n-->\n\n        </div>\n        <div ui-view="left" class="pageleft col-xs-9 col-sm-2 col-md-3">\n            <h2>\n                Search\n            </h2>\n        </div>\n        <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-9">\n            fghgfhgfh\n        </div>\n    </div>\n\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n    \n    \n</div>\n\n\n');$templateCache.put('modules/setting/setting-center.html','<div>\n    <form class="form-horizontal" role="form">\n        <fieldset>\n\n          <!-- Form Name -->\n          <legend>Address Details</legend>\n\n          <!-- Text input-->\n          <div class="form-group">\n            <label class="col-sm-2 control-label" for="textinput">Line 1</label>\n            <div class="col-sm-10">\n              <input type="text" placeholder="Address Line 1" class="form-control">\n            </div>\n          </div>\n\n          <!-- Text input-->\n          <div class="form-group">\n            <label class="col-sm-2 control-label" for="textinput">Line 2</label>\n            <div class="col-sm-10">\n              <input type="text" placeholder="Address Line 2" class="form-control">\n            </div>\n          </div>\n\n          <!-- Text input-->\n          <div class="form-group">\n            <label class="col-sm-2 control-label" for="textinput">City</label>\n            <div class="col-sm-10">\n              <input type="text" placeholder="City" class="form-control">\n            </div>\n          </div>\n\n          <!-- Text input-->\n          <div class="form-group">\n            <label class="col-sm-2 control-label" for="textinput">State</label>\n            <div class="col-sm-4">\n              <input type="text" placeholder="State" class="form-control">\n            </div>\n\n            <label class="col-sm-2 control-label" for="textinput">Postcode</label>\n            <div class="col-sm-4">\n              <input type="text" placeholder="Post Code" class="form-control">\n            </div>\n          </div>\n\n\n\n          <!-- Text input-->\n          <div class="form-group">\n            <label class="col-sm-2 control-label" for="textinput">Country</label>\n            <div class="col-sm-10">\n              <input type="text" placeholder="Country" class="form-control">\n            </div>\n          </div>\n\n          <div class="form-group">\n            <div class="col-sm-offset-2 col-sm-10">\n              <div class="pull-right">\n                <button type="submit" class="btn btn-default">Cancel</button>\n                <button type="submit" class="btn btn-primary">Save</button>\n              </div>\n            </div>\n          </div>\n\n        </fieldset>\n      </form>\n</div>');$templateCache.put('modules/setting/setting-left.html','<div>\n    <li style="margin-top:30px;">\n        <a href="#" style="text-decoration: none;"><h4>\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E08\u0E31\u0E14\u0E2A\u0E48\u0E07</h4></a>\n\n        <a href="#" style="text-decoration: none;"><h4>\u0E15\u0E31\u0E49\u0E07\u0E04\u0E48\u0E32\u0E04\u0E27\u0E32\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E2A\u0E48\u0E27\u0E19\u0E15\u0E31\u0E27</h4></a>\n        <a href="#" style="text-decoration: none;"><h4>\u0E40\u0E1B\u0E25\u0E35\u0E48\u0E22\u0E19\u0E23\u0E2B\u0E31\u0E2A\u0E1C\u0E48\u0E32\u0E19</h4></a>\n\n    </li>\n</div>');$templateCache.put('modules/setting/setting-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/setting/setting-top.html','<div class="highttop">\n    <span class="spantop">Setting</span>\n</div>');$templateCache.put('modules/setting/setting.html','<div id="homepage " class="row">\n     <div class="col-md-9">\n        <div ui-view="top" class="pagetop col-md-12">\n            <h2>Setting</h2>\n        </div>\n        <div ui-view="left" class="pageleft col-xs-9 col-sm-2 col-md-3">\n            <li style="margin-top:30px;">\n                <a href="#" style="text-decoration: none;"><h4>\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E08\u0E31\u0E14\u0E2A\u0E48\u0E07</h4></a>\n\n                <a href="#" style="text-decoration: none;"><h4>\u0E15\u0E31\u0E49\u0E07\u0E04\u0E48\u0E32\u0E04\u0E27\u0E32\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E2A\u0E48\u0E27\u0E19\u0E15\u0E31\u0E27</h4></a>\n                <a href="#" style="text-decoration: none;"><h4>\u0E40\u0E1B\u0E25\u0E35\u0E48\u0E22\u0E19\u0E23\u0E2B\u0E31\u0E2A\u0E1C\u0E48\u0E32\u0E19</h4></a>\n\n            </li>\n        </div>\n        <div ui-view="center" class="pagecenter col-xs-12 col-sm-8 col-md-9">\n            <form class="form-horizontal" role="form">\n                <fieldset>\n\n                  <!-- Form Name -->\n                  <legend>Address Details</legend>\n\n                  <!-- Text input-->\n                  <div class="form-group">\n                    <label class="col-sm-2 control-label" for="textinput">Line 1</label>\n                    <div class="col-sm-10">\n                      <input type="text" placeholder="Address Line 1" class="form-control">\n                    </div>\n                  </div>\n\n                  <!-- Text input-->\n                  <div class="form-group">\n                    <label class="col-sm-2 control-label" for="textinput">Line 2</label>\n                    <div class="col-sm-10">\n                      <input type="text" placeholder="Address Line 2" class="form-control">\n                    </div>\n                  </div>\n\n                  <!-- Text input-->\n                  <div class="form-group">\n                    <label class="col-sm-2 control-label" for="textinput">City</label>\n                    <div class="col-sm-10">\n                      <input type="text" placeholder="City" class="form-control">\n                    </div>\n                  </div>\n\n                  <!-- Text input-->\n                  <div class="form-group">\n                    <label class="col-sm-2 control-label" for="textinput">State</label>\n                    <div class="col-sm-4">\n                      <input type="text" placeholder="State" class="form-control">\n                    </div>\n\n                    <label class="col-sm-2 control-label" for="textinput">Postcode</label>\n                    <div class="col-sm-4">\n                      <input type="text" placeholder="Post Code" class="form-control">\n                    </div>\n                  </div>\n\n\n\n                  <!-- Text input-->\n                  <div class="form-group">\n                    <label class="col-sm-2 control-label" for="textinput">Country</label>\n                    <div class="col-sm-10">\n                      <input type="text" placeholder="Country" class="form-control">\n                    </div>\n                  </div>\n\n                  <div class="form-group">\n                    <div class="col-sm-offset-2 col-sm-10">\n                      <div class="pull-right">\n                        <button type="submit" class="btn btn-default">Cancel</button>\n                        <button type="submit" class="btn btn-primary">Save</button>\n                      </div>\n                    </div>\n                  </div>\n\n                </fieldset>\n              </form>\n        </div>\n    </div>\n\n    <div class="col-md-3 col-sm-3 col-xs-12">\n        <div ui-view="right" class="pageright col-xs-9 col-sm-2 col-md-12">\n        \n            <div class="containert clearfix">\n                <div class="people-list" id="people-list">\n                    <div class="search">\n                        <input type="text" placeholder="search" />\n                        <i class="fa fa-search"></i>\n                    </div>\n                    <ul class="list">\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Vincent Porter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Aiden Chavez</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 7 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Mike Thomas</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Erica Hughes</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Ginger Johnston</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Tracy Carpenter</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 30 mins ago\n                                </div>\n                            </div>\n                        </li>\n\n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Christian Kelly</div>\n                                <div class="status">\n                                    <i class="fa fa-circle offline"></i> left 10 hours ago\n                                </div>\n                            </div>\n                        </li>\n\n                        \n                        <li class="clearfix">\n                            <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                            <div class="about">\n                                <div class="name">Peyton Mckinney</div>\n                                <div class="status">\n                                    <i class="fa fa-circle online"></i> online\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n\n            \n            <!-- end chat -->\n\n        </div>\n        <!-- end container -->\n\n        <script id="message-template" type="text/x-handlebars-template">\n            <li class="clearfix">\n                <div class="message-data align-right">\n                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;\n                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>\n                </div>\n                <div class="message other-message float-right">\n                    {{messageOutput}}\n                </div>\n            </li>\n        </script>\n\n        <script id="message-response-template" type="text/x-handlebars-template">\n            <li>\n                <div class="message-data">\n                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>\n                    <span class="message-data-time">{{time}}, Today</span>\n                </div>\n                <div class="message my-message">\n                    {{response}}\n                </div>\n            </li>\n        </script>\n        </div>\n    </div>\n    \n    \n</div>\n\n\n');$templateCache.put('modules/shop/shop-center.html','<div>\n    \n  <div class="col-md-12">\n\n                <div class="row carousel-holder">\n\n                    <div class="col-md-12">\n                        <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">\n                            <ol class="carousel-indicators">\n                                <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>\n                                <li data-target="#carousel-example-generic" data-slide-to="1"></li>\n                                <li data-target="#carousel-example-generic" data-slide-to="2"></li>\n                            </ol>\n                            <div class="carousel-inner">\n                                <div class="item active">\n                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">\n                                </div>\n                                <div class="item">\n                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">\n                                </div>\n                                <div class="item">\n                                    <img class="slide-image" src="http://placehold.it/800x300" alt="">\n                                </div>\n                            </div>\n                            <a class="left carousel-control" href="#carousel-example-generic" data-slide="prev">\n                                <span class="glyphicon glyphicon-chevron-left"></span>\n                            </a>\n                            <a class="right carousel-control" href="#carousel-example-generic" data-slide="next">\n                                <span class="glyphicon glyphicon-chevron-right"></span>\n                            </a>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div class="row">\n\n                    <div class="col-sm-6 col-lg-4 col-md-4">\n                        <div class="thumbnail">\n                            <img src="http://placehold.it/320x150" alt="">\n                            <div class="caption">\n                                <h4 class="pull-right">$24.99</h4>\n                                <h4><a href="#">First Product</a>\n                                </h4>\n                                <p>See more snippets like this online store item at <a target="_blank" href="http://www.bootsnipp.com">Bootsnipp - http://bootsnipp.com</a>.</p>\n                            </div>\n                            <div class="ratings">\n                                <p class="pull-right">15 reviews</p>\n                                <p>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-sm-4 col-lg-4 col-md-4">\n                        <div class="thumbnail">\n                            <img src="http://placehold.it/320x150" alt="">\n                            <div class="caption">\n                                <h4 class="pull-right">$64.99</h4>\n                                <h4><a href="#">Second Product</a>\n                                </h4>\n                                <p>This is a short description. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                            </div>\n                            <div class="ratings">\n                                <p class="pull-right">12 reviews</p>\n                                <p>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star-empty"></span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-sm-4 col-lg-4 col-md-4">\n                        <div class="thumbnail">\n                            <img src="http://placehold.it/320x150" alt="">\n                            <div class="caption">\n                                <h4 class="pull-right">$74.99</h4>\n                                <h4><a href="#">Third Product</a>\n                                </h4>\n                                <p>This is a short description. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                            </div>\n                            <div class="ratings">\n                                <p class="pull-right">31 reviews</p>\n                                <p>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star-empty"></span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-sm-4 col-lg-4 col-md-4">\n                        <div class="thumbnail">\n                            <img src="http://placehold.it/320x150" alt="">\n                            <div class="caption">\n                                <h4 class="pull-right">$84.99</h4>\n                                <h4><a href="#">Fourth Product</a>\n                                </h4>\n                                <p>This is a short description. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                            </div>\n                            <div class="ratings">\n                                <p class="pull-right">6 reviews</p>\n                                <p>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star-empty"></span>\n                                    <span class="glyphicon glyphicon-star-empty"></span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-sm-4 col-lg-4 col-md-4">\n                        <div class="thumbnail">\n                            <img src="http://placehold.it/320x150" alt="">\n                            <div class="caption">\n                                <h4 class="pull-right">$94.99</h4>\n                                <h4><a href="#">Fifth Product</a>\n                                </h4>\n                                <p>This is a short description. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                            </div>\n                            <div class="ratings">\n                                <p class="pull-right">18 reviews</p>\n                                <p>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star"></span>\n                                    <span class="glyphicon glyphicon-star-empty"></span>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    \n\n                </div>\n\n            </div>\n\n</div>');$templateCache.put('modules/shop/shop-left.html','<div>\n    <div class="list-group">\n        <a href="#" class="list-group-item">Category 1</a>\n        <a href="#" class="list-group-item">Category 2</a>\n        <a href="#" class="list-group-item">Category 3</a>\n    </div>\n</div>');$templateCache.put('modules/shop/shop-right.html','<div class="containert clearfix">\n    <div class="people-list" id="people-list">\n        <div class="search">\n            <input type="text" placeholder="search" />\n            <i class="fa fa-search"></i>\n        </div>\n        <ul class="list">\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Vincent Porter</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_02.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Aiden Chavez</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 7 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_03.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Mike Thomas</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_04.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Erica Hughes</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_05.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Ginger Johnston</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_06.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Tracy Carpenter</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 30 mins ago\n                    </div>\n                </div>\n            </li>\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_07.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Christian Kelly</div>\n                    <div class="status">\n                        <i class="fa fa-circle offline"></i> left 10 hours ago\n                    </div>\n                </div>\n            </li>\n\n\n            <li class="clearfix">\n                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_10.jpg" alt="avatar" />\n                <div class="about">\n                    <div class="name">Peyton Mckinney</div>\n                    <div class="status">\n                        <i class="fa fa-circle online"></i> online\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n\n\n<!-- end chat -->\n\n</div>');$templateCache.put('modules/shop/shop-top.html','<div class="highttop">\n    <span class="spantop">\n        Kookkukkoo Shop\n    </span>\n</div>');$templateCache.put('modules/signin/signin.html','<!--\n<div>\n\n    <div class="top-content">\n        \t\n            <div class="inner-bg">\n                <div class="container">\n                \t\n                    <div class="row">\n                        <div class="col-sm-8 col-sm-offset-2 text">\n\n\n                        </div>\n                    </div>\n                    \n                    <div class="row">\n                        <div class="col-sm-5">\n                        \t\n                        \t<div class="form-box">\n\t                        \t<div class="form-top">\n\t                        \t\t<div class="form-top-left">\n\t                        \t\t\t<h3>Login to our site</h3>\n\t                            \t\t<p>Enter username and password to log on:</p>\n\t                        \t\t</div>\n\t                        \t\t<div class="form-top-right">\n\t                        \t\t\t<i class="fa fa-key"></i>\n\t                        \t\t</div>\n\t                            </div>\n\t                            <div class="form-bottom">\n\t\t\t\t                    <form name="login" role="form" method="post" class="login-form" ng-submit="signin.submit()">\n\t\t\t\t                    \t<div class="form-group">\n\t\t\t\t                    \t\t<label class="sr-only" for="form-username">Username</label>\n\t\t\t\t                        \t<input type="text" name="username" placeholder="Username..." class="form-username form-control" id="username" ng-model="signin.user.username">\n\t\t\t\t                        </div>\n\t\t\t\t                        <div class="form-group">\n\t\t\t\t                        \t<label class="sr-only" for="form-password">Password</label>\n\t\t\t\t                        \t<input type="password" name="password" placeholder="Password..." class="form-password form-control" id="password" ng-model="signin.user.password">\n\t\t\t\t                        </div>\n\t\t\t\t                        <button type="submit" class="btn" value="Login">Sign in!</button>\n\t\t\t\t                    </form>\n\t\t\t                    </div>\n\t\t                    </div>\n\t\t                \n\n\t                        \n                        </div>\n                        \n                        <div class="col-sm-1 middle-border"></div>\n                        <div class="col-sm-1"></div>\n                        \t\n                        <div class="col-sm-5">\n                        \t\n                        \t<div class="form-box">\n                        \t\t<div class="form-top">\n\t                        \t\t<div class="form-top-left">\n\t                        \t\t\t<h3>Sign up now</h3>\n\t                            \t\t<p>Fill in the form below to get instant access:</p>\n\t                        \t\t</div>\n\t                        \t\t<div class="form-top-right">\n\t                        \t\t\t<i class="fa fa-pencil"></i>\n\t                        \t\t</div>\n\t                            </div>\n\t                            <div class="form-bottom">\n\t\t\t\t                    <form role="form" action="" method="post" class="registration-form">\n\t\t\t\t                    \t<div class="form-group">\n\t\t\t\t                    \t\t<label class="sr-only" for="form-first-name">First name</label>\n\t\t\t\t                        \t<input type="text" name="form-first-name" placeholder="First name..." class="form-first-name form-control" id="form-first-name">\n\t\t\t\t                        </div>\n\t\t\t\t                        <div class="form-group">\n\t\t\t\t                        \t<label class="sr-only" for="form-last-name">Last name</label>\n\t\t\t\t                        \t<input type="text" name="form-last-name" placeholder="Last name..." class="form-last-name form-control" id="form-last-name">\n\t\t\t\t                        </div>\n\t\t\t\t                        <div class="form-group">\n\t\t\t\t                        \t<label class="sr-only" for="form-email">Email</label>\n\t\t\t\t                        \t<input type="text" name="form-email" placeholder="Email..." class="form-email form-control" id="form-email">\n\t\t\t\t                        </div>\n\t\t\t\t                        <div class="form-group">\n\t\t\t\t                        \t<label class="sr-only" for="form-about-yourself">About yourself</label>\n\t\t\t\t                        \t<textarea name="form-about-yourself" placeholder="About yourself..." \n\t\t\t\t                        \t\t\t\tclass="form-about-yourself form-control" id="form-about-yourself"></textarea>\n\t\t\t\t                        </div>\n\t\t\t\t                        <button type="submit" class="btn">Sign me up!</button>\n\t\t\t\t                    </form>\n\t\t\t                    </div>\n                        \t</div>\n                        \t\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n            \n        </div>\n\n</div>\n-->\n');$templateCache.put('modules/signout/signout.html','<div>\n    <div class="row">\n       <div class="col-sm-5">\n                        \t\n            <div class="form-box">\n                <div class="form-top">\n                    <div class="form-top-left">\n                        <h3>Login to our site</h3>\n                        <p>Enter username and password to log out:</p>\n                    </div>\n                    <div class="form-top-right">\n                        <i class="fa fa-key"></i>\n                    </div>\n                </div>\n                <div class="form-bottom">\n                    <form name="login" role="form" method="post" class="login-form" ng-submit="auth.logout()">\n                        <div class="form-group">\n                            <label class="sr-only" for="form-username">Username</label>\n                            <input type="text" name="username" placeholder="Username..." class="form-username form-control" id="username" ng-model="signout.user.username">\n                        </div>\n                        <div class="form-group">\n                            <label class="sr-only" for="form-password">Password</label>\n                            <input type="password" name="password" placeholder="Password..." class="form-password form-control" id="password" ng-model="signout.user.password">\n                        </div>\n                        <button type="logout" class="btn" value="Logout">Sign Out!</button>\n                    </form>\n                </div>\n            </div>\n\n\n\n        </div>\n        \n    </div>\n</div>');$templateCache.put('modules/timeline/timeline-center.html','<div class="col-md-12 col-sm-12 col-xs-12">\n                 \n    <div class="twt-wrapper">\n        <div class="panel panel-info">\n\n            <div class="panel-body">\n                <textarea class="form-control" placeholder="What do you think?" rows="3"></textarea>\n                <br />\n                <a href="#" class="btn btn-primary btn-sm pull-right">Post</a>\n                <div class="clearfix"></div>\n                <hr />\n                <ul class="media-list">\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ Rexona Kumi</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor sit amet, <a href="#"># consectetur adipiscing </a>.\n                            </p>\n                        </div>\n                    </li>\n                    <li class="media">\n                        <a href="#" class="pull-left">\n                            <img src="/images/2.png" alt="" class="img-circle">\n                        </a>\n                        <div class="media-body">\n                            <span class="text-muted pull-right">\n                                <small class="text-muted">30 min ago</small>\n                            </span>\n                            <strong class="text-success">@ John Doe</strong>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Lorem ipsum dolor <a href="#"># ipsum dolor </a>adipiscing elit.\n                            </p>\n                        </div>\n                    </li>\n\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>\n<div class="col-md-12 col-sm-12 col-xs-12">\n\n    <div class="twt-wrapper">\n        <div class="panel panel-info">\n\n            <div class="panel-body">\n                <div class="clearfix"></div>\n                <hr />\n                <ul class="media-list">\n                    <li class="media">\n\n                        <div class="media-body">\n\n                            <p>\n                               Enter your message here...\n                                To be or not to be,\n                                that is the question...\n                                maybe, I think,\n                                I\'m not sure\n                                wait, you\'re still reading this?\n                                Type a good message already!\n                            </p>\n                        </div>\n                    </li>\n\n\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>');$templateCache.put('modules/timeline/timeline-left.html','\n<div align="center">\n    <img src="/images/img_avatar.png" class="img-circle img-responsive">\n</div>\n ');$templateCache.put('modules/user/user.html','<div>\n    <div>This is user page.</div>\n    <div>\n        <button ng-click="$ctrl.listUsers()" class="btn">List</button>\n    </div>\n    <div>\n        <ui ng-repeat="user in $ctrl.list_user">\n            <li class="user-listitem">{{ user.name }} {{ user.position }}</li>\n        </ui>\n    </div>\n    <div class="emotion-disappoint"></div>\n</div>\n');}]);

},{}],121:[function(require,module,exports){
"use strict";

var _timelineLeft = require("./timeline.left.controller");

var _timelineCenter = require("./timeline.center.controller");

angular.module("Timeline").controller("TimelineLeftController", _timelineLeft.TimelineLeftController).controller("TimelineCenterController", _timelineCenter.TimelineCenterController);

},{"./timeline.center.controller":122,"./timeline.left.controller":123}],122:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimelineCenterController = exports.TimelineCenterController = function TimelineCenterController() {
    "ngInject";

    _classCallCheck(this, TimelineCenterController);
};

},{}],123:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimelineLeftController = exports.TimelineLeftController = function TimelineLeftController() {
    "ngInject";

    _classCallCheck(this, TimelineLeftController);
};

},{}],124:[function(require,module,exports){
"use strict";

var _user = require("./user.service");

//import {UserController} from "./user.controller";

angular.module("User")
//.config(UserConfig)
.factory("UserService", _user.UserService);
//.controller("UserController", UserController);
//import {UserConfig} from "./user.config";

},{"./user.service":125}],125:[function(require,module,exports){
'use strict';

UserService.$inject = ["$timeout", "$filter", "$q", "$http", "MainAppConstant"];
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserService = UserService;
/**
 * @ngdoc service
 * @name User.service:UserService
 * @description Service for User module.
 */
function UserService($timeout, $filter, $q, $http, MainAppConstant) {
    "ngInject";

    var service = {};

    service.GetAll = GetAll;
    service.GetById = GetById;
    //service.GetByUsername = GetByUsername;
    service.isDuplicateUsername = isDuplicateUsername;
    service.Create = Create;
    service.Update = Update;
    service.Delete = Delete;

    return service;

    function GetAll() {
        var deferred = $q.defer();
        deferred.resolve(getUsers());
        return deferred.promise;
    }

    function GetById(id) {
        var deferred = $q.defer();
        var filtered = $filter('filter')(getUsers(), { id: id });
        var user = filtered.length ? filtered[0] : null;
        deferred.resolve(user);
        return deferred.promise;
    }

    //        function GetByUsername(username) {
    //            var deferred = $q.defer();
    //            var filtered = $filter('filter')(getUsers(), { username: username });
    //            var user = filtered.length ? filtered[0] : null;
    //            deferred.resolve(user);
    //            return deferred.promise;
    //        }

    function isDuplicateUsername(username) {
        var result = void 0;
        jQuery.ajax(MainAppConstant.apiPath + '/users/duplicate/' + username, {
            type: "GET",
            async: false,
            success: function success(data) {
                result = data.is;
            }
        });
        return result;
    }

    function Create(user) {
        var deferred = $q.defer();
        $http.post(MainAppConstant.apiPath + '/users', user).then(function (respond) {
            localStorage.token = respond.data.token;

            deferred.resolve();
        }, function (reason) {
            delete localStorage.token;

            deferred.reject();
        });
        return deferred.promise;

        //            var deferred = $q.defer();              // simulate api call with $timeout
        //
        //            $timeout(function () {
        //                GetByUsername(user.username)                    .then(function (duplicateUser) {
        //                    if (duplicateUser !== null) {
        //                        deferred.resolve({
        //                            success: false,
        //                            message: 'Username "' + user.username + '" is already taken'
        //                        });
        //                    } else {
        //                        var users = getUsers();                              // assign id
        //
        //                        var lastUser = users[users.length - 1] || {
        //                            id: 0
        //                        };
        //                        user.id = lastUser.id + 1;                              // save to local storage
        //
        //                        users.push(user);
        //                        setUsers(users);
        //                        deferred.resolve({
        //                            success: true
        //                        });
        //                    }
        //                });
        //            }, 1000);
        //            return deferred.promise;
    }

    function Update(user) {
        var deferred = $q.defer();

        var users = getUsers();
        for (var i = 0; i < users.length; i++) {
            if (users[i].id === user.id) {
                users[i] = user;
                break;
            }
        }
        setUsers(users);
        deferred.resolve();

        return deferred.promise;
    }

    function Delete(id) {
        var deferred = $q.defer();

        var users = getUsers();
        for (var i = 0; i < users.length; i++) {
            var user = users[i];
            if (user.id === id) {
                users.splice(i, 1);
                break;
            }
        }
        setUsers(users);
        deferred.resolve();

        return deferred.promise;
    }

    // private functions

    function getUsers() {
        if (!localStorage.users) {
            localStorage.users = JSON.stringify([]);
        }

        return JSON.parse(localStorage.users);
    }

    function setUsers(users) {
        localStorage.users = JSON.stringify(users);
    }
}

},{}]},{},[11]);
